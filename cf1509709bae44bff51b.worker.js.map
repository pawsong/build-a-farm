{"version":3,"sources":["webpack:///cf1509709bae44bff51b.worker.js","webpack:///webpack/bootstrap cf1509709bae44bff51b","webpack:///./src/vm/worker/index.ts","webpack:///./src/vm/shared.ts","webpack:///./~/js-interp/lib/JsObject.js","webpack:///./src/vm/IdIssuer.ts","webpack:///./src/vm/worker/ThreadManager.ts","webpack:///./src/vm/worker/api.ts","webpack:///./~/js-interp/lib/Interpreter.js","webpack:///./~/js-interp/lib/Primitive.js","webpack:///./~/js-interp/lib/index.js","webpack:///./~/js-interp/lib/utils.js","webpack:///./~/js-interp/~/acorn/dist/acorn.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_shared","_ThreadManager","_ThreadManager2","VM_FPS","threads","setInterval","onTick","self","onmessage","e","data","type","MW_RUN","_e$data","objectId","threadId","code","spawn","MW_STOP","_objectId","terminate","MW_API_RESPONSE","_e$data2","requestId","params","onResponse","Object","defineProperty","value","WM_STOPPED","WM_HIGHLIGHT_BLOCK","WM_API_REQUEST","WM_THREAD_START","WM_THREAD_STOP","JsObject","parent","this","isPrimitive","undefined","notConfigurable","create","notEnumerable","notWritable","getter","setter","properties","prototype","toBoolean","toNumber","Number","toString","String","valueOf","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","IdIssuer","_jsInterp","_IdIssuer","_IdIssuer2","_api","requestIdIssuer","ThreadManager","threadsByObjectId","Map","pendingRequests","thread","interpreter","Interpreter","createInitInterpreter","Set","push","set","message","postMessage","get","destroyThread","indexOf","step","api","_this","Error","Promise","resolve","reject","issue","add","body","pseudoToNative","request","delete","nativeToPseudo","index","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","splice","scope","setProperty","createNativeFunction","blockId","UNDEFINED","createAsyncFunction","types","position","acorn","Primitive_1","JsObject_1","utils","PARSE_OPTIONS","ecmaVersion","READONLY_DESCRIPTOR","NONENUMERABLE_DESCRIPTOR","READONLY_NONENUMERABLE_DESCRIPTOR","opt_initFunc","parse","ast","initFunc_","paused_","polyfills_","NULL","NAN","NaN","TRUE","FALSE","NUMBER_ZERO","NUMBER_ONE","STRING_EMPTY","createScope","NUMBER","BOOLEAN","STRING","join","stripLocations","stateStack","node","thisExpression","run","appendCode","state","populateScope_","stepArrayExpression","stepAssignmentExpression","stepBinaryExpression","stepBlockStatement","stepBreakStatement","stepCallExpression","stepCatchClause","stepConditionalExpression","stepContinueStatement","stepDoWhileStatement","stepEmptyStatement","stepEval_","stepExpressionStatement","stepForInStatement","stepForStatement","stepFunctionDeclaration","stepFunctionExpression","stepIdentifier","stepIfStatement","stepLabeledStatement","stepLiteral","stepLogicalExpression","stepMemberExpression","stepNewExpression","stepObjectExpression","stepProgram","stepReturnStatement","stepSequenceExpression","stepSwitchStatement","stepThisExpression","stepThrowStatement","stepTryStatement","stepUnaryExpression","stepUpdateExpression","stepVariableDeclaration","stepVariableDeclarator","stepWithStatement","stepWhileStatement","end","initGlobalScope","createPrimitive","Infinity","initFunction","initObject","OBJECT","initArray","initNumber","initString","initBoolean","initDate","initMath","initRegExp","initJSON","initError","num","isNaN","isFinite","getProperty","func","createObject","FUNCTION","eval","createUriFunction","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","fn","str","throwException","URI_ERROR","wrapper","thisInterpreter","var_args","newFunc","arguments","args","SyntaxError","parentScope","statement","expression","right","nativeFunc","thisArg","func_","funcThis_","isa","ARRAY","TYPE_ERROR","doneArgs_","doneExec_","setNativeFunctionPrototype","clone","createFunction","boundThis_","boundArgs_","pseudoList","prop","preventExtensions","nativeDescriptor","getInt","def","n","Math","floor","newArray","first","arrayIndex","RANGE_ERROR","tmp","howmany","max","min","removed","opt_begin","opt_end","list","begin","element","opt_separator","sep","text","j","searchElement","opt_fromIndex","fromIndex","strictComp","MAX_VALUE","MIN_VALUE","NEGATIVE_INFINITY","POSITIVE_INFINITY","parseFloat","radix","parseInt","fractionDigits","toExponential","digits","toFixed","precision","toPrecision","locales","options","toLocaleString","fromCharCode","apply","functions","replace","searchValue","lastIndexOf","compareString","localeCompare","separator","limit","REGEXP","jsList","split","regexp","match","search","substr","newSubStr","a","b","d","f","h","newDate","DATE","Date","Function","bind","getTime","dateString","UTC","i_1","myMath","E","LN2","LN10","LOG2E","LOG10E","PI","SQRT1_2","SQRT2","numFunctions","pattern","flags","rgx","populateRegExp_","RegExp","test","lastIndex","exec","result","input","myJSON","nativeObj","JSON","stringify","ERROR","opt_message","newError","createErrorSubclass","name","constructor","EVAL_ERROR","REFERENCE_ERROR","SYNTAX_ERROR","strs","pseudoRegexp","nativeRegexp","source","global","ignoreCase","multiline","opt_scope","getScope","asyncFunc","pseudoObj","Array","isGetter","hasProperty","opt_descriptor","newLength","strict","parent_1","deleteProperty","firstNode","createSpecialScope","getValueFromScope","nameStr","setValueToScope","declarations","name_1","getValue","left","setValue","errorClass","error","shift","handler","realError","errorTable","EvalError","RangeError","ReferenceError","URIError","name_2","unshift","throwValue","array","elements","doneLeft","components","doneRight","leftSide","doneGetter_","leftValue","operator","doneCallee_","doneSetter_","rightSide","rightValue","leftNumber","rightNumber","comp","n_","label","isLoop","isSwitch","callee","member_","isConstructor_","concat","paramName","paramValue","argsList","funcState","then","evalInterpreter","doneBody","param","consequent","alternate","doneVariable_","doneObject_","variable","object","mode","init","update","doneLeft_","doneRight_","doneProperty_","property","computed","valueToggle","kind","kinds","argument","expressions","checked","discriminant","switchValue","currentCase","cases","doneBlock","doneFinalizer","finalizer","block","nextState","name_3","changeValue","returnValue","prefix","doneObject","Primitive","Boolean","Interpreter_1","start","hasOwnProperty","child","factory","isInAstralSet","pos","isIdentifierStart","astral","nonASCIIidentifierStart","astralIdentifierStartCodes","isIdentifierChar","nonASCIIidentifier","astralIdentifierCodes","binop","prec","TokenType","beforeExpr","kw","keyword","keywordTypes","isNewLine","isArray","has","propName","getLineInfo","offset","line","cur","lineBreakG","Position","getOptions","opts","opt","defaultOptions","allowReserved","onToken","tokens","token","onComment","pushComment","startLoc","endLoc","comment","locations","loc","SourceLocation","ranges","range","keywordRegexp","words","finishNodeAt","tryCreateRegexp","src","throwErrorAt","parser","raise","codePointToString","Parser","parseExpressionAt","nextToken","parseExpression","tokenizer","addLooseExports","plugins","parse_dammit","LooseParser","pluginsLoose","reservedWords","3","5","6","strictBind","ecma5AndLessKeywords","keywords","nonASCIIidentifierStartChars","nonASCIIidentifierChars","conf","startsExpr","isAssign","postfix","updateContext","tt","string","eof","bracketL","bracketR","braceL","braceR","parenL","parenR","comma","semi","colon","dot","question","arrow","template","ellipsis","backQuote","dollarBraceL","eq","assign","incDec","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","starstar","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","lineBreak","nonASCIIwhitespace","skipWhiteSpace","col","column","sourceFile","sourceType","onInsertedSemicolon","onTrailingComma","allowReturnOutsideFunction","allowImportExportEverywhere","allowHashBang","program","directSourceFile","preserveParens","startPos","reserved","v","reservedStrict","reservedWordsStrict","reservedWordsStrictBind","containsEsc","loadPlugins","lineStart","curLine","slice","curPosition","lastTokEndLoc","lastTokStartLoc","lastTokStart","lastTokEnd","context","initialContext","exprAllowed","inModule","potentialArrowAt","inFunction","inGenerator","inAsync","yieldPos","awaitPos","labels","skipLineComment","isKeyword","word","isReservedWord","extend","pluginConfigs","this$1","plugin","startNode","parseTopLevel","pp","isUseStrict","stmt","raw","eat","isContextual","eatContextual","expectContextual","unexpected","canInsertSemicolon","insertSemicolon","semicolon","afterTrailingComma","tokType","notNext","expect","DestructuringErrors","shorthandAssign","trailingComma","checkPatternErrors","refDestructuringErrors","andThrow","trailing","checkExpressionErrors","checkYieldAwaitInDefaultParams","pp$1","parseStatement","setStrict","finishNode","loopLabel","switchLabel","isLet","skip","nextCh","charCodeAt","ident","isAsyncFunction","charAt","declaration","topLevel","starttype","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseFunctionStatement","parseClass","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVarStatement","parseWhileStatement","parseWithStatement","parseBlock","parseEmptyStatement","parseImport","parseExport","maybeName","expr","parseLabeledStatement","parseExpressionStatement","isBreak","parseIdent","lab","pop","parseParenExpression","parseFor","init$1","parseVar","parseForIn","toAssignable","checkLVal","isAsync","parseFunction","isFunction","sawDefault","isCase","raiseRecoverable","empty","clause","parseBindingAtom","i$1","statementStart","allowStrict","oldStrict","isFor","decl","parseVarId","parseMaybeAssign","isStatement","allowExpressionBody","generator","async","oldInGen","oldInAsync","oldYieldPos","oldAwaitPos","parseFunctionParams","parseFunctionBody","parseBindingList","parseClassId","parseClassSuper","classBody","hadConstructor","method","isGenerator","isMaybeStatic","parsePropertyName","static","isGetSet","parseClassMethod","paramCount","parseMethod","superClass","parseExprSubscripts","parseExprAtom","checkExport","parens","needsSemi","shouldParseExportStatement","checkVariableExport","specifiers","parseExportSpecifiers","local","checkPatternExport","pat","elt","decls","nodes","exported","parseImportSpecifiers","node$1","node$2","imported","pp$2","isBinding","toAssignableList","exprList","last","arg","parseSpread","parseRest","allowNonIdent","parseObj","close","allowEmpty","allowTrailingComma","elts","rest","parseBindingListItem","elem","parseMaybeDefault","startNodeAt","checkClashes","pp$3","checkPropClash","propHash","shorthand","proto","other","noIn","afterLeftParse","parseYield","ownDestructuringErrors","parseMaybeConditional","parseExprOps","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","logical","op","buildBinary","sawUnary","parseAwait","skipArrowSubscripts","parseSubscripts","base","noCalls","maybeAsyncArrow","parseExprList","parseArrowExpression","node$3","tag","quasi","parseTemplate","canBeArrow","parseLiteral","regex","parseParenAndDistinguishExpression","parseNew","val","spreadStart","innerParenStart","innerStartPos","innerStartLoc","lastIsComma","parseParenItem","innerEndPos","innerEndLoc","parseParenArrowList","par","item","empty$1","meta","parseTemplateElement","cooked","tail","curElt","quasis","isPattern","parsePropertyValue","isArrowFunction","isExpression","oldInFunc","oldLabels","useStrict","isSimpleParamList","checkParams","nameHash","liberal","delegate","pp$4","raisedAt","Node","pp$5","TokContext","isExpr","preserveSpace","override","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","readTmplToken","f_expr","pp$6","braceIsBlock","prevType","curContext","out","statementParens","Token","pp$7","isRhino","Packages","getToken","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","skipBlockComment","startSkip","ch","loop","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","readToken_mult_modulo_exp","size","tokentype","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt_gt","readToken_eq_excl","readRadixNumber","readString","regexpUnicodeSupport","escaped","inClass","content","mods","readWord1","tmpFlags","validFlags","_match","readInt","len","total","startsWithDot","isFloat","octal","readCodePoint","codePos","readHexChar","quote","chunkStart","readEscapedChar","inTemplate","octalStr","escStart","esc","version","tokTypes","tokContexts"],"mappings":"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","file":"cf1509709bae44bff51b.worker.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _shared = __webpack_require__(1);\n\t\n\tvar _ThreadManager = __webpack_require__(4);\n\t\n\tvar _ThreadManager2 = _interopRequireDefault(_ThreadManager);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar VM_FPS = 100;\n\tvar threads = new _ThreadManager2.default();\n\tsetInterval(function () {\n\t    return threads.onTick();\n\t}, 1000 / VM_FPS);\n\tself.onmessage = function (e) {\n\t    switch (e.data.type) {\n\t        case _shared.MW_RUN:\n\t            {\n\t                var _e$data = e.data;\n\t                var objectId = _e$data.objectId;\n\t                var threadId = _e$data.threadId;\n\t                var code = _e$data.code;\n\t\n\t                threads.spawn(objectId, threadId, code);\n\t                break;\n\t            }\n\t        case _shared.MW_STOP:\n\t            {\n\t                var _objectId = e.data.objectId;\n\t\n\t                threads.terminate(_objectId);\n\t                break;\n\t            }\n\t        case _shared.MW_API_RESPONSE:\n\t            {\n\t                var _e$data2 = e.data;\n\t                var requestId = _e$data2.requestId;\n\t                var params = _e$data2.params;\n\t\n\t                threads.onResponse(requestId, params);\n\t                break;\n\t            }\n\t    }\n\t};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\tvar WM_STOPPED = exports.WM_STOPPED = 'WM_STOPPED';\n\tvar MW_STOP = exports.MW_STOP = 'MW_STOP';\n\tvar MW_RUN = exports.MW_RUN = 'MW_RUN';\n\tvar MW_API_RESPONSE = exports.MW_API_RESPONSE = 'MW_API_RESPONSE';\n\tvar WM_HIGHLIGHT_BLOCK = exports.WM_HIGHLIGHT_BLOCK = 'WM_HIGHLIGHT_BLOCK';\n\tvar WM_API_REQUEST = exports.WM_API_REQUEST = 'WM_API_REQUEST';\n\tvar WM_THREAD_START = exports.WM_THREAD_START = 'WM_THREAD_START';\n\tvar WM_THREAD_STOP = exports.WM_THREAD_STOP = 'WM_THREAD_STOP';\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar JsObject = (function () {\n\t    /**\n\t     * Class for an object.\n\t     * @param {Interpreter.Object} parent Parent constructor function.\n\t     * @constructor\n\t     */\n\t    function JsObject(parent) {\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.type = 'object';\n\t        /**\n\t         * @type {Interpreter.Object}\n\t         */\n\t        this.parent = null;\n\t        /**\n\t         * @type {boolean}\n\t         */\n\t        this.isPrimitive = false;\n\t        /**\n\t         * @type {number|string|boolean|undefined|!RegExp}\n\t         */\n\t        this.data = undefined;\n\t        this.notConfigurable = Object.create(null);\n\t        this.notEnumerable = Object.create(null);\n\t        this.notWritable = Object.create(null);\n\t        this.getter = Object.create(null);\n\t        this.setter = Object.create(null);\n\t        this.properties = Object.create(null);\n\t        this.parent = parent;\n\t    }\n\t    ;\n\t    /**\n\t     * Convert this object into a boolean.\n\t     * @return {boolean} Boolean value.\n\t     */\n\t    JsObject.prototype.toBoolean = function () {\n\t        return true;\n\t    };\n\t    ;\n\t    /**\n\t     * Convert this object into a number.\n\t     * @return {number} Number value.\n\t     */\n\t    JsObject.prototype.toNumber = function () {\n\t        return Number(this.data === undefined ? this.toString() : this.data);\n\t    };\n\t    ;\n\t    /**\n\t     * Convert this object into a string.\n\t     * @return {string} String value.\n\t     * @override\n\t     */\n\t    JsObject.prototype.toString = function () {\n\t        return this.data === undefined ? ('[' + this.type + ']') : String(this.data);\n\t    };\n\t    ;\n\t    /**\n\t     * Return the object value.\n\t     * @return {*} Value.\n\t     * @override\n\t     */\n\t    JsObject.prototype.valueOf = function () {\n\t        return this.data === undefined ? this : this.data;\n\t    };\n\t    ;\n\t    return JsObject;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = JsObject;\n\t//# sourceMappingURL=JsObject.js.map\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar IdIssuer = function () {\n\t    function IdIssuer() {\n\t        _classCallCheck(this, IdIssuer);\n\t\n\t        this.id = 0;\n\t    }\n\t\n\t    _createClass(IdIssuer, [{\n\t        key: \"issue\",\n\t        value: function issue() {\n\t            return ++this.id;\n\t        }\n\t    }]);\n\t\n\t    return IdIssuer;\n\t}();\n\t\n\texports.default = IdIssuer;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _jsInterp = __webpack_require__(8);\n\t\n\tvar _IdIssuer = __webpack_require__(3);\n\t\n\tvar _IdIssuer2 = _interopRequireDefault(_IdIssuer);\n\t\n\tvar _api = __webpack_require__(5);\n\t\n\tvar _shared = __webpack_require__(1);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar requestIdIssuer = new _IdIssuer2.default();\n\t\n\tvar ThreadManager = function () {\n\t    function ThreadManager() {\n\t        _classCallCheck(this, ThreadManager);\n\t\n\t        this.threads = [];\n\t        this.threadsByObjectId = new Map();\n\t        this.pendingRequests = new Map();\n\t    }\n\t\n\t    _createClass(ThreadManager, [{\n\t        key: 'spawn',\n\t        value: function spawn(objectId, threadId, code) {\n\t            this.terminate(objectId);\n\t            var thread = {\n\t                objectId: objectId,\n\t                threadId: threadId,\n\t                interpreter: new _jsInterp.Interpreter(code, (0, _api.createInitInterpreter)(this, threadId, objectId)),\n\t                pendingRequests: new Set()\n\t            };\n\t            this.threads.push(thread);\n\t            this.threadsByObjectId.set(thread.objectId, thread);\n\t            var message = {\n\t                type: _shared.WM_THREAD_START,\n\t                objectId: thread.objectId,\n\t                threadId: thread.threadId\n\t            };\n\t            self.postMessage(message);\n\t        }\n\t    }, {\n\t        key: 'terminate',\n\t        value: function terminate(objectId) {\n\t            var thread = this.threadsByObjectId.get(objectId);\n\t            if (thread) {\n\t                this.destroyThread(thread, this.threads.indexOf(thread));\n\t            }\n\t        }\n\t    }, {\n\t        key: 'onTick',\n\t        value: function onTick() {\n\t            for (var i = this.threads.length - 1; i >= 0; --i) {\n\t                var thread = this.threads[i];\n\t                if (!thread.interpreter.step()) {\n\t                    this.destroyThread(thread, i);\n\t                }\n\t            }\n\t        }\n\t    }, {\n\t        key: 'request',\n\t        value: function request(objectId, api, params) {\n\t            var _this = this;\n\t\n\t            var thread = this.threadsByObjectId.get(objectId);\n\t            if (!thread) throw new Error('Cannot find thread for object ' + objectId);\n\t            return new Promise(function (resolve, reject) {\n\t                var requestId = requestIdIssuer.issue();\n\t                _this.pendingRequests.set(requestId, { objectId: objectId, resolve: resolve, reject: reject });\n\t                thread.pendingRequests.add(requestId);\n\t                var message = {\n\t                    objectId: objectId, requestId: requestId, api: api,\n\t                    type: _shared.WM_API_REQUEST,\n\t                    body: params && thread.interpreter.pseudoToNative(params),\n\t                    threadId: thread.threadId\n\t                };\n\t                self.postMessage(message);\n\t            });\n\t        }\n\t    }, {\n\t        key: 'onResponse',\n\t        value: function onResponse(requestId, params) {\n\t            var request = this.pendingRequests.get(requestId);\n\t            if (!request) return;\n\t            this.pendingRequests.delete(requestId);\n\t            var thread = this.threadsByObjectId.get(request.objectId);\n\t            if (!thread) return;\n\t            thread.pendingRequests.delete(requestId);\n\t            request.resolve(thread.interpreter.nativeToPseudo(params));\n\t        }\n\t    }, {\n\t        key: 'destroyThread',\n\t        value: function destroyThread(thread, index) {\n\t            var _iteratorNormalCompletion = true;\n\t            var _didIteratorError = false;\n\t            var _iteratorError = undefined;\n\t\n\t            try {\n\t                for (var _iterator = thread.pendingRequests[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t                    var requestId = _step.value;\n\t\n\t                    this.pendingRequests.delete(requestId);\n\t                }\n\t            } catch (err) {\n\t                _didIteratorError = true;\n\t                _iteratorError = err;\n\t            } finally {\n\t                try {\n\t                    if (!_iteratorNormalCompletion && _iterator.return) {\n\t                        _iterator.return();\n\t                    }\n\t                } finally {\n\t                    if (_didIteratorError) {\n\t                        throw _iteratorError;\n\t                    }\n\t                }\n\t            }\n\t\n\t            thread.pendingRequests = null;\n\t            this.threads.splice(index, 1);\n\t            this.threadsByObjectId.delete(thread.objectId);\n\t            var message = {\n\t                type: _shared.WM_THREAD_STOP,\n\t                objectId: thread.objectId,\n\t                threadId: thread.threadId\n\t            };\n\t            self.postMessage(message);\n\t        }\n\t    }]);\n\t\n\t    return ThreadManager;\n\t}();\n\t\n\texports.default = ThreadManager;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.createInitInterpreter = undefined;\n\t\n\tvar _shared = __webpack_require__(1);\n\t\n\tfunction createInitInterpreter(threads, threadId, objectId) {\n\t    return function initInterpreter(interpreter, scope) {\n\t        interpreter.setProperty(scope, 'highlightBlock', interpreter.createNativeFunction(function (id) {\n\t            var blockId = id ? id.toString() : '';\n\t            var message = {\n\t                type: _shared.WM_HIGHLIGHT_BLOCK,\n\t                objectId: objectId, threadId: threadId, blockId: blockId\n\t            };\n\t            self.postMessage(message);\n\t            return interpreter.UNDEFINED;\n\t        }));\n\t        // API\n\t        interpreter.setProperty(scope, 'getNearestVoxels', interpreter.createAsyncFunction(function (types) {\n\t            return threads.request(objectId, 'getNearestVoxels', types);\n\t        }));\n\t        interpreter.setProperty(scope, 'moveTo', interpreter.createAsyncFunction(function (position) {\n\t            return threads.request(objectId, 'moveTo', position);\n\t        }));\n\t        interpreter.setProperty(scope, 'use', interpreter.createAsyncFunction(function (position) {\n\t            return threads.request(objectId, 'use', position);\n\t        }));\n\t        interpreter.setProperty(scope, 'jump', interpreter.createAsyncFunction(function () {\n\t            return threads.request(objectId, 'jump');\n\t        }));\n\t    };\n\t}\n\texports.createInitInterpreter = createInitInterpreter;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar acorn = __webpack_require__(10);\n\tvar Primitive_1 = __webpack_require__(7);\n\tvar JsObject_1 = __webpack_require__(2);\n\tvar utils = __webpack_require__(9);\n\t/**\n\t * @const {!Object} Configuration used for all Acorn parsing.\n\t */\n\tvar PARSE_OPTIONS = {\n\t    ecmaVersion: 5\n\t};\n\t/**\n\t * Property descriptor of readonly properties.\n\t */\n\tvar READONLY_DESCRIPTOR = {\n\t    configurable: true,\n\t    enumerable: true,\n\t    writable: false\n\t};\n\t/**\n\t * Property descriptor of non-enumerable properties.\n\t */\n\tvar NONENUMERABLE_DESCRIPTOR = {\n\t    configurable: true,\n\t    enumerable: false,\n\t    writable: true\n\t};\n\t/**\n\t * Property descriptor of readonly, non-enumerable properties.\n\t */\n\tvar READONLY_NONENUMERABLE_DESCRIPTOR = {\n\t    configurable: true,\n\t    enumerable: false,\n\t    writable: false\n\t};\n\t/**\n\t * @fileoverview Interpreting JavaScript in JavaScript.\n\t * @author fraser@google.com (Neil Fraser)\n\t */\n\tvar Interpreter = (function () {\n\t    /**\n\t     * Create a new interpreter.\n\t     * @param {string|!Object} code Raw JavaScript text or AST.\n\t     * @param {Function=} opt_initFunc Optional initialization function.  Used to\n\t     *     define APIs.  When called it is passed the interpreter object and the\n\t     *     global scope object.\n\t     * @constructor\n\t     */\n\t    function Interpreter(code, opt_initFunc) {\n\t        if (typeof code == 'string') {\n\t            code = acorn.parse(code, PARSE_OPTIONS);\n\t        }\n\t        this.ast = code;\n\t        this.initFunc_ = opt_initFunc;\n\t        this.paused_ = false;\n\t        this.polyfills_ = [];\n\t        // Predefine some common primitives for performance.\n\t        this.UNDEFINED = new Primitive_1.default(undefined, this);\n\t        this.NULL = new Primitive_1.default(null, this);\n\t        this.NAN = new Primitive_1.default(NaN, this);\n\t        this.TRUE = new Primitive_1.default(true, this);\n\t        this.FALSE = new Primitive_1.default(false, this);\n\t        this.NUMBER_ZERO = new Primitive_1.default(0, this);\n\t        this.NUMBER_ONE = new Primitive_1.default(1, this);\n\t        this.STRING_EMPTY = new Primitive_1.default('', this);\n\t        // Create and initialize the global scope.\n\t        var scope = this.createScope(this.ast, null);\n\t        // Fix the parent properties now that the global scope exists.\n\t        //this.UNDEFINED.parent = undefined;\n\t        //this.NULL.parent = undefined;\n\t        this.NAN.parent = this.NUMBER;\n\t        this.TRUE.parent = this.BOOLEAN;\n\t        this.FALSE.parent = this.BOOLEAN;\n\t        this.NUMBER_ZERO.parent = this.NUMBER;\n\t        this.NUMBER_ONE.parent = this.NUMBER;\n\t        this.STRING_EMPTY.parent = this.STRING;\n\t        // Run the polyfills.\n\t        this.ast = acorn.parse(this.polyfills_.join('\\n'), PARSE_OPTIONS);\n\t        this.polyfills_ = undefined; // Allow polyfill strings to garbage collect.\n\t        utils.stripLocations(this.ast);\n\t        this.stateStack = [{\n\t                node: this.ast,\n\t                scope: scope,\n\t                thisExpression: scope,\n\t                done: false\n\t            }];\n\t        this.run();\n\t        this.value = this.UNDEFINED;\n\t        // Point at the main program.\n\t        this.ast = code;\n\t        this.stateStack = [{\n\t                node: this.ast,\n\t                scope: scope,\n\t                thisExpression: scope,\n\t                done: false,\n\t            }];\n\t    }\n\t    /**\n\t     * Add more code to the interpreter.\n\t     * @param {string|!Object} code Raw JavaScript text or AST.\n\t     */\n\t    Interpreter.prototype.appendCode = function (code) {\n\t        var state = this.stateStack[this.stateStack.length - 1];\n\t        if (!state || state.node.type != 'Program') {\n\t            throw Error('Expecting original AST to start with a Program node.');\n\t        }\n\t        if (typeof code == 'string') {\n\t            code = acorn.parse(code, PARSE_OPTIONS);\n\t        }\n\t        if (!code || code.type != 'Program') {\n\t            throw Error('Expecting new AST to start with a Program node.');\n\t        }\n\t        this.populateScope_(code, state.scope);\n\t        // Append the new program to the old one.\n\t        for (var i = 0, node = void 0; node = code.body[i]; i++) {\n\t            state.node.body.push(node);\n\t        }\n\t        state.done = false;\n\t    };\n\t    ;\n\t    /**\n\t     * Execute one step of the interpreter.\n\t     * @return {boolean} True if a step was executed, false if no more instructions.\n\t     */\n\t    Interpreter.prototype.step = function () {\n\t        var state = this.stateStack[0];\n\t        if (!state || state.node.type == 'Program' && state.done) {\n\t            return false;\n\t        }\n\t        else if (this.paused_) {\n\t            return true;\n\t        }\n\t        switch (state.node.type) {\n\t            case 'ArrayExpression': {\n\t                this.stepArrayExpression();\n\t                break;\n\t            }\n\t            case 'AssignmentExpression': {\n\t                this.stepAssignmentExpression();\n\t                break;\n\t            }\n\t            case 'BinaryExpression': {\n\t                this.stepBinaryExpression();\n\t                break;\n\t            }\n\t            case 'BlockStatement': {\n\t                this.stepBlockStatement();\n\t                break;\n\t            }\n\t            case 'BreakStatement': {\n\t                this.stepBreakStatement();\n\t                break;\n\t            }\n\t            case 'CallExpression': {\n\t                this.stepCallExpression();\n\t                break;\n\t            }\n\t            case 'CatchClause': {\n\t                this.stepCatchClause();\n\t                break;\n\t            }\n\t            case 'ConditionalExpression': {\n\t                this.stepConditionalExpression();\n\t                break;\n\t            }\n\t            case 'ContinueStatement': {\n\t                this.stepContinueStatement();\n\t                break;\n\t            }\n\t            case 'DoWhileStatement': {\n\t                this.stepDoWhileStatement();\n\t                break;\n\t            }\n\t            case 'EmptyStatement': {\n\t                this.stepEmptyStatement();\n\t                break;\n\t            }\n\t            case 'Eval_': {\n\t                this.stepEval_();\n\t                break;\n\t            }\n\t            case 'ExpressionStatement': {\n\t                this.stepExpressionStatement();\n\t                break;\n\t            }\n\t            case 'ForInStatement': {\n\t                this.stepForInStatement();\n\t                break;\n\t            }\n\t            case 'ForStatement': {\n\t                this.stepForStatement();\n\t                break;\n\t            }\n\t            case 'FunctionDeclaration': {\n\t                this.stepFunctionDeclaration();\n\t                break;\n\t            }\n\t            case 'FunctionExpression': {\n\t                this.stepFunctionExpression();\n\t                break;\n\t            }\n\t            case 'Identifier': {\n\t                this.stepIdentifier();\n\t                break;\n\t            }\n\t            case 'IfStatement': {\n\t                this.stepIfStatement();\n\t                break;\n\t            }\n\t            case 'LabeledStatement': {\n\t                this.stepLabeledStatement();\n\t                break;\n\t            }\n\t            case 'Literal': {\n\t                this.stepLiteral();\n\t                break;\n\t            }\n\t            case 'LogicalExpression': {\n\t                this.stepLogicalExpression();\n\t                break;\n\t            }\n\t            case 'MemberExpression': {\n\t                this.stepMemberExpression();\n\t                break;\n\t            }\n\t            case 'NewExpression': {\n\t                this.stepNewExpression();\n\t                break;\n\t            }\n\t            case 'ObjectExpression': {\n\t                this.stepObjectExpression();\n\t                break;\n\t            }\n\t            case 'Program': {\n\t                this.stepProgram();\n\t                break;\n\t            }\n\t            case 'ReturnStatement': {\n\t                this.stepReturnStatement();\n\t                break;\n\t            }\n\t            case 'SequenceExpression': {\n\t                this.stepSequenceExpression();\n\t                break;\n\t            }\n\t            case 'SwitchStatement': {\n\t                this.stepSwitchStatement();\n\t                break;\n\t            }\n\t            case 'ThisExpression': {\n\t                this.stepThisExpression();\n\t                break;\n\t            }\n\t            case 'ThrowStatement': {\n\t                this.stepThrowStatement();\n\t                break;\n\t            }\n\t            case 'TryStatement': {\n\t                this.stepTryStatement();\n\t                break;\n\t            }\n\t            case 'UnaryExpression': {\n\t                this.stepUnaryExpression();\n\t                break;\n\t            }\n\t            case 'UpdateExpression': {\n\t                this.stepUpdateExpression();\n\t                break;\n\t            }\n\t            case 'VariableDeclaration': {\n\t                this.stepVariableDeclaration();\n\t                break;\n\t            }\n\t            case 'VariableDeclarator': {\n\t                this.stepVariableDeclarator();\n\t                break;\n\t            }\n\t            case 'WithStatement': {\n\t                this.stepWithStatement();\n\t                break;\n\t            }\n\t            case 'WhileStatement': {\n\t                this.stepWhileStatement();\n\t                break;\n\t            }\n\t            default: {\n\t                throw Error(\"invalid node: \" + state.node.type);\n\t            }\n\t        }\n\t        if (!state.node.end) {\n\t            // This is polyfill code. Keep executing until we arrive at user code.\n\t            return this.step();\n\t        }\n\t        return true;\n\t    };\n\t    ;\n\t    /**\n\t     * Execute the interpreter to program completion. Vulnerable to infinite loops.\n\t     * @return {boolean} True if a execution is asynchonously blocked,\n\t     *     false if no more instructions.\n\t     */\n\t    Interpreter.prototype.run = function () {\n\t        while (!this.paused_ && this.step()) { }\n\t        return this.paused_;\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the global scope with buitin properties and functions.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initGlobalScope = function (scope) {\n\t        var _this = this;\n\t        // Initialize uneditable global properties.\n\t        this.setProperty(scope, 'Infinity', this.createPrimitive(Infinity), READONLY_DESCRIPTOR);\n\t        this.setProperty(scope, 'NaN', this.NAN, READONLY_DESCRIPTOR);\n\t        this.setProperty(scope, 'undefined', this.UNDEFINED, READONLY_DESCRIPTOR);\n\t        this.setProperty(scope, 'window', scope, READONLY_DESCRIPTOR);\n\t        this.setProperty(scope, 'self', scope); // Editable.\n\t        // Initialize global objects.\n\t        this.initFunction(scope);\n\t        this.initObject(scope);\n\t        // Unable to set scope's parent prior (this.OBJECT did not exist).\n\t        scope.parent = this.OBJECT;\n\t        this.initArray(scope);\n\t        this.initNumber(scope);\n\t        this.initString(scope);\n\t        this.initBoolean(scope);\n\t        this.initDate(scope);\n\t        this.initMath(scope);\n\t        this.initRegExp(scope);\n\t        this.initJSON(scope);\n\t        this.initError(scope);\n\t        // Initialize global functions.\n\t        this.setProperty(scope, 'isNaN', this.createNativeFunction(function (num) {\n\t            num = num || _this.UNDEFINED;\n\t            return _this.createPrimitive(isNaN(num.toNumber()));\n\t        }));\n\t        this.setProperty(scope, 'isFinite', this.createNativeFunction(function (num) {\n\t            num = num || _this.UNDEFINED;\n\t            return _this.createPrimitive(isFinite(num.toNumber()));\n\t        }));\n\t        this.setProperty(scope, 'parseFloat', this.getProperty(this.NUMBER, 'parseFloat'));\n\t        this.setProperty(scope, 'parseInt', this.getProperty(this.NUMBER, 'parseInt'));\n\t        var func = this.createObject(this.FUNCTION);\n\t        func.eval = true;\n\t        this.setProperty(func, 'length', this.NUMBER_ONE, READONLY_DESCRIPTOR);\n\t        this.setProperty(scope, 'eval', func);\n\t        this.setProperty(scope, 'decodeURI', this.createUriFunction(decodeURI));\n\t        this.setProperty(scope, 'decodeURIComponent', this.createUriFunction(decodeURIComponent));\n\t        this.setProperty(scope, 'encodeURI', this.createUriFunction(encodeURI));\n\t        this.setProperty(scope, 'encodeURIComponent', this.createUriFunction(encodeURIComponent));\n\t        // Run any user-provided initialization.\n\t        if (this.initFunc_) {\n\t            this.initFunc_(this, scope);\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.createUriFunction = function (fn) {\n\t        var _this = this;\n\t        return this.createNativeFunction(function (str) {\n\t            str = (str || _this.UNDEFINED).toString();\n\t            try {\n\t                str = fn(str);\n\t            }\n\t            catch (e) {\n\t                // decodeURI('%xy') will throw an error.  Catch and rethrow.\n\t                _this.throwException(_this.URI_ERROR, e.message);\n\t            }\n\t            return _this.createPrimitive(str);\n\t        });\n\t    };\n\t    /**\n\t     * Initialize the Function class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initFunction = function (scope) {\n\t        var thisInterpreter = this;\n\t        var wrapper;\n\t        // Function constructor.\n\t        wrapper = function (var_args) {\n\t            var newFunc;\n\t            var code;\n\t            if (this.parent == thisInterpreter.FUNCTION) {\n\t                // Called with new.\n\t                newFunc = this;\n\t            }\n\t            else {\n\t                newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);\n\t            }\n\t            if (arguments.length) {\n\t                code = arguments[arguments.length - 1].toString();\n\t            }\n\t            else {\n\t                code = '';\n\t            }\n\t            var args = [];\n\t            for (var i = 0; i < arguments.length - 1; i++) {\n\t                args.push(arguments[i].toString());\n\t            }\n\t            args = args.join(', ');\n\t            if (args.indexOf(')') != -1) {\n\t                throw SyntaxError('Function arg string contains parenthesis');\n\t            }\n\t            // Interestingly, the scope for constructed functions is the global scope,\n\t            // even if they were constructed in some other scope.\n\t            newFunc.parentScope = thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;\n\t            var ast = acorn.parse('$ = function(' + args + ') {' + code + '};', PARSE_OPTIONS);\n\t            var statement = ast.body[0];\n\t            var expression = statement.expression;\n\t            newFunc.node = expression.right;\n\t            thisInterpreter.setProperty(newFunc, 'length', thisInterpreter.createPrimitive(newFunc.node.length), READONLY_DESCRIPTOR);\n\t            return newFunc;\n\t        };\n\t        this.FUNCTION = this.createObject(null);\n\t        this.setProperty(scope, 'Function', this.FUNCTION);\n\t        // Manually setup type and prototype because createObj doesn't recognize\n\t        // this object as a function (this.FUNCTION did not exist).\n\t        this.FUNCTION.type = 'function';\n\t        this.setProperty(this.FUNCTION, 'prototype', this.createObject(null));\n\t        this.FUNCTION.nativeFunc = wrapper;\n\t        wrapper = function (thisArg, args) {\n\t            var state = thisInterpreter.stateStack[0];\n\t            // Rewrite the current 'CallExpression' to apply a different function.\n\t            state.func_ = this;\n\t            // Assign the 'this' object.\n\t            state.funcThis_ = thisArg;\n\t            // Bind any provided arguments.\n\t            state.arguments = [];\n\t            if (args) {\n\t                if (utils.isa(args, thisInterpreter.ARRAY)) {\n\t                    for (var i = 0; i < args.length; i++) {\n\t                        state.arguments[i] = thisInterpreter.getProperty(args, i);\n\t                    }\n\t                }\n\t                else {\n\t                    thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'CreateListFromArrayLike called on non-object');\n\t                }\n\t            }\n\t            state.doneArgs_ = true;\n\t            state.doneExec_ = false;\n\t        };\n\t        this.setNativeFunctionPrototype(this.FUNCTION, 'apply', wrapper);\n\t        wrapper = function (thisArg, var_args) {\n\t            var state = thisInterpreter.stateStack[0];\n\t            // Rewrite the current 'CallExpression' to call a different function.\n\t            state.func_ = this;\n\t            // Assign the 'this' object.\n\t            state.funcThis_ = thisArg;\n\t            // Bind any provided arguments.\n\t            state.arguments = [];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                state.arguments.push(arguments[i]);\n\t            }\n\t            state.doneArgs_ = true;\n\t            state.doneExec_ = false;\n\t        };\n\t        this.setNativeFunctionPrototype(this.FUNCTION, 'call', wrapper);\n\t        wrapper = function (thisArg, var_args) {\n\t            // Clone function\n\t            var clone = thisInterpreter.createFunction(this.node, this.parentScope);\n\t            // Assign the 'this' object.\n\t            if (thisArg) {\n\t                clone.boundThis_ = thisArg;\n\t            }\n\t            // Bind any provided arguments.\n\t            clone.boundArgs_ = [];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                clone.boundArgs_.push(arguments[i]);\n\t            }\n\t            return clone;\n\t        };\n\t        this.setNativeFunctionPrototype(this.FUNCTION, 'bind', wrapper);\n\t        // Function has no parent to inherit from, so it needs its own mandatory\n\t        // toString and valueOf functions.\n\t        wrapper = function () {\n\t            return thisInterpreter.createPrimitive(this.toString());\n\t        };\n\t        this.setNativeFunctionPrototype(this.FUNCTION, 'toString', wrapper);\n\t        this.setProperty(this.FUNCTION, 'toString', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function () {\n\t            return thisInterpreter.createPrimitive(this.valueOf());\n\t        };\n\t        this.setNativeFunctionPrototype(this.FUNCTION, 'valueOf', wrapper);\n\t        this.setProperty(this.FUNCTION, 'valueOf', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the Object class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initObject = function (scope) {\n\t        var thisInterpreter = this;\n\t        var wrapper;\n\t        // Object constructor.\n\t        wrapper = function (value) {\n\t            if (!value || value == thisInterpreter.UNDEFINED ||\n\t                value == thisInterpreter.NULL) {\n\t                // Create a new object.\n\t                if (this.parent == thisInterpreter.OBJECT) {\n\t                    // Called with new.\n\t                    return this;\n\t                }\n\t                else {\n\t                    return thisInterpreter.createObject(thisInterpreter.OBJECT);\n\t                }\n\t            }\n\t            if (value.isPrimitive) {\n\t                // Wrap the value as an object.\n\t                var obj = thisInterpreter.createObject(value.parent);\n\t                obj.data = value.data;\n\t                return obj;\n\t            }\n\t            // Return the provided object.\n\t            return value;\n\t        };\n\t        this.OBJECT = this.createNativeFunction(wrapper);\n\t        this.setProperty(scope, 'Object', this.OBJECT);\n\t        // Static methods on Object.\n\t        wrapper = function (obj) {\n\t            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            var i = 0;\n\t            for (var key in obj.properties) {\n\t                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));\n\t                i++;\n\t            }\n\t            return pseudoList;\n\t        };\n\t        this.setProperty(this.OBJECT, 'getOwnPropertyNames', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (obj) {\n\t            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            var i = 0;\n\t            for (var key in obj.properties) {\n\t                if (obj.notEnumerable[key]) {\n\t                    continue;\n\t                }\n\t                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));\n\t                i++;\n\t            }\n\t            return pseudoList;\n\t        };\n\t        this.setProperty(this.OBJECT, 'keys', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (obj, prop, descriptor) {\n\t            prop = (prop || thisInterpreter.UNDEFINED).toString();\n\t            if (!(descriptor instanceof JsObject_1.default)) {\n\t                thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'Property description must be an object.');\n\t                return;\n\t            }\n\t            if (!obj.properties[prop] && obj.preventExtensions) {\n\t                thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'Can\\'t define property ' + prop + ', object is not extensible');\n\t                return;\n\t            }\n\t            var value = thisInterpreter.getProperty(descriptor, 'value');\n\t            if (value == thisInterpreter.UNDEFINED) {\n\t                value = null;\n\t            }\n\t            var get = thisInterpreter.getProperty(descriptor, 'get');\n\t            var set = thisInterpreter.getProperty(descriptor, 'set');\n\t            var nativeDescriptor = {\n\t                configurable: thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor, 'configurable')),\n\t                enumerable: thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor, 'enumerable')),\n\t                writable: thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor, 'writable')),\n\t                get: get == thisInterpreter.UNDEFINED ? undefined : get,\n\t                set: set == thisInterpreter.UNDEFINED ? undefined : set\n\t            };\n\t            thisInterpreter.setProperty(obj, prop, value, nativeDescriptor);\n\t            return obj;\n\t        };\n\t        this.setProperty(this.OBJECT, 'defineProperty', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        this.polyfills_.push(\"Object.defineProperty(Array.prototype, 'defineProperties', {configurable: true, value:\", \"function(obj, props) {\", \"var keys = Object.keys(props);\", \"for (var i = 0; i < keys.length; i++) {\", \"Object.defineProperty(obj, keys[i], props[keys[i]]);\", \"}\", \"return obj;\", \"}\", \"});\", \"\");\n\t        wrapper = function (obj, prop) {\n\t            prop = (prop || thisInterpreter.UNDEFINED).toString();\n\t            if (!(prop in obj.properties)) {\n\t                return thisInterpreter.UNDEFINED;\n\t            }\n\t            var configurable = !obj.notConfigurable[prop];\n\t            var enumerable = !obj.notEnumerable[prop];\n\t            var writable = !obj.notWritable[prop];\n\t            var getter = obj.getter[prop];\n\t            var setter = obj.setter[prop];\n\t            var descriptor = thisInterpreter.createObject(thisInterpreter.OBJECT);\n\t            thisInterpreter.setProperty(descriptor, 'configurable', thisInterpreter.createPrimitive(configurable));\n\t            thisInterpreter.setProperty(descriptor, 'enumerable', thisInterpreter.createPrimitive(enumerable));\n\t            if (getter || setter) {\n\t                thisInterpreter.setProperty(descriptor, 'getter', getter);\n\t                thisInterpreter.setProperty(descriptor, 'setter', setter);\n\t            }\n\t            else {\n\t                thisInterpreter.setProperty(descriptor, 'writable', thisInterpreter.createPrimitive(writable));\n\t                thisInterpreter.setProperty(descriptor, 'value', thisInterpreter.getProperty(obj, prop));\n\t            }\n\t            return descriptor;\n\t        };\n\t        this.setProperty(this.OBJECT, 'getOwnPropertyDescriptor', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (obj) {\n\t            if (obj.parent && obj.parent.properties &&\n\t                obj.parent.properties.prototype) {\n\t                return obj.parent.properties.prototype;\n\t            }\n\t            return thisInterpreter.NULL;\n\t        };\n\t        this.setProperty(this.OBJECT, 'getPrototypeOf', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (obj) {\n\t            return thisInterpreter.createPrimitive(!obj.preventExtensions);\n\t        };\n\t        this.setProperty(this.OBJECT, 'isExtensible', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (obj) {\n\t            if (!obj.isPrimitive) {\n\t                obj.preventExtensions = true;\n\t            }\n\t            return obj;\n\t        };\n\t        this.setProperty(this.OBJECT, 'preventExtensions', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        // Instance methods on Object.\n\t        wrapper = function () {\n\t            return thisInterpreter.createPrimitive(this.toString());\n\t        };\n\t        this.setNativeFunctionPrototype(this.OBJECT, 'toString', wrapper);\n\t        wrapper = function () {\n\t            return thisInterpreter.createPrimitive(this.toString());\n\t        };\n\t        this.setNativeFunctionPrototype(this.OBJECT, 'toLocaleString', wrapper);\n\t        wrapper = function () {\n\t            return thisInterpreter.createPrimitive(this.valueOf());\n\t        };\n\t        this.setNativeFunctionPrototype(this.OBJECT, 'valueOf', wrapper);\n\t        wrapper = function (prop) {\n\t            prop = (prop || thisInterpreter.UNDEFINED).toString();\n\t            return (prop in this.properties) ?\n\t                thisInterpreter.TRUE : thisInterpreter.FALSE;\n\t        };\n\t        this.setNativeFunctionPrototype(this.OBJECT, 'hasOwnProperty', wrapper);\n\t        wrapper = function (prop) {\n\t            prop = (prop || thisInterpreter.UNDEFINED).toString();\n\t            var enumerable = prop in this.properties && !this.notEnumerable[prop];\n\t            return thisInterpreter.createPrimitive(enumerable);\n\t        };\n\t        this.setNativeFunctionPrototype(this.OBJECT, 'propertyIsEnumerable', wrapper);\n\t        wrapper = function (obj) {\n\t            while (true) {\n\t                if (obj.parent && obj.parent.properties &&\n\t                    obj.parent.properties.prototype) {\n\t                    obj = obj.parent.properties.prototype;\n\t                    if (obj == this) {\n\t                        return thisInterpreter.createPrimitive(true);\n\t                    }\n\t                }\n\t                else {\n\t                    // No parent, reached the top.\n\t                    return thisInterpreter.createPrimitive(false);\n\t                }\n\t            }\n\t        };\n\t        this.setNativeFunctionPrototype(this.OBJECT, 'isPrototypeOf', wrapper);\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the Array class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initArray = function (scope) {\n\t        var thisInterpreter = this;\n\t        var getInt = function (obj, def) {\n\t            // Return an integer, or the default.\n\t            var n = obj ? Math.floor(obj.toNumber()) : def;\n\t            if (isNaN(n)) {\n\t                n = def;\n\t            }\n\t            return n;\n\t        };\n\t        var wrapper;\n\t        // Array constructor.\n\t        wrapper = function (var_args) {\n\t            var newArray;\n\t            if (this.parent == thisInterpreter.ARRAY) {\n\t                // Called with new.\n\t                newArray = this;\n\t            }\n\t            else {\n\t                newArray = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            }\n\t            var first = arguments[0];\n\t            if (first && first.type == 'number') {\n\t                if (isNaN(utils.arrayIndex(first))) {\n\t                    thisInterpreter.throwException(thisInterpreter.RANGE_ERROR, 'Invalid array length');\n\t                }\n\t                newArray.length = first.data;\n\t            }\n\t            else {\n\t                var i = void 0;\n\t                for (i = 0; i < arguments.length; i++) {\n\t                    newArray.properties[i] = arguments[i];\n\t                }\n\t                newArray.length = i;\n\t            }\n\t            return newArray;\n\t        };\n\t        this.ARRAY = this.createNativeFunction(wrapper);\n\t        this.setProperty(scope, 'Array', this.ARRAY);\n\t        // Static methods on Array.\n\t        wrapper = function (obj) {\n\t            return thisInterpreter.createPrimitive(utils.isa(obj, thisInterpreter.ARRAY));\n\t        };\n\t        this.setProperty(this.ARRAY, 'isArray', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        // Instance methods on Array.\n\t        wrapper = function () {\n\t            var value;\n\t            if (this.length) {\n\t                value = this.properties[this.length - 1];\n\t                delete this.properties[this.length - 1];\n\t                this.length--;\n\t            }\n\t            else {\n\t                value = thisInterpreter.UNDEFINED;\n\t            }\n\t            return value;\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'pop', wrapper);\n\t        wrapper = function (var_args) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.properties[this.length] = arguments[i];\n\t                this.length++;\n\t            }\n\t            return thisInterpreter.createPrimitive(this.length);\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'push', wrapper);\n\t        wrapper = function () {\n\t            var value;\n\t            if (this.length) {\n\t                value = this.properties[0];\n\t                for (var i = 1; i < this.length; i++) {\n\t                    this.properties[i - 1] = this.properties[i];\n\t                }\n\t                this.length--;\n\t                delete this.properties[this.length];\n\t            }\n\t            else {\n\t                value = thisInterpreter.UNDEFINED;\n\t            }\n\t            return value;\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'shift', wrapper);\n\t        wrapper = function (var_args) {\n\t            for (var i = this.length - 1; i >= 0; i--) {\n\t                this.properties[i + arguments.length] = this.properties[i];\n\t            }\n\t            this.length += arguments.length;\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.properties[i] = arguments[i];\n\t            }\n\t            return thisInterpreter.createPrimitive(this.length);\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'unshift', wrapper);\n\t        wrapper = function () {\n\t            for (var i = 0; i < this.length / 2; i++) {\n\t                var tmp = this.properties[this.length - i - 1];\n\t                this.properties[this.length - i - 1] = this.properties[i];\n\t                this.properties[i] = tmp;\n\t            }\n\t            return this;\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'reverse', wrapper);\n\t        wrapper = function (index, howmany, var_args) {\n\t            index = getInt(index, 0);\n\t            if (index < 0) {\n\t                index = Math.max(this.length + index, 0);\n\t            }\n\t            else {\n\t                index = Math.min(index, this.length);\n\t            }\n\t            howmany = getInt(howmany, Infinity);\n\t            howmany = Math.min(howmany, this.length - index);\n\t            var removed = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            // Remove specified elements.\n\t            for (var i = index; i < index + howmany; i++) {\n\t                removed.properties[removed.length++] = this.properties[i];\n\t                this.properties[i] = this.properties[i + howmany];\n\t            }\n\t            // Move other element to fill the gap.\n\t            for (var i = index + howmany; i < this.length - howmany; i++) {\n\t                this.properties[i] = this.properties[i + howmany];\n\t            }\n\t            // Delete superfluous properties.\n\t            for (var i = this.length - howmany; i < this.length; i++) {\n\t                delete this.properties[i];\n\t            }\n\t            this.length -= howmany;\n\t            // Insert specified items.\n\t            for (var i = this.length - 1; i >= index; i--) {\n\t                this.properties[i + arguments.length - 2] = this.properties[i];\n\t            }\n\t            this.length += arguments.length - 2;\n\t            for (var i = 2; i < arguments.length; i++) {\n\t                this.properties[index + i - 2] = arguments[i];\n\t            }\n\t            return removed;\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'splice', wrapper);\n\t        wrapper = function (opt_begin, opt_end) {\n\t            var list = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            var begin = getInt(opt_begin, 0);\n\t            if (begin < 0) {\n\t                begin = this.length + begin;\n\t            }\n\t            begin = Math.max(0, Math.min(begin, this.length));\n\t            var end = getInt(opt_end, this.length);\n\t            if (end < 0) {\n\t                end = this.length + end;\n\t            }\n\t            end = Math.max(0, Math.min(end, this.length));\n\t            var length = 0;\n\t            for (var i = begin; i < end; i++) {\n\t                var element = thisInterpreter.getProperty(this, i);\n\t                thisInterpreter.setProperty(list, length++, element);\n\t            }\n\t            return list;\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'slice', wrapper);\n\t        wrapper = function (opt_separator) {\n\t            var sep;\n\t            if (!opt_separator || opt_separator.data === undefined) {\n\t                sep = undefined;\n\t            }\n\t            else {\n\t                sep = opt_separator.toString();\n\t            }\n\t            var text = [];\n\t            for (var i = 0; i < this.length; i++) {\n\t                text[i] = this.properties[i];\n\t            }\n\t            return thisInterpreter.createPrimitive(text.join(sep));\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'join', wrapper);\n\t        wrapper = function (var_args) {\n\t            var list = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            var length = 0;\n\t            // Start by copying the current array.\n\t            for (var i = 0; i < this.length; i++) {\n\t                var element = thisInterpreter.getProperty(this, i);\n\t                thisInterpreter.setProperty(list, length++, element);\n\t            }\n\t            // Loop through all arguments and copy them in.\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                var value = arguments[i];\n\t                if (utils.isa(value, thisInterpreter.ARRAY)) {\n\t                    for (var j = 0; j < value.length; j++) {\n\t                        var element = thisInterpreter.getProperty(value, j);\n\t                        thisInterpreter.setProperty(list, length++, element);\n\t                    }\n\t                }\n\t                else {\n\t                    thisInterpreter.setProperty(list, length++, value);\n\t                }\n\t            }\n\t            return list;\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'concat', wrapper);\n\t        wrapper = function (searchElement, opt_fromIndex) {\n\t            searchElement = searchElement || thisInterpreter.UNDEFINED;\n\t            var fromIndex = getInt(opt_fromIndex, 0);\n\t            if (fromIndex < 0) {\n\t                fromIndex = this.length + fromIndex;\n\t            }\n\t            fromIndex = Math.max(0, fromIndex);\n\t            for (var i = fromIndex; i < this.length; i++) {\n\t                var element = thisInterpreter.getProperty(this, i);\n\t                if (utils.strictComp(element, searchElement)) {\n\t                    return thisInterpreter.createPrimitive(i);\n\t                }\n\t            }\n\t            return thisInterpreter.createPrimitive(-1);\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'indexOf', wrapper);\n\t        wrapper = function (searchElement, opt_fromIndex) {\n\t            searchElement = searchElement || thisInterpreter.UNDEFINED;\n\t            var fromIndex = getInt(opt_fromIndex, this.length);\n\t            if (fromIndex < 0) {\n\t                fromIndex = this.length + fromIndex;\n\t            }\n\t            fromIndex = Math.min(fromIndex, this.length - 1);\n\t            for (var i = fromIndex; i >= 0; i--) {\n\t                var element = thisInterpreter.getProperty(this, i);\n\t                if (utils.strictComp(element, searchElement)) {\n\t                    return thisInterpreter.createPrimitive(i);\n\t                }\n\t            }\n\t            return thisInterpreter.createPrimitive(-1);\n\t        };\n\t        this.setNativeFunctionPrototype(this.ARRAY, 'lastIndexOf', wrapper);\n\t        this.polyfills_.push(\n\t        // Polyfill copied from:\n\t        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n\t        \"Object.defineProperty(Array.prototype, 'every', {configurable: true, value:\", \"function(callbackfn, thisArg) {\", \"if (this == null || typeof callbackfn !== 'function') throw new TypeError;\", \"var T, k;\", \"var O = Object(this);\", \"var len = O.length >>> 0;\", \"if (arguments.length > 1) T = thisArg;\", \"k = 0;\", \"while (k < len) {\", \"if (k in O && !callbackfn.call(T, O[k], k, O)) return false;\", \"k++;\", \"}\", \"return true;\", \"}\", \"});\", \n\t        // Polyfill copied from:\n\t        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n\t        \"Object.defineProperty(Array.prototype, 'filter', {configurable: true, value:\", \"function(fun/*, thisArg*/) {\", \"if (this === void 0 || this === null || typeof fun !== 'function') throw new TypeError;\", \"var t = Object(this);\", \"var len = t.length >>> 0;\", \"var res = [];\", \"var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\", \"for (var i = 0; i < len; i++) {\", \"if (i in t) {\", \"var val = t[i];\", \"if (fun.call(thisArg, val, i, t)) res.push(val);\", \"}\", \"}\", \"return res;\", \"}\", \"});\", \n\t        // Polyfill copied from:\n\t        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n\t        \"Object.defineProperty(Array.prototype, 'forEach', {configurable: true, value:\", \"function(callback, thisArg) {\", \"if (this == null || typeof callback !== 'function') throw new TypeError;\", \"var T, k;\", \"var O = Object(this);\", \"var len = O.length >>> 0;\", \"if (arguments.length > 1) T = thisArg;\", \"k = 0;\", \"while (k < len) {\", \"if (k in O) callback.call(T, O[k], k, O);\", \"k++;\", \"}\", \"}\", \"});\", \n\t        // Polyfill copied from:\n\t        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\t        \"Object.defineProperty(Array.prototype, 'map', {configurable: true, value:\", \"function(callback, thisArg) {\", \"if (this == null || typeof callback !== 'function') new TypeError;\", \"var T, A, k;\", \"var O = Object(this);\", \"var len = O.length >>> 0;\", \"if (arguments.length > 1) T = thisArg;\", \"A = new Array(len);\", \"k = 0;\", \"while (k < len) {\", \"if (k in O) A[k] = callback.call(T, O[k], k, O);\", \"k++;\", \"}\", \"return A;\", \"}\", \"});\", \n\t        // Polyfill copied from:\n\t        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n\t        \"Object.defineProperty(Array.prototype, 'reduce', {configurable: true, value:\", \"function(callback /*, initialValue*/) {\", \"if (this == null || typeof callback !== 'function') throw new TypeError;\", \"var t = Object(this), len = t.length >>> 0, k = 0, value;\", \"if (arguments.length == 2) {\", \"value = arguments[1];\", \"} else {\", \"while (k < len && !(k in t)) k++;\", \"if (k >= len) {\", \"throw new TypeError('Reduce of empty array with no initial value');\", \"}\", \"value = t[k++];\", \"}\", \"for (; k < len; k++) {\", \"if (k in t) value = callback(value, t[k], k, t);\", \"}\", \"return value;\", \"}\", \"});\", \n\t        // Polyfill copied from:\n\t        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\n\t        \"Object.defineProperty(Array.prototype, 'reduceRight', {configurable: true, value:\", \"function(callback /*, initialValue*/) {\", \"if (null === this || 'undefined' === typeof this || 'function' !== typeof callback) throw new TypeError;\", \"var t = Object(this), len = t.length >>> 0, k = len - 1, value;\", \"if (arguments.length >= 2) {\", \"value = arguments[1];\", \"} else {\", \"while (k >= 0 && !(k in t)) k--;\", \"if (k < 0) {\", \"throw new TypeError('Reduce of empty array with no initial value');\", \"}\", \"value = t[k--];\", \"}\", \"for (; k >= 0; k--) {\", \"if (k in t) value = callback(value, t[k], k, t);\", \"}\", \"return value;\", \"}\", \"});\", \n\t        // Polyfill copied from:\n\t        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n\t        \"Object.defineProperty(Array.prototype, 'some', {configurable: true, value:\", \"function(fun/*, thisArg*/) {\", \"if (this == null || typeof fun !== 'function') throw new TypeError;\", \"var t = Object(this);\", \"var len = t.length >>> 0;\", \"var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\", \"for (var i = 0; i < len; i++) {\", \"if (i in t && fun.call(thisArg, t[i], i, t)) {\", \"return true;\", \"}\", \"}\", \"return false;\", \"}\", \"});\", \"Object.defineProperty(Array.prototype, 'sort', {configurable: true, value:\", \"function(opt_comp) {\", \"for (var i = 0; i < this.length; i++) {\", \"var changes = 0;\", \"for (var j = 0; j < this.length - i - 1; j++) {\", \"if (opt_comp ?\" +\n\t            \"opt_comp(this[j], this[j + 1]) > 0 : this[j] > this[j + 1]) {\", \"var swap = this[j];\", \"this[j] = this[j + 1];\", \"this[j + 1] = swap;\", \"changes++;\", \"}\", \"}\", \"if (changes <= 1) break;\", \"}\", \"return this;\", \"}\", \"});\", \"Object.defineProperty(Array.prototype, 'toLocaleString', {configurable: true, value:\", \"function() {\", \"var out = [];\", \"for (var i = 0; i < this.length; i++) {\", \"out[i] = (this[i] === null || this[i] === undefined) ? '' : this[i].toLocaleString();\", \"}\", \"return out.join(',');\", \"}\", \"});\", \"\");\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the Number class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initNumber = function (scope) {\n\t        var thisInterpreter = this;\n\t        var wrapper;\n\t        // Number constructor.\n\t        wrapper = function (value) {\n\t            value = value ? value.toNumber() : 0;\n\t            if (this.parent != thisInterpreter.NUMBER) {\n\t                // Called as Number().\n\t                return thisInterpreter.createPrimitive(value);\n\t            }\n\t            // Called as new Number().\n\t            this.data = value;\n\t            return this;\n\t        };\n\t        this.NUMBER = this.createNativeFunction(wrapper);\n\t        this.setProperty(scope, 'Number', this.NUMBER);\n\t        this.setProperty(this.NUMBER, 'MAX_VALUE', this.createPrimitive(Number.MAX_VALUE));\n\t        this.setProperty(this.NUMBER, 'MIN_VALUE', this.createPrimitive(Number.MIN_VALUE));\n\t        this.setProperty(this.NUMBER, 'NaN', this.createPrimitive(Number.NaN));\n\t        this.setProperty(this.NUMBER, 'NEGATIVE_INFINITY', this.createPrimitive(Number.NEGATIVE_INFINITY));\n\t        this.setProperty(this.NUMBER, 'POSITIVE_INFINITY', this.createPrimitive(Number.POSITIVE_INFINITY));\n\t        // Static methods on Number.\n\t        wrapper = function (str) {\n\t            str = str || thisInterpreter.UNDEFINED;\n\t            return thisInterpreter.createPrimitive(parseFloat(str.toString()));\n\t        };\n\t        this.setProperty(this.NUMBER, 'parseFloat', this.createNativeFunction(wrapper));\n\t        wrapper = function (str, radix) {\n\t            str = str || thisInterpreter.UNDEFINED;\n\t            radix = radix || thisInterpreter.UNDEFINED;\n\t            return thisInterpreter.createPrimitive(parseInt(str.toString(), radix.toNumber()));\n\t        };\n\t        this.setProperty(this.NUMBER, 'parseInt', this.createNativeFunction(wrapper));\n\t        // Instance methods on Number.\n\t        wrapper = function (fractionDigits) {\n\t            fractionDigits = fractionDigits ? fractionDigits.toNumber() : undefined;\n\t            var n = this.toNumber();\n\t            return thisInterpreter.createPrimitive(n.toExponential(fractionDigits));\n\t        };\n\t        this.setNativeFunctionPrototype(this.NUMBER, 'toExponential', wrapper);\n\t        wrapper = function (digits) {\n\t            digits = digits ? digits.toNumber() : undefined;\n\t            var n = this.toNumber();\n\t            return thisInterpreter.createPrimitive(n.toFixed(digits));\n\t        };\n\t        this.setNativeFunctionPrototype(this.NUMBER, 'toFixed', wrapper);\n\t        wrapper = function (precision) {\n\t            precision = precision ? precision.toNumber() : undefined;\n\t            var n = this.toNumber();\n\t            return thisInterpreter.createPrimitive(n.toPrecision(precision));\n\t        };\n\t        this.setNativeFunctionPrototype(this.NUMBER, 'toPrecision', wrapper);\n\t        wrapper = function (radix) {\n\t            radix = radix ? radix.toNumber() : 10;\n\t            var n = this.toNumber();\n\t            return thisInterpreter.createPrimitive(n.toString(radix));\n\t        };\n\t        this.setNativeFunctionPrototype(this.NUMBER, 'toString', wrapper);\n\t        wrapper = function (locales, options) {\n\t            locales = locales ? thisInterpreter.pseudoToNative(locales) : undefined;\n\t            options = options ? thisInterpreter.pseudoToNative(options) : undefined;\n\t            return thisInterpreter.createPrimitive(this.toNumber().toLocaleString(locales, options));\n\t        };\n\t        this.setNativeFunctionPrototype(this.NUMBER, 'toLocaleString', wrapper);\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the String class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initString = function (scope) {\n\t        var thisInterpreter = this;\n\t        var wrapper;\n\t        // String constructor.\n\t        wrapper = function (value) {\n\t            value = value ? value.toString() : '';\n\t            if (this.parent != thisInterpreter.STRING) {\n\t                // Called as String().\n\t                return thisInterpreter.createPrimitive(value);\n\t            }\n\t            // Called as new String().\n\t            this.data = value;\n\t            return this;\n\t        };\n\t        this.STRING = this.createNativeFunction(wrapper);\n\t        this.setProperty(scope, 'String', this.STRING);\n\t        // Static methods on String.\n\t        wrapper = function (var_args) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                arguments[i] = arguments[i].toNumber();\n\t            }\n\t            return thisInterpreter.createPrimitive(String.fromCharCode.apply(String, arguments));\n\t        };\n\t        this.setProperty(this.STRING, 'fromCharCode', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        // Instance methods on String.\n\t        // Methods with no arguments.\n\t        var functions = ['toLowerCase', 'toUpperCase',\n\t            'toLocaleLowerCase', 'toLocaleUpperCase'];\n\t        for (var i = 0; i < functions.length; i++) {\n\t            wrapper = (function (nativeFunc) {\n\t                return function () {\n\t                    return thisInterpreter.createPrimitive(nativeFunc.apply(this));\n\t                };\n\t            })(String.prototype[functions[i]]);\n\t            this.setNativeFunctionPrototype(this.STRING, functions[i], wrapper);\n\t        }\n\t        // Trim function may not exist in host browser.  Write them from scratch.\n\t        wrapper = function () {\n\t            var str = this.toString();\n\t            return thisInterpreter.createPrimitive(str.replace(/^\\s+|\\s+$/g, ''));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'trim', wrapper);\n\t        wrapper = function () {\n\t            var str = this.toString();\n\t            return thisInterpreter.createPrimitive(str.replace(/^\\s+/g, ''));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'trimLeft', wrapper);\n\t        wrapper = function () {\n\t            var str = this.toString();\n\t            return thisInterpreter.createPrimitive(str.replace(/\\s+$/g, ''));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'trimRight', wrapper);\n\t        // Methods with only numeric arguments.\n\t        functions = ['charAt', 'charCodeAt', 'substring', 'slice', 'substr'];\n\t        for (var i = 0; i < functions.length; i++) {\n\t            wrapper = (function (nativeFunc) {\n\t                return function () {\n\t                    for (var j = 0; j < arguments.length; j++) {\n\t                        arguments[j] = arguments[j].toNumber();\n\t                    }\n\t                    return thisInterpreter.createPrimitive(nativeFunc.apply(this, arguments));\n\t                };\n\t            })(String.prototype[functions[i]]);\n\t            this.setNativeFunctionPrototype(this.STRING, functions[i], wrapper);\n\t        }\n\t        wrapper = function (searchValue, fromIndex) {\n\t            var str = this.toString();\n\t            searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();\n\t            fromIndex = fromIndex ? fromIndex.toNumber() : undefined;\n\t            return thisInterpreter.createPrimitive(str.indexOf(searchValue, fromIndex));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'indexOf', wrapper);\n\t        wrapper = function (searchValue, fromIndex) {\n\t            var str = this.toString();\n\t            searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();\n\t            fromIndex = fromIndex ? fromIndex.toNumber() : undefined;\n\t            return thisInterpreter.createPrimitive(str.lastIndexOf(searchValue, fromIndex));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'lastIndexOf', wrapper);\n\t        wrapper = function (compareString, locales, options) {\n\t            compareString = (compareString || thisInterpreter.UNDEFINED).toString();\n\t            locales = locales ? thisInterpreter.pseudoToNative(locales) : undefined;\n\t            options = options ? thisInterpreter.pseudoToNative(options) : undefined;\n\t            return thisInterpreter.createPrimitive(this.toString().localeCompare(compareString, locales, options));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'localeCompare', wrapper);\n\t        wrapper = function (separator, limit) {\n\t            var str = this.toString();\n\t            if (separator) {\n\t                separator = utils.isa(separator, thisInterpreter.REGEXP) ?\n\t                    separator.data : separator.toString();\n\t            }\n\t            else {\n\t                separator = undefined;\n\t            }\n\t            limit = limit ? limit.toNumber() : undefined;\n\t            var jsList = str.split(separator, limit);\n\t            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            for (var i = 0; i < jsList.length; i++) {\n\t                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(jsList[i]));\n\t            }\n\t            return pseudoList;\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'split', wrapper);\n\t        wrapper = function (var_args) {\n\t            var str = this.toString();\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                str += arguments[i].toString();\n\t            }\n\t            return thisInterpreter.createPrimitive(str);\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'concat', wrapper);\n\t        wrapper = function (regexp) {\n\t            var str = this.toString();\n\t            regexp = regexp ? regexp.data : undefined;\n\t            var match = str.match(regexp);\n\t            if (match === null) {\n\t                return thisInterpreter.NULL;\n\t            }\n\t            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t            for (var i = 0; i < match.length; i++) {\n\t                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(match[i]));\n\t            }\n\t            return pseudoList;\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'match', wrapper);\n\t        wrapper = function (regexp) {\n\t            var str = this.toString();\n\t            regexp = regexp ? regexp.data : undefined;\n\t            return thisInterpreter.createPrimitive(str.search(regexp));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'search', wrapper);\n\t        wrapper = function (substr, newSubStr) {\n\t            var str = this.toString();\n\t            substr = (substr || thisInterpreter.UNDEFINED).valueOf();\n\t            newSubStr = (newSubStr || thisInterpreter.UNDEFINED).toString();\n\t            return thisInterpreter.createPrimitive(str.replace(substr, newSubStr));\n\t        };\n\t        this.setNativeFunctionPrototype(this.STRING, 'replace', wrapper);\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the Boolean class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initBoolean = function (scope) {\n\t        var thisInterpreter = this;\n\t        var wrapper;\n\t        // Boolean constructor.\n\t        wrapper = function (value) {\n\t            value = value ? value.toBoolean() : false;\n\t            if (this.parent != thisInterpreter.BOOLEAN) {\n\t                // Called as Boolean().\n\t                return thisInterpreter.createPrimitive(value);\n\t            }\n\t            // Called as new Boolean().\n\t            this.data = value;\n\t            return this;\n\t        };\n\t        this.BOOLEAN = this.createNativeFunction(wrapper);\n\t        this.setProperty(scope, 'Boolean', this.BOOLEAN);\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the Date class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initDate = function (scope) {\n\t        var thisInterpreter = this;\n\t        var wrapper;\n\t        // Date constructor.\n\t        wrapper = function (a, b, c, d, e, f, h) {\n\t            var newDate;\n\t            if (this.parent == thisInterpreter.DATE) {\n\t                // Called with new.\n\t                newDate = this;\n\t            }\n\t            else {\n\t                // Calling Date() as a function returns a string, no arguments are heeded.\n\t                return thisInterpreter.createPrimitive(Date());\n\t            }\n\t            if (!arguments.length) {\n\t                newDate.data = new Date();\n\t            }\n\t            else if (arguments.length == 1 && (a.type == 'string' ||\n\t                utils.isa(a, thisInterpreter.STRING))) {\n\t                newDate.data = new Date(a.toString());\n\t            }\n\t            else {\n\t                var args = [null];\n\t                for (var i = 0; i < arguments.length; i++) {\n\t                    args[i + 1] = arguments[i] ? arguments[i].toNumber() : undefined;\n\t                }\n\t                newDate.data = new (Function.prototype.bind.apply(Date, args));\n\t            }\n\t            return newDate;\n\t        };\n\t        this.DATE = this.createNativeFunction(wrapper);\n\t        this.setProperty(scope, 'Date', this.DATE);\n\t        // Static methods on Date.\n\t        wrapper = function () {\n\t            return thisInterpreter.createPrimitive(new Date().getTime());\n\t        };\n\t        this.setProperty(this.DATE, 'now', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (dateString) {\n\t            dateString = dateString ? dateString.toString() : undefined;\n\t            return thisInterpreter.createPrimitive(Date.parse(dateString));\n\t        };\n\t        this.setProperty(this.DATE, 'parse', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (a, b, c, d, e, f, h) {\n\t            var args = [];\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                args[i] = arguments[i] ? arguments[i].toNumber() : undefined;\n\t            }\n\t            return thisInterpreter.createPrimitive(Date.UTC.apply(Date, args));\n\t        };\n\t        this.setProperty(this.DATE, 'UTC', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        // Instance methods on Date.\n\t        var functions = ['getDate', 'getDay', 'getFullYear', 'getHours',\n\t            'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds', 'getTime',\n\t            'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear',\n\t            'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCMonth',\n\t            'getUTCSeconds', 'getYear',\n\t            'setDate', 'setFullYear', 'setHours', 'setMilliseconds',\n\t            'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate',\n\t            'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes',\n\t            'setUTCMonth', 'setUTCSeconds', 'setYear',\n\t            'toDateString', 'toISOString', 'toJSON', 'toGMTString',\n\t            'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString',\n\t            'toTimeString', 'toUTCString'];\n\t        for (var i = 0; i < functions.length; i++) {\n\t            wrapper = (function (nativeFunc) {\n\t                return function (var_args) {\n\t                    var args = [];\n\t                    for (var i_1 = 0; i_1 < arguments.length; i_1++) {\n\t                        args[i_1] = thisInterpreter.pseudoToNative(arguments[i_1]);\n\t                    }\n\t                    return thisInterpreter.createPrimitive(this.data[nativeFunc].apply(this.data, args));\n\t                };\n\t            })(functions[i]);\n\t            this.setNativeFunctionPrototype(this.DATE, functions[i], wrapper);\n\t        }\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize Math object.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initMath = function (scope) {\n\t        var thisInterpreter = this;\n\t        var myMath = this.createObject(this.OBJECT);\n\t        this.setProperty(scope, 'Math', myMath);\n\t        this.setProperty(myMath, 'E', this.createPrimitive(Math.E), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(myMath, 'LN2', this.createPrimitive(Math.LN2), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(myMath, 'LN10', this.createPrimitive(Math.LN10), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(myMath, 'LOG2E', this.createPrimitive(Math.LOG2E), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(myMath, 'LOG10E', this.createPrimitive(Math.LOG10E), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(myMath, 'PI', this.createPrimitive(Math.PI), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(myMath, 'SQRT1_2', this.createPrimitive(Math.SQRT1_2), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(myMath, 'SQRT2', this.createPrimitive(Math.SQRT2), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        var numFunctions = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos',\n\t            'exp', 'floor', 'log', 'max', 'min', 'pow', 'random',\n\t            'round', 'sin', 'sqrt', 'tan'];\n\t        for (var i = 0; i < numFunctions.length; i++) {\n\t            var wrapper = (function (nativeFunc) {\n\t                return function () {\n\t                    for (var j = 0; j < arguments.length; j++) {\n\t                        arguments[j] = arguments[j].toNumber();\n\t                    }\n\t                    return thisInterpreter.createPrimitive(nativeFunc.apply(Math, arguments));\n\t                };\n\t            })(Math[numFunctions[i]]);\n\t            this.setProperty(myMath, numFunctions[i], this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t        }\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize Regular Expression object.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initRegExp = function (scope) {\n\t        var thisInterpreter = this;\n\t        var wrapper;\n\t        // Regex constructor.\n\t        wrapper = function (pattern, flags) {\n\t            var rgx;\n\t            if (this.parent == thisInterpreter.REGEXP) {\n\t                // Called with new.\n\t                rgx = this;\n\t            }\n\t            else {\n\t                rgx = thisInterpreter.createObject(thisInterpreter.REGEXP);\n\t            }\n\t            pattern = pattern ? pattern.toString() : '';\n\t            flags = flags ? flags.toString() : '';\n\t            return thisInterpreter.populateRegExp_(rgx, new RegExp(pattern, flags));\n\t        };\n\t        this.REGEXP = this.createNativeFunction(wrapper);\n\t        this.setProperty(scope, 'RegExp', this.REGEXP);\n\t        this.setProperty(this.REGEXP.properties.prototype, 'global', this.UNDEFINED, READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(this.REGEXP.properties.prototype, 'ignoreCase', this.UNDEFINED, READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(this.REGEXP.properties.prototype, 'multiline', this.UNDEFINED, READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(this.REGEXP.properties.prototype, 'source', this.createPrimitive('(?:)'), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        wrapper = function (str) {\n\t            str = str.toString();\n\t            return thisInterpreter.createPrimitive(this.data.test(str));\n\t        };\n\t        this.setNativeFunctionPrototype(this.REGEXP, 'test', wrapper);\n\t        wrapper = function (str) {\n\t            str = str.toString();\n\t            // Get lastIndex from wrapped regex, since this is settable.\n\t            this.data.lastIndex =\n\t                thisInterpreter.getProperty(this, 'lastIndex').toNumber();\n\t            var match = this.data.exec(str);\n\t            thisInterpreter.setProperty(this, 'lastIndex', thisInterpreter.createPrimitive(this.data.lastIndex));\n\t            if (match) {\n\t                var result = thisInterpreter.createObject(thisInterpreter.ARRAY);\n\t                for (var i = 0; i < match.length; i++) {\n\t                    thisInterpreter.setProperty(result, i, thisInterpreter.createPrimitive(match[i]));\n\t                }\n\t                // match has additional properties.\n\t                thisInterpreter.setProperty(result, 'index', thisInterpreter.createPrimitive(match.index));\n\t                thisInterpreter.setProperty(result, 'input', thisInterpreter.createPrimitive(match.input));\n\t                return result;\n\t            }\n\t            return thisInterpreter.NULL;\n\t        };\n\t        this.setNativeFunctionPrototype(this.REGEXP, 'exec', wrapper);\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize JSON object.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initJSON = function (scope) {\n\t        var _this = this;\n\t        var myJSON = this.createObject(this.OBJECT);\n\t        this.setProperty(scope, 'JSON', myJSON);\n\t        this.setProperty(myJSON, 'parse', this.createNativeFunction(function (text) {\n\t            var nativeObj = JSON.parse(text.toString());\n\t            return _this.nativeToPseudo(nativeObj);\n\t        }));\n\t        this.setProperty(myJSON, 'stringify', this.createNativeFunction(function (value) {\n\t            var nativeObj = _this.pseudoToNative(value);\n\t            return _this.createPrimitive(JSON.stringify(nativeObj));\n\t        }));\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize the Error class.\n\t     * @param {!JsObject} scope Global scope.\n\t     */\n\t    Interpreter.prototype.initError = function (scope) {\n\t        var thisInterpreter = this;\n\t        // Error constructor.\n\t        this.ERROR = this.createNativeFunction(function (opt_message) {\n\t            var newError;\n\t            if (this.parent == thisInterpreter.ERROR) {\n\t                // Called with new.\n\t                newError = this;\n\t            }\n\t            else {\n\t                newError = thisInterpreter.createObject(thisInterpreter.ERROR);\n\t            }\n\t            if (opt_message) {\n\t                thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), NONENUMERABLE_DESCRIPTOR);\n\t            }\n\t            return newError;\n\t        });\n\t        this.setProperty(scope, 'Error', this.ERROR);\n\t        this.setProperty(this.ERROR.properties.prototype, 'message', this.STRING_EMPTY, NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(this.ERROR.properties.prototype, 'name', this.createPrimitive('Error'), NONENUMERABLE_DESCRIPTOR);\n\t        var createErrorSubclass = function (name) {\n\t            var constructor = thisInterpreter.createNativeFunction(function (opt_message) {\n\t                var newError;\n\t                if (utils.isa(this.parent, thisInterpreter.ERROR)) {\n\t                    // Called with new.\n\t                    newError = this;\n\t                }\n\t                else {\n\t                    newError = thisInterpreter.createObject(constructor);\n\t                }\n\t                if (opt_message) {\n\t                    thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), NONENUMERABLE_DESCRIPTOR);\n\t                }\n\t                return newError;\n\t            });\n\t            thisInterpreter.setProperty(constructor, 'prototype', thisInterpreter.createObject(thisInterpreter.ERROR));\n\t            thisInterpreter.setProperty(constructor.properties.prototype, 'name', thisInterpreter.createPrimitive(name), NONENUMERABLE_DESCRIPTOR);\n\t            thisInterpreter.setProperty(scope, name, constructor);\n\t            return constructor;\n\t        };\n\t        this.EVAL_ERROR = createErrorSubclass('EvalError');\n\t        this.RANGE_ERROR = createErrorSubclass('RangeError');\n\t        this.REFERENCE_ERROR = createErrorSubclass('ReferenceError');\n\t        this.SYNTAX_ERROR = createErrorSubclass('SyntaxError');\n\t        this.TYPE_ERROR = createErrorSubclass('TypeError');\n\t        this.URI_ERROR = createErrorSubclass('URIError');\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new data object for a primitive.\n\t     * @param {number|string|boolean|null|undefined|RegExp} data Data to\n\t     *     encapsulate.\n\t     * @return {!Primitive|!JsObject} New data object.\n\t     */\n\t    Interpreter.prototype.createPrimitive = function (data) {\n\t        // Reuse a predefined primitive constant if possible.\n\t        if (data === undefined) {\n\t            return this.UNDEFINED;\n\t        }\n\t        else if (data === null) {\n\t            return this.NULL;\n\t        }\n\t        else if (data === true) {\n\t            return this.TRUE;\n\t        }\n\t        else if (data === false) {\n\t            return this.FALSE;\n\t        }\n\t        else if (data === 0) {\n\t            return this.NUMBER_ZERO;\n\t        }\n\t        else if (data === 1) {\n\t            return this.NUMBER_ONE;\n\t        }\n\t        else if (data === '') {\n\t            return this.STRING_EMPTY;\n\t        }\n\t        else if (data instanceof RegExp) {\n\t            return this.populateRegExp_(this.createObject(this.REGEXP), data);\n\t        }\n\t        return new Primitive_1.default(data, this);\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new data object.\n\t     * @param {JsObject} parent Parent constructor function.\n\t     * @return {!JsObject} New data object.\n\t     */\n\t    Interpreter.prototype.createObject = function (parent) {\n\t        var obj = new JsObject_1.default(parent);\n\t        // Functions have prototype objects.\n\t        if (utils.isa(obj, this.FUNCTION)) {\n\t            obj.type = 'function';\n\t            this.setProperty(obj, 'prototype', this.createObject(this.OBJECT || null));\n\t        }\n\t        // Arrays have length.\n\t        if (utils.isa(obj, this.ARRAY)) {\n\t            obj.length = 0;\n\t            obj.toString = function () {\n\t                var strs = [];\n\t                for (var i = 0; i < this.length; i++) {\n\t                    var value = this.properties[i];\n\t                    strs[i] = (!value || (value.isPrimitive && (value.data === null ||\n\t                        value.data === undefined))) ? '' : value.toString();\n\t                }\n\t                return strs.join(',');\n\t            };\n\t        }\n\t        return obj;\n\t    };\n\t    ;\n\t    /**\n\t     * Initialize a pseudo regular expression object based on a native regular\n\t     * expression object.\n\t     * @param {!JsObject} pseudoRegexp The existing object to set.\n\t     * @param {!RegExp} nativeRegexp The native regular expression.\n\t     * @return {!JsObject} Newly populated regular expression object.\n\t     * @private\n\t     */\n\t    Interpreter.prototype.populateRegExp_ = function (pseudoRegexp, nativeRegexp) {\n\t        pseudoRegexp.data = nativeRegexp;\n\t        // lastIndex is settable, all others are read-only attributes\n\t        this.setProperty(pseudoRegexp, 'lastIndex', this.createPrimitive(nativeRegexp.lastIndex), NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(pseudoRegexp, 'source', this.createPrimitive(nativeRegexp.source), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(pseudoRegexp, 'global', this.createPrimitive(nativeRegexp.global), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(pseudoRegexp, 'ignoreCase', this.createPrimitive(nativeRegexp.ignoreCase), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        this.setProperty(pseudoRegexp, 'multiline', this.createPrimitive(nativeRegexp.multiline), READONLY_NONENUMERABLE_DESCRIPTOR);\n\t        // Override a couple of Object's conversion functions.\n\t        pseudoRegexp.toString = function () { return String(this.data); };\n\t        pseudoRegexp.valueOf = function () { return this.data; };\n\t        return pseudoRegexp;\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new function.\n\t     * @param {Object} node AST node defining the function.\n\t     * @param {Object=} opt_scope Optional parent scope.\n\t     * @return {!JsObject} New function.\n\t     */\n\t    Interpreter.prototype.createFunction = function (node, opt_scope) {\n\t        var func = this.createObject(this.FUNCTION);\n\t        func.parentScope = opt_scope || this.getScope();\n\t        func.node = node;\n\t        this.setProperty(func, 'length', this.createPrimitive(func.node.params.length), READONLY_DESCRIPTOR);\n\t        return func;\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new native function.\n\t     * @param {!Function} nativeFunc JavaScript function.\n\t     * @return {!JsObject} New function.\n\t     */\n\t    Interpreter.prototype.createNativeFunction = function (nativeFunc) {\n\t        var func = this.createObject(this.FUNCTION);\n\t        func.nativeFunc = nativeFunc;\n\t        this.setProperty(func, 'length', this.createPrimitive(nativeFunc.length), READONLY_DESCRIPTOR);\n\t        return func;\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new native asynchronous function.\n\t     * @param {!Function} asyncFunc JavaScript function.\n\t     * @return {!JsObject} New function.\n\t     */\n\t    Interpreter.prototype.createAsyncFunction = function (asyncFunc) {\n\t        var func = this.createObject(this.FUNCTION);\n\t        func.asyncFunc = asyncFunc;\n\t        this.setProperty(func, 'length', this.createPrimitive(asyncFunc.length), READONLY_DESCRIPTOR);\n\t        return func;\n\t    };\n\t    ;\n\t    /**\n\t     * Converts from a native JS object or value to a JS interpreter object.\n\t     * Can handle JSON-style values.\n\t     * @param {*} nativeObj The native JS object to be converted.\n\t     * @return {!JsObject|!Primitive} The equivalent\n\t     *     JS interpreter object.\n\t     */\n\t    Interpreter.prototype.nativeToPseudo = function (nativeObj) {\n\t        if (typeof nativeObj == 'boolean' ||\n\t            typeof nativeObj == 'number' ||\n\t            typeof nativeObj == 'string' ||\n\t            nativeObj === null || nativeObj === undefined ||\n\t            nativeObj instanceof RegExp) {\n\t            return this.createPrimitive(nativeObj);\n\t        }\n\t        var pseudoObj;\n\t        if (nativeObj instanceof Array) {\n\t            pseudoObj = this.createObject(this.ARRAY);\n\t            for (var i = 0; i < nativeObj.length; i++) {\n\t                this.setProperty(pseudoObj, i, this.nativeToPseudo(nativeObj[i]));\n\t            }\n\t        }\n\t        else {\n\t            pseudoObj = this.createObject(this.OBJECT);\n\t            for (var key in nativeObj) {\n\t                this.setProperty(pseudoObj, key, this.nativeToPseudo(nativeObj[key]));\n\t            }\n\t        }\n\t        return pseudoObj;\n\t    };\n\t    ;\n\t    /**\n\t     * Converts from a JS interpreter object to native JS object.\n\t     * Can handle JSON-style values.\n\t     * @param {!JsObject|!Primitive} pseudoObj The JS\n\t     *     interpreter object to be converted.\n\t     * @return {*} The equivalent native JS object or value.\n\t     */\n\t    Interpreter.prototype.pseudoToNative = function (pseudoObj) {\n\t        if (pseudoObj.isPrimitive ||\n\t            utils.isa(pseudoObj, this.NUMBER) ||\n\t            utils.isa(pseudoObj, this.STRING) ||\n\t            utils.isa(pseudoObj, this.BOOLEAN)) {\n\t            return pseudoObj.data;\n\t        }\n\t        var nativeObj;\n\t        if (utils.isa(pseudoObj, this.ARRAY)) {\n\t            nativeObj = [];\n\t            for (var i = 0; i < pseudoObj.length; i++) {\n\t                nativeObj[i] = this.pseudoToNative(pseudoObj.properties[i]);\n\t            }\n\t        }\n\t        else {\n\t            nativeObj = {};\n\t            for (var key in pseudoObj.properties) {\n\t                nativeObj[key] = this.pseudoToNative(pseudoObj.properties[key]);\n\t            }\n\t        }\n\t        return nativeObj;\n\t    };\n\t    ;\n\t    /**\n\t     * Fetch a property value from a data object.\n\t     * @param {!JsObject|!Primitive} obj Data object.\n\t     * @param {*} name Name of property.\n\t     * @return {!JsObject|!Primitive|null} Property value\n\t     *     (may be UNDEFINED), or null if an error was thrown and will be caught.\n\t     */\n\t    Interpreter.prototype.getProperty = function (obj, name) {\n\t        name = name.toString();\n\t        if (obj == this.UNDEFINED || obj == this.NULL) {\n\t            this.throwException(this.TYPE_ERROR, \"Cannot read property '\" + name + \"' of \" + obj);\n\t            return null;\n\t        }\n\t        // Special cases for magic length property.\n\t        if (utils.isa(obj, this.STRING)) {\n\t            if (name == 'length') {\n\t                return this.createPrimitive(obj.data.length);\n\t            }\n\t            var n = utils.arrayIndex(name);\n\t            if (!isNaN(n) && n < obj.data.length) {\n\t                return this.createPrimitive(obj.data[n]);\n\t            }\n\t        }\n\t        else if (utils.isa(obj, this.ARRAY) && name == 'length') {\n\t            return this.createPrimitive(obj.length);\n\t        }\n\t        while (true) {\n\t            if (obj.properties && name in obj.properties) {\n\t                var getter = obj.getter[name];\n\t                if (getter) {\n\t                    // Flag this function as being a getter and thus needing immediate\n\t                    // execution (rather than being the value of the property).\n\t                    getter.isGetter = true;\n\t                    return getter;\n\t                }\n\t                return obj.properties[name];\n\t            }\n\t            if (obj.parent && obj.parent.properties &&\n\t                obj.parent.properties.prototype) {\n\t                obj = obj.parent.properties.prototype;\n\t            }\n\t            else {\n\t                // No parent, reached the top.\n\t                break;\n\t            }\n\t        }\n\t        return this.UNDEFINED;\n\t    };\n\t    ;\n\t    /**\n\t     * Does the named property exist on a data object.\n\t     * @param {!JsObject|!Primitive} obj Data object.\n\t     * @param {*} name Name of property.\n\t     * @return {boolean} True if property exists.\n\t     */\n\t    Interpreter.prototype.hasProperty = function (obj, name) {\n\t        name = name.toString();\n\t        if (obj.isPrimitive)\n\t            throw TypeError('Primitive data type has no properties');\n\t        if (name == 'length' && (utils.isa(obj, this.STRING) || utils.isa(obj, this.ARRAY))) {\n\t            return true;\n\t        }\n\t        if (utils.isa(obj, this.STRING)) {\n\t            var n = utils.arrayIndex(name);\n\t            if (!isNaN(n) && n < obj.data.length)\n\t                return true;\n\t        }\n\t        while (true) {\n\t            if (obj.properties && name in obj.properties)\n\t                return true;\n\t            if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {\n\t                obj = obj.parent.properties.prototype;\n\t            }\n\t            else {\n\t                // No parent, reached the top.\n\t                break;\n\t            }\n\t        }\n\t        return false;\n\t    };\n\t    ;\n\t    /**\n\t     * Set a property value on a data object.\n\t     * @param {!JsObject} obj Data object.\n\t     * @param {*} name Name of property.\n\t     * @param {JsObject|Primitive} value\n\t     *     New property value or null if getter/setter is described.\n\t     * @param {Object=} opt_descriptor Optional descriptor object.\n\t     * @return {!JsObject|undefined} Returns a setter function if one\n\t     *     needs to be called, otherwise undefined.\n\t     */\n\t    Interpreter.prototype.setProperty = function (obj, name, value, opt_descriptor) {\n\t        name = name.toString();\n\t        if (opt_descriptor && obj.notConfigurable[name]) {\n\t            this.throwException(this.TYPE_ERROR, \"Cannot redefine property: \" + name);\n\t        }\n\t        if (typeof value != 'object') {\n\t            throw Error(\"Failure to wrap a value: \" + value + \"'\");\n\t        }\n\t        if (obj == this.UNDEFINED || obj == this.NULL) {\n\t            this.throwException(this.TYPE_ERROR, \"Cannot set property '\" + name + \"' of \" + obj);\n\t        }\n\t        if (opt_descriptor && (opt_descriptor.get || opt_descriptor.set) &&\n\t            (value || opt_descriptor.writable !== undefined)) {\n\t            this.throwException(this.TYPE_ERROR, 'Invalid property descriptor. ' +\n\t                'Cannot both specify accessors and a value or writable attribute');\n\t        }\n\t        if (obj.isPrimitive) {\n\t            return;\n\t        }\n\t        if (utils.isa(obj, this.STRING)) {\n\t            var n = utils.arrayIndex(name);\n\t            if (name == 'length' || (!isNaN(n) && n < obj.data.length)) {\n\t                // Can't set length or letters on Strings.\n\t                return;\n\t            }\n\t        }\n\t        if (utils.isa(obj, this.ARRAY)) {\n\t            // Arrays have a magic length variable that is bound to the elements.\n\t            var i = void 0;\n\t            if (name == 'length') {\n\t                // Delete elements if length is smaller.\n\t                var newLength = utils.arrayIndex(value.toNumber());\n\t                if (isNaN(newLength)) {\n\t                    this.throwException(this.RANGE_ERROR, 'Invalid array length');\n\t                }\n\t                if (newLength < obj.length) {\n\t                    for (i in obj.properties) {\n\t                        i = utils.arrayIndex(i);\n\t                        if (!isNaN(i) && newLength <= i) {\n\t                            delete obj.properties[i];\n\t                        }\n\t                    }\n\t                }\n\t                obj.length = newLength;\n\t                return; // Don't set a real length property.\n\t            }\n\t            else if (!isNaN(i = utils.arrayIndex(name))) {\n\t                // Increase length if this index is larger.\n\t                obj.length = Math.max(obj.length, i + 1);\n\t            }\n\t        }\n\t        if (!obj.properties[name] && obj.preventExtensions) {\n\t            var scope = this.getScope();\n\t            if (scope.strict) {\n\t                this.throwException(this.TYPE_ERROR, \"Can't add property \" + name + \" object is not extensible\");\n\t            }\n\t            return;\n\t        }\n\t        if (opt_descriptor) {\n\t            // Define the property.\n\t            obj.properties[name] = value;\n\t            if (!opt_descriptor.configurable) {\n\t                obj.notConfigurable[name] = true;\n\t            }\n\t            var getter = opt_descriptor.get;\n\t            if (getter) {\n\t                obj.getter[name] = getter;\n\t            }\n\t            else {\n\t                delete obj.getter[name];\n\t            }\n\t            var setter = opt_descriptor.set;\n\t            if (setter) {\n\t                obj.setter[name] = setter;\n\t            }\n\t            else {\n\t                delete obj.setter[name];\n\t            }\n\t            var enumerable = opt_descriptor.enumerable || false;\n\t            if (enumerable) {\n\t                delete obj.notEnumerable[name];\n\t            }\n\t            else {\n\t                obj.notEnumerable[name] = true;\n\t            }\n\t            if (getter || setter) {\n\t                delete obj.notWritable[name];\n\t                obj.properties[name] = this.UNDEFINED;\n\t            }\n\t            else {\n\t                var writable = opt_descriptor.writable || false;\n\t                if (writable) {\n\t                    delete obj.notWritable[name];\n\t                }\n\t                else {\n\t                    obj.notWritable[name] = true;\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            // Set the property.\n\t            // Determine if there is a setter anywhere in the history chain.\n\t            var parent_1 = obj;\n\t            while (true) {\n\t                if (parent_1.setter && parent_1.setter[name]) {\n\t                    return parent_1.setter[name];\n\t                }\n\t                if (parent_1.parent && parent_1.parent.properties &&\n\t                    parent_1.parent.properties.prototype) {\n\t                    parent_1 = parent_1.parent.properties.prototype;\n\t                }\n\t                else {\n\t                    // No parent, reached the top.\n\t                    break;\n\t                }\n\t            }\n\t            // No setter, simple assignment.\n\t            if (!obj.notWritable[name]) {\n\t                obj.properties[name] = value;\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    /**\n\t     * Convenience method for adding a native function as a non-enumerable property\n\t     * onto an object's prototype.\n\t     * @param {!JsObject} obj Data object.\n\t     * @param {*} name Name of property.\n\t     * @param {!Function} wrapper Function object.\n\t     */\n\t    Interpreter.prototype.setNativeFunctionPrototype = function (obj, name, wrapper) {\n\t        this.setProperty(obj.properties.prototype, name, this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n\t    };\n\t    ;\n\t    /**\n\t     * Delete a property value on a data object.\n\t     * @param {!JsObject} obj Data object.\n\t     * @param {*} name Name of property.\n\t     * @return {boolean} True if deleted, false if undeletable.\n\t     */\n\t    Interpreter.prototype.deleteProperty = function (obj, name) {\n\t        name = name.toString();\n\t        if (obj.isPrimitive || obj.notWritable[name]) {\n\t            return false;\n\t        }\n\t        if (name == 'length' && utils.isa(obj, this.ARRAY)) {\n\t            return false;\n\t        }\n\t        return delete obj.properties[name];\n\t    };\n\t    ;\n\t    /**\n\t     * Returns the current scope from the stateStack.\n\t     * @return {!JsObject} Current scope dictionary.\n\t     */\n\t    Interpreter.prototype.getScope = function () {\n\t        for (var i = 0; i < this.stateStack.length; i++) {\n\t            if (this.stateStack[i].scope) {\n\t                return this.stateStack[i].scope;\n\t            }\n\t        }\n\t        throw Error('No scope found.');\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new scope dictionary.\n\t     * @param {!Object} node AST node defining the scope container\n\t     *     (e.g. a function).\n\t     * @param {JsObject} parentScope Scope to link to.\n\t     * @return {!JsObject} New scope.\n\t     */\n\t    Interpreter.prototype.createScope = function (node, parentScope) {\n\t        var scope = this.createObject(null);\n\t        scope.parentScope = parentScope;\n\t        if (!parentScope) {\n\t            this.initGlobalScope(scope);\n\t        }\n\t        this.populateScope_(node, scope);\n\t        // Determine if this scope starts with 'use strict'.\n\t        scope.strict = false;\n\t        if (parentScope && parentScope.strict) {\n\t            scope.strict = true;\n\t        }\n\t        else {\n\t            var firstNode = node.body && node.body[0];\n\t            if (firstNode && firstNode.expression &&\n\t                firstNode.expression.type == 'Literal' &&\n\t                firstNode.expression.value == 'use strict') {\n\t                scope.strict = true;\n\t            }\n\t        }\n\t        return scope;\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new special scope dictionary. Similar to createScope(), but\n\t     * doesn't assume that the scope is for a function body. This is used for\n\t     * the catch clause and with statement.\n\t     * @param {!JsObject} parentScope Scope to link to.\n\t     * @param {JsObject=} opt_scope Optional object to transform into\n\t     *     scope.\n\t     * @return {!JsObject} New scope.\n\t     */\n\t    Interpreter.prototype.createSpecialScope = function (parentScope, opt_scope) {\n\t        if (!parentScope) {\n\t            throw Error('parentScope required');\n\t        }\n\t        var scope = opt_scope || this.createObject(null);\n\t        scope.parentScope = parentScope;\n\t        scope.strict = parentScope.strict;\n\t        return scope;\n\t    };\n\t    ;\n\t    /**\n\t     * Retrieves a value from the scope chain.\n\t     * @param {!JsObject|!Primitive} name Name of variable.\n\t     * @return {!JsObject|!Primitive|null} The value\n\t     *     or null if an error was thrown and will be caught.\n\t     */\n\t    Interpreter.prototype.getValueFromScope = function (name) {\n\t        var scope = this.getScope();\n\t        var nameStr = name.toString();\n\t        while (scope) {\n\t            if (nameStr in scope.properties) {\n\t                return scope.properties[nameStr];\n\t            }\n\t            scope = scope.parentScope;\n\t        }\n\t        this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');\n\t        return null;\n\t    };\n\t    ;\n\t    /**\n\t     * Sets a value to the current scope.\n\t     * @param {!JsObject|!Primitive} name Name of variable.\n\t     * @param {!JsObject|!Primitive} value Value.\n\t     */\n\t    Interpreter.prototype.setValueToScope = function (name, value) {\n\t        var scope = this.getScope();\n\t        var strict = scope.strict;\n\t        var nameStr = name.toString();\n\t        while (scope) {\n\t            if ((nameStr in scope.properties) || (!strict && !scope.parentScope)) {\n\t                if (!scope.notWritable[nameStr]) {\n\t                    scope.properties[nameStr] = value;\n\t                }\n\t                return;\n\t            }\n\t            scope = scope.parentScope;\n\t        }\n\t        this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');\n\t    };\n\t    ;\n\t    /**\n\t     * Create a new scope for the given node.\n\t     * @param {!Object} node AST node (program or function).\n\t     * @param {!JsObject} scope Scope dictionary to populate.\n\t     * @private\n\t     */\n\t    Interpreter.prototype.populateScope_ = function (node, scope) {\n\t        if (node.type == 'VariableDeclaration') {\n\t            for (var i = 0; i < node.declarations.length; i++) {\n\t                this.setProperty(scope, node.declarations[i].id.name, this.UNDEFINED);\n\t            }\n\t        }\n\t        else if (node.type == 'FunctionDeclaration') {\n\t            this.setProperty(scope, node.id.name, this.createFunction(node, scope));\n\t            return; // Do not recurse into function.\n\t        }\n\t        else if (node.type == 'FunctionExpression') {\n\t            return; // Do not recurse into function.\n\t        }\n\t        var parent = node.constructor;\n\t        for (var name_1 in node) {\n\t            var prop = node[name_1];\n\t            if (prop && typeof prop == 'object') {\n\t                if (prop instanceof Array) {\n\t                    for (var i = 0; i < prop.length; i++) {\n\t                        if (prop[i] && prop[i].constructor == parent) {\n\t                            this.populateScope_(prop[i], scope);\n\t                        }\n\t                    }\n\t                }\n\t                else {\n\t                    if (prop.constructor == parent) {\n\t                        this.populateScope_(prop, scope);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    /**\n\t     * Gets a value from the scope chain or from an object property.\n\t     * @param {!JsObject|!Primitive|!Array} left\n\t     *     Name of variable or object/propname tuple.\n\t     * @return {!JsObject|!Primitive|null} Value\n\t     *     or null if an error was thrown and will be caught.\n\t     */\n\t    Interpreter.prototype.getValue = function (left) {\n\t        if (left instanceof Array) {\n\t            var obj = left[0], prop = left[1];\n\t            return this.getProperty(obj, prop);\n\t        }\n\t        else {\n\t            return this.getValueFromScope(left);\n\t        }\n\t    };\n\t    ;\n\t    /**\n\t     * Sets a value to the scope chain or to an object property.\n\t     * @param {!JsObject|!Primitive|!Array} left\n\t     *     Name of variable or object/propname tuple.\n\t     * @param {!JsObject|!Primitive} value Value.\n\t     * @return {!JsObject|undefined} Returns a setter function if one\n\t     *     needs to be called, otherwise undefined.\n\t     */\n\t    Interpreter.prototype.setValue = function (left, value) {\n\t        if (left instanceof Array) {\n\t            var obj = left[0], prop = left[1];\n\t            return this.setProperty(obj, prop, value);\n\t        }\n\t        else {\n\t            this.setValueToScope(left, value);\n\t            return undefined;\n\t        }\n\t    };\n\t    ;\n\t    /**\n\t     * Throw an exception in the interpreter that can be handled by a\n\t     * interpreter try/catch statement.  If unhandled, a real exception will\n\t     * be thrown.  Can be called with either an error class and a message, or\n\t     * with an actual object to be thrown.\n\t     * @param {!JsObject} errorClass Type of error (if message is\n\t     *   provided) or the value to throw (if no message).\n\t     * @param {string=} opt_message Message being thrown.\n\t     */\n\t    Interpreter.prototype.throwException = function (errorClass, opt_message) {\n\t        var error;\n\t        if (this.stateStack[0].interpreter) {\n\t            // This is the wrong interpreter, we are spinning on an eval.\n\t            try {\n\t                this.stateStack[0].interpreter.throwException(errorClass, opt_message);\n\t                return;\n\t            }\n\t            catch (e) {\n\t            }\n\t        }\n\t        if (opt_message === undefined) {\n\t            error = errorClass;\n\t        }\n\t        else {\n\t            error = this.createObject(errorClass);\n\t            this.setProperty(error, 'message', this.createPrimitive(opt_message), NONENUMERABLE_DESCRIPTOR);\n\t        }\n\t        // Search for a try statement with a catch clause.\n\t        var state;\n\t        do {\n\t            state = this.stateStack.shift();\n\t        } while (state && !(state.node.type === 'TryStatement' && state.node.handler));\n\t        if (state) {\n\t            // Error is being trapped.\n\t            this.stateStack.unshift({\n\t                node: state.node.handler,\n\t                throwValue: error\n\t            });\n\t        }\n\t        else {\n\t            // Throw a real error.\n\t            var realError = void 0;\n\t            if (utils.isa(error, this.ERROR)) {\n\t                var errorTable = {\n\t                    EvalError: EvalError,\n\t                    RangeError: RangeError,\n\t                    ReferenceError: ReferenceError,\n\t                    SyntaxError: SyntaxError,\n\t                    TypeError: TypeError,\n\t                    URIError: URIError,\n\t                };\n\t                var name_2 = this.getProperty(error, 'name').toString();\n\t                var message = this.getProperty(error, 'message').valueOf();\n\t                var type = errorTable[name_2] || Error;\n\t                realError = type(message);\n\t            }\n\t            else {\n\t                realError = error.toString();\n\t            }\n\t            throw realError;\n\t        }\n\t    };\n\t    ;\n\t    // Functions to handle each node type.\n\t    Interpreter.prototype.stepArrayExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        var n = state.n || 0;\n\t        if (!state.array) {\n\t            state.array = this.createObject(this.ARRAY);\n\t        }\n\t        else if (state.value) {\n\t            this.setProperty(state.array, n - 1, state.value);\n\t        }\n\t        if (n < node.elements.length) {\n\t            state.n = n + 1;\n\t            if (node.elements[n]) {\n\t                this.stateStack.unshift({ node: node.elements[n] });\n\t            }\n\t            else {\n\t                // [0, 1, , 3][2] -> undefined\n\t                // Missing elements are not defined, they aren't undefined.\n\t                state.value = undefined;\n\t            }\n\t        }\n\t        else {\n\t            state.array.length = state.n || 0;\n\t            this.stateStack.shift();\n\t            this.stateStack[0].value = state.array;\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepAssignmentExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneLeft) {\n\t            state.doneLeft = true;\n\t            this.stateStack.unshift({ node: node.left, components: true });\n\t            return;\n\t        }\n\t        if (!state.doneRight) {\n\t            if (!state.leftSide) {\n\t                state.leftSide = state.value;\n\t            }\n\t            if (state.doneGetter_) {\n\t                state.leftValue = state.value;\n\t            }\n\t            if (!state.doneGetter_ && node.operator != '=') {\n\t                state.leftValue = this.getValue(state.leftSide);\n\t                if (state.leftValue.isGetter) {\n\t                    // Clear the getter flag and call the getter function.\n\t                    state.leftValue.isGetter = false;\n\t                    state.doneGetter_ = true;\n\t                    this.stateStack.unshift({\n\t                        node: { type: 'CallExpression' },\n\t                        doneCallee_: true,\n\t                        funcThis_: state.leftSide[0],\n\t                        func_: state.leftValue,\n\t                        doneArgs_: true,\n\t                        arguments: []\n\t                    });\n\t                    return;\n\t                }\n\t            }\n\t            state.doneRight = true;\n\t            this.stateStack.unshift({ node: node.right });\n\t            return;\n\t        }\n\t        if (state.doneSetter_) {\n\t            // Return if setter function.\n\t            // Setter method on property has completed.\n\t            // Ignore its return value, and use the original set value instead.\n\t            this.stateStack.shift();\n\t            this.stateStack[0].value = state.doneSetter_;\n\t            return;\n\t        }\n\t        var rightSide = state.value;\n\t        var value;\n\t        if (node.operator == '=') {\n\t            value = rightSide;\n\t        }\n\t        else {\n\t            var rightValue = rightSide;\n\t            var leftNumber = state.leftValue.toNumber();\n\t            var rightNumber = rightValue.toNumber();\n\t            if (node.operator == '+=') {\n\t                var left = void 0, right = void 0;\n\t                if (state.leftValue.type == 'string' || rightValue.type == 'string') {\n\t                    left = state.leftValue.toString();\n\t                    right = rightValue.toString();\n\t                }\n\t                else {\n\t                    left = leftNumber;\n\t                    right = rightNumber;\n\t                }\n\t                value = left + right;\n\t            }\n\t            else if (node.operator == '-=') {\n\t                value = leftNumber - rightNumber;\n\t            }\n\t            else if (node.operator == '*=') {\n\t                value = leftNumber * rightNumber;\n\t            }\n\t            else if (node.operator == '/=') {\n\t                value = leftNumber / rightNumber;\n\t            }\n\t            else if (node.operator == '%=') {\n\t                value = leftNumber % rightNumber;\n\t            }\n\t            else if (node.operator == '<<=') {\n\t                value = leftNumber << rightNumber;\n\t            }\n\t            else if (node.operator == '>>=') {\n\t                value = leftNumber >> rightNumber;\n\t            }\n\t            else if (node.operator == '>>>=') {\n\t                value = leftNumber >>> rightNumber;\n\t            }\n\t            else if (node.operator == '&=') {\n\t                value = leftNumber & rightNumber;\n\t            }\n\t            else if (node.operator == '^=') {\n\t                value = leftNumber ^ rightNumber;\n\t            }\n\t            else if (node.operator == '|=') {\n\t                value = leftNumber | rightNumber;\n\t            }\n\t            else {\n\t                throw SyntaxError('Unknown assignment expression: ' + node.operator);\n\t            }\n\t            value = this.createPrimitive(value);\n\t        }\n\t        var setter = this.setValue(state.leftSide, value);\n\t        if (setter) {\n\t            state.doneSetter_ = value;\n\t            this.stateStack.unshift({\n\t                node: { type: 'CallExpression' },\n\t                doneCallee_: true,\n\t                funcThis_: state.leftSide[0],\n\t                func_: setter,\n\t                doneArgs_: true,\n\t                arguments: [value]\n\t            });\n\t            return;\n\t        }\n\t        // Return if no setter function.\n\t        this.stateStack.shift();\n\t        this.stateStack[0].value = value;\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepBinaryExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneLeft) {\n\t            state.doneLeft = true;\n\t            this.stateStack.unshift({ node: node.left });\n\t            return;\n\t        }\n\t        if (!state.doneRight) {\n\t            state.doneRight = true;\n\t            state.leftValue = state.value;\n\t            this.stateStack.unshift({ node: node.right });\n\t            return;\n\t        }\n\t        this.stateStack.shift();\n\t        var leftSide = state.leftValue;\n\t        var rightSide = state.value;\n\t        var value;\n\t        var comp = utils.comp(leftSide, rightSide);\n\t        if (node.operator == '==' || node.operator == '!=') {\n\t            if (leftSide.isPrimitive && rightSide.isPrimitive) {\n\t                value = leftSide.data == rightSide.data;\n\t            }\n\t            else {\n\t                value = comp === 0;\n\t            }\n\t            if (node.operator == '!=') {\n\t                value = !value;\n\t            }\n\t        }\n\t        else if (node.operator == '===' || node.operator == '!==') {\n\t            if (leftSide.isPrimitive && rightSide.isPrimitive) {\n\t                value = leftSide.data === rightSide.data;\n\t            }\n\t            else {\n\t                value = leftSide === rightSide;\n\t            }\n\t            if (node.operator == '!==') {\n\t                value = !value;\n\t            }\n\t        }\n\t        else if (node.operator == '>') {\n\t            value = comp == 1;\n\t        }\n\t        else if (node.operator == '>=') {\n\t            value = comp == 1 || comp === 0;\n\t        }\n\t        else if (node.operator == '<') {\n\t            value = comp == -1;\n\t        }\n\t        else if (node.operator == '<=') {\n\t            value = comp == -1 || comp === 0;\n\t        }\n\t        else if (node.operator == '+') {\n\t            var leftValue = void 0, rightValue = void 0;\n\t            if (leftSide.type == 'string' || rightSide.type == 'string') {\n\t                leftValue = leftSide.toString();\n\t                rightValue = rightSide.toString();\n\t            }\n\t            else {\n\t                leftValue = leftSide.toNumber();\n\t                rightValue = rightSide.toNumber();\n\t            }\n\t            value = leftValue + rightValue;\n\t        }\n\t        else if (node.operator == 'in') {\n\t            value = this.hasProperty(rightSide, leftSide);\n\t        }\n\t        else if (node.operator == 'instanceof') {\n\t            if (!utils.isa(rightSide, this.FUNCTION)) {\n\t                this.throwException(this.TYPE_ERROR, 'Expecting a function in instanceof check');\n\t            }\n\t            value = utils.isa(leftSide, rightSide);\n\t        }\n\t        else {\n\t            var leftValue = leftSide.toNumber();\n\t            var rightValue = rightSide.toNumber();\n\t            if (node.operator == '-') {\n\t                value = leftValue - rightValue;\n\t            }\n\t            else if (node.operator == '*') {\n\t                value = leftValue * rightValue;\n\t            }\n\t            else if (node.operator == '/') {\n\t                value = leftValue / rightValue;\n\t            }\n\t            else if (node.operator == '%') {\n\t                value = leftValue % rightValue;\n\t            }\n\t            else if (node.operator == '&') {\n\t                value = leftValue & rightValue;\n\t            }\n\t            else if (node.operator == '|') {\n\t                value = leftValue | rightValue;\n\t            }\n\t            else if (node.operator == '^') {\n\t                value = leftValue ^ rightValue;\n\t            }\n\t            else if (node.operator == '<<') {\n\t                value = leftValue << rightValue;\n\t            }\n\t            else if (node.operator == '>>') {\n\t                value = leftValue >> rightValue;\n\t            }\n\t            else if (node.operator == '>>>') {\n\t                value = leftValue >>> rightValue;\n\t            }\n\t            else {\n\t                throw SyntaxError('Unknown binary operator: ' + node.operator);\n\t            }\n\t        }\n\t        this.stateStack[0].value = this.createPrimitive(value);\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepBlockStatement = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        var n = state.n_ || 0;\n\t        if (node.body[n]) {\n\t            state.done = false;\n\t            state.n_ = n + 1;\n\t            this.stateStack.unshift({ node: node.body[n] });\n\t        }\n\t        else {\n\t            state.done = true;\n\t            if (state.node.type != 'Program') {\n\t                // Leave the root scope on the tree in case the program is appended to.\n\t                this.stateStack.shift();\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepBreakStatement = function () {\n\t        var state = this.stateStack.shift();\n\t        var node = state.node;\n\t        var label = null;\n\t        if (node.label) {\n\t            label = node.label.name;\n\t        }\n\t        state = this.stateStack.shift();\n\t        while (state &&\n\t            state.node.type != 'CallExpression' &&\n\t            state.node.type != 'NewExpression') {\n\t            if (label ? label == state.label : (state.isLoop || state.isSwitch)) {\n\t                return;\n\t            }\n\t            state = this.stateStack.shift();\n\t        }\n\t        // Syntax error, do not allow this error to be trapped.\n\t        throw SyntaxError('Illegal break statement');\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepCallExpression = function () {\n\t        var _this = this;\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneCallee_) {\n\t            state.doneCallee_ = true;\n\t            this.stateStack.unshift({ node: node.callee, components: true });\n\t            return;\n\t        }\n\t        if (!state.func_) {\n\t            // Determine value of the function.\n\t            if (state.value.type == 'function') {\n\t                state.func_ = state.value;\n\t            }\n\t            else {\n\t                if (state.value.length) {\n\t                    state.member_ = state.value[0];\n\t                }\n\t                state.func_ = this.getValue(state.value);\n\t                if (!state.func_) {\n\t                    return; // Thrown error, but trapped.\n\t                }\n\t                else if (state.func_.type != 'function') {\n\t                    this.throwException(this.TYPE_ERROR, (state.value && state.value.type) + ' is not a function');\n\t                    return;\n\t                }\n\t            }\n\t            // Determine value of 'this' in function.\n\t            if (state.node.type == 'NewExpression') {\n\t                state.funcThis_ = this.createObject(state.func_);\n\t                state.isConstructor_ = true;\n\t            }\n\t            else if (state.func_.boundThis_) {\n\t                state.funcThis_ = state.func_.boundThis_;\n\t            }\n\t            else if (state.value.length) {\n\t                state.funcThis_ = state.value[0];\n\t            }\n\t            else {\n\t                state.funcThis_ =\n\t                    this.stateStack[this.stateStack.length - 1].thisExpression;\n\t            }\n\t            if (state.func_.boundArgs_) {\n\t                state.arguments = state.func_.boundArgs_.concat();\n\t            }\n\t            else {\n\t                state.arguments = [];\n\t            }\n\t            state.n_ = 0;\n\t        }\n\t        if (!state.doneArgs_) {\n\t            if (state.n_ != 0) {\n\t                state.arguments.push(state.value);\n\t            }\n\t            if (node.arguments[state.n_]) {\n\t                this.stateStack.unshift({ node: node.arguments[state.n_] });\n\t                state.n_++;\n\t                return;\n\t            }\n\t            state.doneArgs_ = true;\n\t        }\n\t        if (!state.doneExec_) {\n\t            state.doneExec_ = true;\n\t            if (state.func_.node) {\n\t                var scope = this.createScope(state.func_.node.body, state.func_.parentScope);\n\t                // Add all arguments.\n\t                for (var i = 0; i < state.func_.node.params.length; i++) {\n\t                    var paramName = this.createPrimitive(state.func_.node.params[i].name);\n\t                    var paramValue = state.arguments.length > i ? state.arguments[i] :\n\t                        this.UNDEFINED;\n\t                    this.setProperty(scope, paramName, paramValue);\n\t                }\n\t                // Build arguments variable.\n\t                var argsList = this.createObject(this.ARRAY);\n\t                for (var i = 0; i < state.arguments.length; i++) {\n\t                    this.setProperty(argsList, this.createPrimitive(i), state.arguments[i]);\n\t                }\n\t                this.setProperty(scope, 'arguments', argsList);\n\t                var funcState = {\n\t                    node: state.func_.node.body,\n\t                    scope: scope,\n\t                    thisExpression: state.funcThis_\n\t                };\n\t                this.stateStack.unshift(funcState);\n\t                state.value = this.UNDEFINED; // Default value if no explicit return.\n\t            }\n\t            else if (state.func_.nativeFunc) {\n\t                state.value = state.func_.nativeFunc.apply(state.funcThis_, state.arguments);\n\t            }\n\t            else if (state.func_.asyncFunc) {\n\t                state.func_.asyncFunc.apply(state.funcThis_, state.arguments)\n\t                    .then(function (value) {\n\t                    _this.paused_ = false;\n\t                    state.value = value || _this.UNDEFINED;\n\t                }, function (error) {\n\t                    _this.paused_ = false;\n\t                    _this.throwException(_this.ERROR, error.message);\n\t                });\n\t                this.paused_ = true;\n\t                return;\n\t            }\n\t            else if (state.func_.eval) {\n\t                var code = state.arguments[0];\n\t                if (!code) {\n\t                    state.value = this.UNDEFINED;\n\t                }\n\t                else if (!code.isPrimitive) {\n\t                    // JS does not parse String objects:\n\t                    // eval(new String('1 + 1')) -> '1 + 1'\n\t                    state.value = code;\n\t                }\n\t                else {\n\t                    var evalInterpreter = new Interpreter(code.toString());\n\t                    evalInterpreter.stateStack[0].scope = this.getScope();\n\t                    state = {\n\t                        node: { type: 'Eval_' },\n\t                        interpreter: evalInterpreter\n\t                    };\n\t                    this.stateStack.unshift(state);\n\t                }\n\t            }\n\t            else {\n\t                throw TypeError('function not a function (huh?)');\n\t            }\n\t        }\n\t        else {\n\t            // Execution complete.  Put the return value on the stack.\n\t            this.stateStack.shift();\n\t            if (state.isConstructor_ && state.value.type !== 'object') {\n\t                this.stateStack[0].value = state.funcThis_;\n\t            }\n\t            else {\n\t                this.stateStack[0].value = state.value;\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepCatchClause = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneBody) {\n\t            state.doneBody = true;\n\t            var scope = void 0;\n\t            if (node.param) {\n\t                scope = this.createSpecialScope(this.getScope());\n\t                // Add the argument.\n\t                var paramName = this.createPrimitive(node.param.name);\n\t                this.setProperty(scope, paramName, state.throwValue);\n\t            }\n\t            this.stateStack.unshift({ node: node.body, scope: scope });\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepConditionalExpression = function () {\n\t        var state = this.stateStack[0];\n\t        if (!state.done) {\n\t            if (!state.test) {\n\t                state.test = true;\n\t                this.stateStack.unshift({ node: state.node.test });\n\t            }\n\t            else {\n\t                state.done = true;\n\t                if (state.value.toBoolean() && state.node.consequent) {\n\t                    this.stateStack.unshift({ node: state.node.consequent });\n\t                }\n\t                else if (!state.value.toBoolean() && state.node.alternate) {\n\t                    this.stateStack.unshift({ node: state.node.alternate });\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t            if (state.node.type == 'ConditionalExpression') {\n\t                this.stateStack[0].value = state.value;\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepContinueStatement = function () {\n\t        var node = this.stateStack[0].node;\n\t        var label = null;\n\t        if (node.label) {\n\t            label = node.label.name;\n\t        }\n\t        var state = this.stateStack[0];\n\t        while (state &&\n\t            state.node.type != 'CallExpression' &&\n\t            state.node.type != 'NewExpression') {\n\t            if (state.isLoop) {\n\t                if (!label || (label == state.label)) {\n\t                    return;\n\t                }\n\t            }\n\t            this.stateStack.shift();\n\t            state = this.stateStack[0];\n\t        }\n\t        // Syntax error, do not allow this error to be trapped.\n\t        throw SyntaxError('Illegal continue statement');\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepDoWhileStatement = function () {\n\t        var state = this.stateStack[0];\n\t        state.isLoop = true;\n\t        if (state.node.type == 'DoWhileStatement' && state.test === undefined) {\n\t            // First iteration of do/while executes without checking test.\n\t            state.value = this.TRUE;\n\t            state.test = true;\n\t        }\n\t        if (!state.test) {\n\t            state.test = true;\n\t            this.stateStack.unshift({ node: state.node.test });\n\t        }\n\t        else {\n\t            state.test = false;\n\t            if (!state.value.toBoolean()) {\n\t                this.stateStack.shift();\n\t            }\n\t            else if (state.node.body) {\n\t                this.stateStack.unshift({ node: state.node.body });\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepEmptyStatement = function () {\n\t        this.stateStack.shift();\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepEval_ = function () {\n\t        var state = this.stateStack[0];\n\t        if (!state.interpreter.step()) {\n\t            this.stateStack.shift();\n\t            this.stateStack[0].value = state.interpreter.value || this.UNDEFINED;\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepExpressionStatement = function () {\n\t        var state = this.stateStack[0];\n\t        if (!state.done) {\n\t            state.done = true;\n\t            this.stateStack.unshift({ node: state.node.expression });\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t            // Save this value to the interpreter for use as a return value if\n\t            // this code is inside an eval function.\n\t            this.value = state.value;\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepForInStatement = function () {\n\t        var state = this.stateStack[0];\n\t        state.isLoop = true;\n\t        var node = state.node;\n\t        if (!state.doneVariable_) {\n\t            state.doneVariable_ = true;\n\t            var left = node.left;\n\t            if (left.type == 'VariableDeclaration') {\n\t                // Inline variable declaration: for (const x in y)\n\t                left = left.declarations[0].id;\n\t            }\n\t            this.stateStack.unshift({ node: left, components: true });\n\t            return;\n\t        }\n\t        if (!state.doneObject_) {\n\t            state.doneObject_ = true;\n\t            state.variable = state.value;\n\t            this.stateStack.unshift({ node: node.right });\n\t            return;\n\t        }\n\t        if (typeof state.iterator == 'undefined') {\n\t            // First iteration.\n\t            state.object = state.value;\n\t            state.iterator = 0;\n\t        }\n\t        var name = null;\n\t        done: do {\n\t            var i = state.iterator;\n\t            for (var prop in state.object.properties) {\n\t                if (state.object.notEnumerable[prop]) {\n\t                    continue;\n\t                }\n\t                if (i == 0) {\n\t                    name = prop;\n\t                    break done;\n\t                }\n\t                i--;\n\t            }\n\t            state.object = state.object.parent && state.object.parent.properties.prototype;\n\t            state.iterator = 0;\n\t        } while (state.object);\n\t        state.iterator++;\n\t        if (name === null) {\n\t            this.stateStack.shift();\n\t        }\n\t        else {\n\t            this.setValueToScope(state.variable, this.createPrimitive(name));\n\t            if (node.body) {\n\t                this.stateStack.unshift({ node: node.body });\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepForStatement = function () {\n\t        var state = this.stateStack[0];\n\t        state.isLoop = true;\n\t        var node = state.node;\n\t        var mode = state.mode || 0;\n\t        if (mode == 0) {\n\t            state.mode = 1;\n\t            if (node.init) {\n\t                this.stateStack.unshift({ node: node.init });\n\t            }\n\t        }\n\t        else if (mode == 1) {\n\t            state.mode = 2;\n\t            if (node.test) {\n\t                this.stateStack.unshift({ node: node.test });\n\t            }\n\t        }\n\t        else if (mode == 2) {\n\t            state.mode = 3;\n\t            if (node.test && state.value && !state.value.toBoolean()) {\n\t                // Loop complete.  Bail out.\n\t                this.stateStack.shift();\n\t            }\n\t            else if (node.body) {\n\t                this.stateStack.unshift({ node: node.body });\n\t            }\n\t        }\n\t        else if (mode == 3) {\n\t            state.mode = 1;\n\t            if (node.update) {\n\t                this.stateStack.unshift({ node: node.update });\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepFunctionDeclaration = function () {\n\t        this.stateStack.shift();\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepFunctionExpression = function () {\n\t        var state = this.stateStack.shift();\n\t        this.stateStack[0].value = this.createFunction(state.node);\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepIdentifier = function () {\n\t        var state = this.stateStack.shift();\n\t        var name = this.createPrimitive(state.node.name);\n\t        this.stateStack[0].value = state.components ? name : this.getValueFromScope(name);\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepIfStatement = function () {\n\t        return this.stepConditionalExpression();\n\t    };\n\t    Interpreter.prototype.stepLabeledStatement = function () {\n\t        // No need to hit this node again on the way back up the stack.\n\t        var state = this.stateStack.shift();\n\t        this.stateStack.unshift({\n\t            node: state.node.body,\n\t            label: state.node.label.name,\n\t        });\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepLiteral = function () {\n\t        var state = this.stateStack.shift();\n\t        this.stateStack[0].value = this.createPrimitive(state.node.value);\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepLogicalExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (node.operator != '&&' && node.operator != '||') {\n\t            throw SyntaxError('Unknown logical operator: ' + node.operator);\n\t        }\n\t        if (!state.doneLeft_) {\n\t            state.doneLeft_ = true;\n\t            this.stateStack.unshift({ node: node.left });\n\t        }\n\t        else if (!state.doneRight_) {\n\t            if ((node.operator == '&&' && !state.value.toBoolean()) ||\n\t                (node.operator == '||' && state.value.toBoolean())) {\n\t                // Shortcut evaluation.\n\t                this.stateStack.shift();\n\t                this.stateStack[0].value = state.value;\n\t            }\n\t            else {\n\t                state.doneRight_ = true;\n\t                this.stateStack.unshift({ node: node.right });\n\t            }\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t            this.stateStack[0].value = state.value;\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepMemberExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneObject_) {\n\t            state.doneObject_ = true;\n\t            this.stateStack.unshift({ node: node.object });\n\t        }\n\t        else if (!state.doneProperty_) {\n\t            state.doneProperty_ = true;\n\t            state.object = state.value;\n\t            this.stateStack.unshift({\n\t                node: node.property,\n\t                components: !node.computed\n\t            });\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t            if (state.components) {\n\t                this.stateStack[0].value = [state.object, state.value];\n\t            }\n\t            else {\n\t                var value = this.getProperty(state.object, state.value);\n\t                if (value.isGetter) {\n\t                    // Clear the getter flag and call the getter function.\n\t                    value.isGetter = false;\n\t                    this.stateStack.unshift({\n\t                        node: { type: 'CallExpression' },\n\t                        doneCallee_: true,\n\t                        funcThis_: state.object,\n\t                        func_: value,\n\t                        doneArgs_: true,\n\t                        arguments: []\n\t                    });\n\t                }\n\t                else {\n\t                    this.stateStack[0].value = value;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepNewExpression = function () {\n\t        return this.stepCallExpression();\n\t    };\n\t    Interpreter.prototype.stepObjectExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        var valueToggle = state.valueToggle;\n\t        var n = state.n || 0;\n\t        if (!state.object) {\n\t            state.object = this.createObject(this.OBJECT);\n\t            state.properties = Object.create(null);\n\t        }\n\t        else {\n\t            if (valueToggle) {\n\t                state.key = state.value;\n\t            }\n\t            else {\n\t                if (!state.properties[state.key]) {\n\t                    // Create temp object to collect value, getter, and/or setter.\n\t                    state.properties[state.key] = {};\n\t                }\n\t                state.properties[state.key][state.kind] = state.value;\n\t            }\n\t        }\n\t        if (node.properties[n]) {\n\t            if (valueToggle) {\n\t                state.n = n + 1;\n\t                this.stateStack.unshift({ node: node.properties[n].value });\n\t            }\n\t            else {\n\t                state.kind = node.properties[n].kind;\n\t                this.stateStack.unshift({ node: node.properties[n].key, components: true });\n\t            }\n\t            state.valueToggle = !valueToggle;\n\t        }\n\t        else {\n\t            for (var key in state.properties) {\n\t                var kinds = state.properties[key];\n\t                if ('get' in kinds || 'set' in kinds) {\n\t                    // Set a property with a getter or setter.\n\t                    var descriptor = {\n\t                        configurable: true,\n\t                        enumerable: true,\n\t                        get: kinds['get'],\n\t                        set: kinds['set']\n\t                    };\n\t                    this.setProperty(state.object, key, null, descriptor);\n\t                }\n\t                else {\n\t                    // Set a normal property with a value.\n\t                    this.setProperty(state.object, key, kinds['init']);\n\t                }\n\t            }\n\t            this.stateStack.shift();\n\t            this.stateStack[0].value = state.object;\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepProgram = function () {\n\t        return this.stepBlockStatement();\n\t    };\n\t    Interpreter.prototype.stepReturnStatement = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (node.argument && !state.done) {\n\t            state.done = true;\n\t            this.stateStack.unshift({ node: node.argument });\n\t        }\n\t        else {\n\t            var value = state.value || this.UNDEFINED;\n\t            do {\n\t                this.stateStack.shift();\n\t                if (this.stateStack.length == 0) {\n\t                    // Syntax error, do not allow this error to be trapped.\n\t                    throw SyntaxError('Illegal return statement');\n\t                }\n\t                state = this.stateStack[0];\n\t            } while (state.node.type != 'CallExpression' &&\n\t                state.node.type != 'NewExpression');\n\t            state.value = value;\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepSequenceExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        var n = state.n || 0;\n\t        if (node.expressions[n]) {\n\t            state.n = n + 1;\n\t            this.stateStack.unshift({ node: node.expressions[n] });\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t            this.stateStack[0].value = state.value;\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepSwitchStatement = function () {\n\t        var state = this.stateStack[0];\n\t        state.checked = state.checked || [];\n\t        state.isSwitch = true;\n\t        if (!state.test) {\n\t            state.test = true;\n\t            this.stateStack.unshift({ node: state.node.discriminant });\n\t            return;\n\t        }\n\t        if (!state.switchValue) {\n\t            // Preserve switch value between case tests.\n\t            state.switchValue = state.value;\n\t        }\n\t        var index = state.index || 0;\n\t        var currentCase = state.node.cases[index];\n\t        if (currentCase) {\n\t            if (!state.done && !state.checked[index] && currentCase.test) {\n\t                state.checked[index] = true;\n\t                this.stateStack.unshift({ node: currentCase.test });\n\t                return;\n\t            }\n\t            // Test on the default case will be null.\n\t            if (state.done || !currentCase.test || utils.comp(state.value, state.switchValue) == 0) {\n\t                state.done = true;\n\t                var n = state.n || 0;\n\t                if (currentCase.consequent[n]) {\n\t                    this.stateStack.unshift({ node: currentCase.consequent[n] });\n\t                    state.n = n + 1;\n\t                    return;\n\t                }\n\t            }\n\t            state.n = 0;\n\t            state.index = index + 1;\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepThisExpression = function () {\n\t        this.stateStack.shift();\n\t        for (var i = 0; i < this.stateStack.length; i++) {\n\t            if (this.stateStack[i].thisExpression) {\n\t                this.stateStack[0].value = this.stateStack[i].thisExpression;\n\t                return;\n\t            }\n\t        }\n\t        throw Error('No this expression found.');\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepThrowStatement = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.argument) {\n\t            state.argument = true;\n\t            this.stateStack.unshift({ node: node.argument });\n\t        }\n\t        else {\n\t            this.throwException(state.value);\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepTryStatement = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneBlock) {\n\t            state.doneBlock = true;\n\t            this.stateStack.unshift({ node: node.block });\n\t        }\n\t        else if (!state.doneFinalizer && node.finalizer) {\n\t            state.doneFinalizer = true;\n\t            this.stateStack.unshift({ node: node.finalizer });\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepUnaryExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.done) {\n\t            state.done = true;\n\t            var nextState = { node: node.argument };\n\t            if (node.operator == 'delete' || node.operator == 'typeof') {\n\t                nextState.components = true;\n\t            }\n\t            this.stateStack.unshift(nextState);\n\t            return;\n\t        }\n\t        this.stateStack.shift();\n\t        var value;\n\t        if (node.operator == '-') {\n\t            value = -state.value.toNumber();\n\t        }\n\t        else if (node.operator == '+') {\n\t            value = state.value.toNumber();\n\t        }\n\t        else if (node.operator == '!') {\n\t            value = !state.value.toBoolean();\n\t        }\n\t        else if (node.operator == '~') {\n\t            value = ~state.value.toNumber();\n\t        }\n\t        else if (node.operator == 'delete' || node.operator == 'typeof') {\n\t            var obj = void 0;\n\t            var name_3;\n\t            if (state.value.length) {\n\t                obj = state.value[0];\n\t                name_3 = state.value[1];\n\t            }\n\t            else {\n\t                obj = this.getScope();\n\t                name_3 = state.value;\n\t            }\n\t            if (node.operator == 'delete') {\n\t                value = this.deleteProperty(obj, name_3);\n\t            }\n\t            else {\n\t                value = this.getProperty(obj, name_3).type;\n\t            }\n\t        }\n\t        else if (node.operator == 'void') {\n\t            value = undefined;\n\t        }\n\t        else {\n\t            throw SyntaxError('Unknown unary operator: ' + node.operator);\n\t        }\n\t        this.stateStack[0].value = this.createPrimitive(value);\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepUpdateExpression = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneLeft) {\n\t            state.doneLeft = true;\n\t            this.stateStack.unshift({ node: node.argument, components: true });\n\t            return;\n\t        }\n\t        if (!state.leftSide) {\n\t            state.leftSide = state.value;\n\t        }\n\t        if (state.doneGetter_) {\n\t            state.leftValue = state.value;\n\t        }\n\t        if (!state.doneGetter_) {\n\t            state.leftValue = this.getValue(state.leftSide);\n\t            if (!state.leftValue) {\n\t                return; // Thrown error, but trapped.\n\t            }\n\t            if (state.leftValue.isGetter) {\n\t                // Clear the getter flag and call the getter function.\n\t                state.leftValue.isGetter = false;\n\t                state.doneGetter_ = true;\n\t                this.stateStack.unshift({\n\t                    node: { type: 'CallExpression' },\n\t                    doneCallee_: true,\n\t                    funcThis_: state.leftSide[0],\n\t                    func_: state.leftValue,\n\t                    doneArgs_: true,\n\t                    arguments: []\n\t                });\n\t                return;\n\t            }\n\t        }\n\t        if (state.doneSetter_) {\n\t            // Return if setter function.\n\t            // Setter method on property has completed.\n\t            // Ignore its return value, and use the original set value instead.\n\t            this.stateStack.shift();\n\t            this.stateStack[0].value = state.doneSetter_;\n\t            return;\n\t        }\n\t        var leftValue = state.leftValue.toNumber();\n\t        var changeValue;\n\t        if (node.operator == '++') {\n\t            changeValue = this.createPrimitive(leftValue + 1);\n\t        }\n\t        else if (node.operator == '--') {\n\t            changeValue = this.createPrimitive(leftValue - 1);\n\t        }\n\t        else {\n\t            throw SyntaxError('Unknown update expression: ' + node.operator);\n\t        }\n\t        var returnValue = node.prefix ?\n\t            changeValue : this.createPrimitive(leftValue);\n\t        var setter = this.setValue(state.leftSide, changeValue);\n\t        if (setter) {\n\t            state.doneSetter_ = returnValue;\n\t            this.stateStack.unshift({\n\t                node: { type: 'CallExpression' },\n\t                doneCallee_: true,\n\t                funcThis_: state.leftSide[0],\n\t                func_: setter,\n\t                doneArgs_: true,\n\t                arguments: [changeValue]\n\t            });\n\t            return;\n\t        }\n\t        // Return if no setter function.\n\t        this.stateStack.shift();\n\t        this.stateStack[0].value = returnValue;\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepVariableDeclaration = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        var n = state.n || 0;\n\t        if (node.declarations[n]) {\n\t            state.n = n + 1;\n\t            this.stateStack.unshift({ node: node.declarations[n] });\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepVariableDeclarator = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (node.init && !state.done) {\n\t            state.done = true;\n\t            this.stateStack.unshift({ node: node.init });\n\t            return;\n\t        }\n\t        if (node.init) {\n\t            // This setValue call never needs to deal with calling a setter function.\n\t            this.setValue(this.createPrimitive(node.id.name), state.value);\n\t        }\n\t        this.stateStack.shift();\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepWithStatement = function () {\n\t        var state = this.stateStack[0];\n\t        var node = state.node;\n\t        if (!state.doneObject) {\n\t            state.doneObject = true;\n\t            this.stateStack.unshift({ node: node.object });\n\t        }\n\t        else if (!state.doneBody) {\n\t            state.doneBody = true;\n\t            var scope = this.createSpecialScope(this.getScope(), state.value);\n\t            this.stateStack.unshift({ node: node.body, scope: scope });\n\t        }\n\t        else {\n\t            this.stateStack.shift();\n\t        }\n\t    };\n\t    ;\n\t    Interpreter.prototype.stepWhileStatement = function () {\n\t        return this.stepDoWhileStatement();\n\t    };\n\t    return Interpreter;\n\t}());\n\texports.Interpreter = Interpreter;\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Interpreter;\n\t//# sourceMappingURL=Interpreter.js.map\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\tvar Primitive = (function () {\n\t    /**\n\t     * Class for a number, string, boolean, null, or undefined.\n\t     * @param {number|string|boolean|null|undefined} data Primitive value.\n\t     * @param {!Interpreter} interpreter The JS Interpreter to bind to.\n\t     * @constructor\n\t     */\n\t    function Primitive(data, interpreter) {\n\t        /**\n\t         * @type {number|string|boolean|null|undefined}\n\t         */\n\t        this.data = undefined;\n\t        /**\n\t         * @type {string}\n\t         */\n\t        this.type = 'undefined';\n\t        /**\n\t         * @type {Function}\n\t         */\n\t        this.parent = null;\n\t        /**\n\t         * @type {boolean}\n\t         */\n\t        this.isPrimitive = true;\n\t        var type = typeof data;\n\t        this.data = data;\n\t        this.type = type;\n\t        if (type == 'number') {\n\t            this.parent = interpreter.NUMBER;\n\t        }\n\t        else if (type == 'string') {\n\t            this.parent = interpreter.STRING;\n\t        }\n\t        else if (type == 'boolean') {\n\t            this.parent = interpreter.BOOLEAN;\n\t        }\n\t    }\n\t    ;\n\t    /**\n\t     * Convert this primitive into a boolean.\n\t     * @return {boolean} Boolean value.\n\t     */\n\t    Primitive.prototype.toBoolean = function () {\n\t        return Boolean(this.data);\n\t    };\n\t    ;\n\t    /**\n\t     * Convert this primitive into a number.\n\t     * @return {number} Number value.\n\t     */\n\t    Primitive.prototype.toNumber = function () {\n\t        return Number(this.data);\n\t    };\n\t    ;\n\t    /**\n\t     * Convert this primitive into a string.\n\t     * @return {string} String value.\n\t     * @override\n\t     */\n\t    Primitive.prototype.toString = function () {\n\t        return String(this.data);\n\t    };\n\t    ;\n\t    /**\n\t     * Return the primitive value.\n\t     * @return {number|string|boolean|null|undefined} Primitive value.\n\t     * @override\n\t     */\n\t    Primitive.prototype.valueOf = function () {\n\t        return this.data;\n\t    };\n\t    ;\n\t    return Primitive;\n\t}());\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.default = Primitive;\n\t//# sourceMappingURL=Primitive.js.map\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Interpreter_1 = __webpack_require__(6);\n\texports.Interpreter = Interpreter_1.default;\n\tvar JsObject_1 = __webpack_require__(2);\n\texports.JsObject = JsObject_1.default;\n\t//# sourceMappingURL=index.js.map\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t/**\n\t * Compares two objects against each other.\n\t * @param {!Object} a First object.\n\t * @param {!Object} b Second object.\n\t * @return {number} -1 if a is smaller, 0 if a == b, 1 if a is bigger,\n\t *     NaN if they are not comparable.\n\t */\n\tfunction comp(a, b) {\n\t    if (a.isPrimitive && a.type == 'number' && isNaN(a.data) ||\n\t        b.isPrimitive && b.type == 'number' && isNaN(b.data)) {\n\t        // NaN is not comparable to anything, including itself.\n\t        return NaN;\n\t    }\n\t    if (a === b) {\n\t        return 0;\n\t    }\n\t    if (a.isPrimitive && b.isPrimitive) {\n\t        a = a.data;\n\t        b = b.data;\n\t    }\n\t    else {\n\t        // TODO: Handle other types.\n\t        return NaN;\n\t    }\n\t    if (a < b) {\n\t        return -1;\n\t    }\n\t    else if (a > b) {\n\t        return 1;\n\t    }\n\t    return 0;\n\t}\n\texports.comp = comp;\n\t;\n\t/**\n\t * Is a value a legal integer for an array?\n\t * @param {*} n Value to check.\n\t * @return {number} Zero, or a positive integer if the value can be\n\t *     converted to such.  NaN otherwise.\n\t */\n\tfunction arrayIndex(n) {\n\t    n = Number(n);\n\t    if (!isFinite(n) || n != Math.floor(n) || n < 0) {\n\t        return NaN;\n\t    }\n\t    return n;\n\t}\n\texports.arrayIndex = arrayIndex;\n\t;\n\t/**\n\t * Remove start and end values from AST.\n\t * Used to remove highlighting from polyfills.\n\t * @param {!Object} node AST node.\n\t * @private\n\t */\n\tfunction stripLocations(node) {\n\t    delete node.start;\n\t    delete node.end;\n\t    for (var name in node) {\n\t        if (node.hasOwnProperty(name)) {\n\t            var prop = node[name];\n\t            if (prop && typeof prop == 'object') {\n\t                stripLocations(prop);\n\t            }\n\t        }\n\t    }\n\t}\n\texports.stripLocations = stripLocations;\n\t;\n\t/**\n\t * Is an object of a certain class?\n\t * @param {Object} child Object to check.\n\t * @param {Object} parent Constructor of object.\n\t * @return {boolean} True if object is the class or inherits from it.\n\t *     False otherwise.\n\t */\n\tfunction isa(child, parent) {\n\t    if (!child || !parent) {\n\t        return false;\n\t    }\n\t    while (child.parent != parent) {\n\t        if (!child.parent || !child.parent.properties.prototype) {\n\t            return false;\n\t        }\n\t        child = child.parent.properties.prototype;\n\t    }\n\t    return true;\n\t}\n\texports.isa = isa;\n\t;\n\tfunction strictComp(a, b) {\n\t    // Strict === comparison.\n\t    if (a.isPrimitive && b.isPrimitive) {\n\t        return a.data === b.data;\n\t    }\n\t    return a === b;\n\t}\n\texports.strictComp = strictComp;\n\t;\n\t//# sourceMappingURL=utils.js.map\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (global, factory) {\n\t   true ? factory(exports) :\n\t  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t  (factory((global.acorn = global.acorn || {})));\n\t}(this, function (exports) { 'use strict';\n\t\n\t  // Reserved word lists for various dialects of the language\n\t\n\t  var reservedWords = {\n\t    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n\t    5: \"class enum extends super const export import\",\n\t    6: \"enum\",\n\t    strict: \"implements interface let package private protected public static yield\",\n\t    strictBind: \"eval arguments\"\n\t  }\n\t\n\t  // And the keywords\n\t\n\t  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\t\n\t  var keywords = {\n\t    5: ecma5AndLessKeywords,\n\t    6: ecma5AndLessKeywords + \" const class extends export import super\"\n\t  }\n\t\n\t  // ## Character categories\n\t\n\t  // Big ugly regular expressions that match characters in the\n\t  // whitespace, identifier, and identifier-start categories. These\n\t  // are only applied when a character is found to actually have a\n\t  // code point above 128.\n\t  // Generated by `bin/generate-identifier-regex.js`.\n\t\n\t  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\n\t  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\t\n\t  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\n\t  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\t\n\t  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\t\n\t  // These are a run-length and offset encoded representation of the\n\t  // >0xffff code points that are a valid part of identifiers. The\n\t  // offset starts at 0x10000, and each pair of numbers represents an\n\t  // offset to the next range, and then a size of the range. They were\n\t  // generated by bin/generate-identifier-regex.js\n\t  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\n\t  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\t\n\t  // This has a complexity linear to the value of the code. The\n\t  // assumption is that looking up astral identifier characters is\n\t  // rare.\n\t  function isInAstralSet(code, set) {\n\t    var pos = 0x10000\n\t    for (var i = 0; i < set.length; i += 2) {\n\t      pos += set[i]\n\t      if (pos > code) return false\n\t      pos += set[i + 1]\n\t      if (pos >= code) return true\n\t    }\n\t  }\n\t\n\t  // Test whether a given character code starts an identifier.\n\t\n\t  function isIdentifierStart(code, astral) {\n\t    if (code < 65) return code === 36\n\t    if (code < 91) return true\n\t    if (code < 97) return code === 95\n\t    if (code < 123) return true\n\t    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n\t    if (astral === false) return false\n\t    return isInAstralSet(code, astralIdentifierStartCodes)\n\t  }\n\t\n\t  // Test whether a given character is part of an identifier.\n\t\n\t  function isIdentifierChar(code, astral) {\n\t    if (code < 48) return code === 36\n\t    if (code < 58) return true\n\t    if (code < 65) return false\n\t    if (code < 91) return true\n\t    if (code < 97) return code === 95\n\t    if (code < 123) return true\n\t    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n\t    if (astral === false) return false\n\t    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n\t  }\n\t\n\t  // ## Token types\n\t\n\t  // The assignment of fine-grained, information-carrying type objects\n\t  // allows the tokenizer to store the information it has about a\n\t  // token in a way that is very cheap for the parser to look up.\n\t\n\t  // All token type variables start with an underscore, to make them\n\t  // easy to recognize.\n\t\n\t  // The `beforeExpr` property is used to disambiguate between regular\n\t  // expressions and divisions. It is set on all token types that can\n\t  // be followed by an expression (thus, a slash after them would be a\n\t  // regular expression).\n\t  //\n\t  // The `startsExpr` property is used to check if the token ends a\n\t  // `yield` expression. It is set on all token types that either can\n\t  // directly start an expression (like a quotation mark) or can\n\t  // continue an expression (like the body of a string).\n\t  //\n\t  // `isLoop` marks a keyword as starting a loop, which is important\n\t  // to know when parsing a label, in order to allow or disallow\n\t  // continue jumps to that label.\n\t\n\t  var TokenType = function TokenType(label, conf) {\n\t    if ( conf === void 0 ) conf = {};\n\t\n\t    this.label = label\n\t    this.keyword = conf.keyword\n\t    this.beforeExpr = !!conf.beforeExpr\n\t    this.startsExpr = !!conf.startsExpr\n\t    this.isLoop = !!conf.isLoop\n\t    this.isAssign = !!conf.isAssign\n\t    this.prefix = !!conf.prefix\n\t    this.postfix = !!conf.postfix\n\t    this.binop = conf.binop || null\n\t    this.updateContext = null\n\t  };\n\t\n\t  function binop(name, prec) {\n\t    return new TokenType(name, {beforeExpr: true, binop: prec})\n\t  }\n\t  var beforeExpr = {beforeExpr: true};\n\t  var startsExpr = {startsExpr: true};\n\t  // Map keyword names to token types.\n\t\n\t  var keywordTypes = {}\n\t\n\t  // Succinct definitions of keyword token types\n\t  function kw(name, options) {\n\t    if ( options === void 0 ) options = {};\n\t\n\t    options.keyword = name\n\t    return keywordTypes[name] = new TokenType(name, options)\n\t  }\n\t\n\t  var tt = {\n\t    num: new TokenType(\"num\", startsExpr),\n\t    regexp: new TokenType(\"regexp\", startsExpr),\n\t    string: new TokenType(\"string\", startsExpr),\n\t    name: new TokenType(\"name\", startsExpr),\n\t    eof: new TokenType(\"eof\"),\n\t\n\t    // Punctuation token types.\n\t    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n\t    bracketR: new TokenType(\"]\"),\n\t    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n\t    braceR: new TokenType(\"}\"),\n\t    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n\t    parenR: new TokenType(\")\"),\n\t    comma: new TokenType(\",\", beforeExpr),\n\t    semi: new TokenType(\";\", beforeExpr),\n\t    colon: new TokenType(\":\", beforeExpr),\n\t    dot: new TokenType(\".\"),\n\t    question: new TokenType(\"?\", beforeExpr),\n\t    arrow: new TokenType(\"=>\", beforeExpr),\n\t    template: new TokenType(\"template\"),\n\t    ellipsis: new TokenType(\"...\", beforeExpr),\n\t    backQuote: new TokenType(\"`\", startsExpr),\n\t    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\t\n\t    // Operators. These carry several kinds of properties to help the\n\t    // parser use them properly (the presence of these properties is\n\t    // what categorizes them as operators).\n\t    //\n\t    // `binop`, when present, specifies that this operator is a binary\n\t    // operator, and will refer to its precedence.\n\t    //\n\t    // `prefix` and `postfix` mark the operator as a prefix or postfix\n\t    // unary operator.\n\t    //\n\t    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n\t    // binary operators with a very low precedence, that should result\n\t    // in AssignmentExpression nodes.\n\t\n\t    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n\t    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n\t    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n\t    prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n\t    logicalOR: binop(\"||\", 1),\n\t    logicalAND: binop(\"&&\", 2),\n\t    bitwiseOR: binop(\"|\", 3),\n\t    bitwiseXOR: binop(\"^\", 4),\n\t    bitwiseAND: binop(\"&\", 5),\n\t    equality: binop(\"==/!=\", 6),\n\t    relational: binop(\"</>\", 7),\n\t    bitShift: binop(\"<</>>\", 8),\n\t    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n\t    modulo: binop(\"%\", 10),\n\t    star: binop(\"*\", 10),\n\t    slash: binop(\"/\", 10),\n\t    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\t\n\t    // Keyword token types.\n\t    _break: kw(\"break\"),\n\t    _case: kw(\"case\", beforeExpr),\n\t    _catch: kw(\"catch\"),\n\t    _continue: kw(\"continue\"),\n\t    _debugger: kw(\"debugger\"),\n\t    _default: kw(\"default\", beforeExpr),\n\t    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n\t    _else: kw(\"else\", beforeExpr),\n\t    _finally: kw(\"finally\"),\n\t    _for: kw(\"for\", {isLoop: true}),\n\t    _function: kw(\"function\", startsExpr),\n\t    _if: kw(\"if\"),\n\t    _return: kw(\"return\", beforeExpr),\n\t    _switch: kw(\"switch\"),\n\t    _throw: kw(\"throw\", beforeExpr),\n\t    _try: kw(\"try\"),\n\t    _var: kw(\"var\"),\n\t    _const: kw(\"const\"),\n\t    _while: kw(\"while\", {isLoop: true}),\n\t    _with: kw(\"with\"),\n\t    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n\t    _this: kw(\"this\", startsExpr),\n\t    _super: kw(\"super\", startsExpr),\n\t    _class: kw(\"class\"),\n\t    _extends: kw(\"extends\", beforeExpr),\n\t    _export: kw(\"export\"),\n\t    _import: kw(\"import\"),\n\t    _null: kw(\"null\", startsExpr),\n\t    _true: kw(\"true\", startsExpr),\n\t    _false: kw(\"false\", startsExpr),\n\t    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n\t    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n\t    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n\t    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n\t    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n\t  }\n\t\n\t  // Matches a whole line break (where CRLF is considered a single\n\t  // line break). Used to count lines.\n\t\n\t  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\n\t  var lineBreakG = new RegExp(lineBreak.source, \"g\")\n\t\n\t  function isNewLine(code) {\n\t    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n\t  }\n\t\n\t  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\t\n\t  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\t\n\t  function isArray(obj) {\n\t    return Object.prototype.toString.call(obj) === \"[object Array]\"\n\t  }\n\t\n\t  // Checks if an object has a property.\n\t\n\t  function has(obj, propName) {\n\t    return Object.prototype.hasOwnProperty.call(obj, propName)\n\t  }\n\t\n\t  // These are used when `options.locations` is on, for the\n\t  // `startLoc` and `endLoc` properties.\n\t\n\t  var Position = function Position(line, col) {\n\t    this.line = line\n\t    this.column = col\n\t  };\n\t\n\t  Position.prototype.offset = function offset (n) {\n\t    return new Position(this.line, this.column + n)\n\t  };\n\t\n\t  var SourceLocation = function SourceLocation(p, start, end) {\n\t    this.start = start\n\t    this.end = end\n\t    if (p.sourceFile !== null) this.source = p.sourceFile\n\t  };\n\t\n\t  // The `getLineInfo` function is mostly useful when the\n\t  // `locations` option is off (for performance reasons) and you\n\t  // want to find the line/column position for a given character\n\t  // offset. `input` should be the code string that the offset refers\n\t  // into.\n\t\n\t  function getLineInfo(input, offset) {\n\t    for (var line = 1, cur = 0;;) {\n\t      lineBreakG.lastIndex = cur\n\t      var match = lineBreakG.exec(input)\n\t      if (match && match.index < offset) {\n\t        ++line\n\t        cur = match.index + match[0].length\n\t      } else {\n\t        return new Position(line, offset - cur)\n\t      }\n\t    }\n\t  }\n\t\n\t  // A second optional argument can be given to further configure\n\t  // the parser process. These options are recognized:\n\t\n\t  var defaultOptions = {\n\t    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n\t    // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n\t    // for strict mode, the set of reserved words, and support for\n\t    // new syntax features. The default is 7.\n\t    ecmaVersion: 7,\n\t    // `sourceType` indicates the mode the code should be parsed in.\n\t    // Can be either `\"script\"` or `\"module\"`. This influences global\n\t    // strict mode and parsing of `import` and `export` declarations.\n\t    sourceType: \"script\",\n\t    // `onInsertedSemicolon` can be a callback that will be called\n\t    // when a semicolon is automatically inserted. It will be passed\n\t    // th position of the comma as an offset, and if `locations` is\n\t    // enabled, it is given the location as a `{line, column}` object\n\t    // as second argument.\n\t    onInsertedSemicolon: null,\n\t    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n\t    // trailing commas.\n\t    onTrailingComma: null,\n\t    // By default, reserved words are only enforced if ecmaVersion >= 5.\n\t    // Set `allowReserved` to a boolean value to explicitly turn this on\n\t    // an off. When this option has the value \"never\", reserved words\n\t    // and keywords can also not be used as property names.\n\t    allowReserved: null,\n\t    // When enabled, a return at the top level is not considered an\n\t    // error.\n\t    allowReturnOutsideFunction: false,\n\t    // When enabled, import/export statements are not constrained to\n\t    // appearing at the top of the program.\n\t    allowImportExportEverywhere: false,\n\t    // When enabled, hashbang directive in the beginning of file\n\t    // is allowed and treated as a line comment.\n\t    allowHashBang: false,\n\t    // When `locations` is on, `loc` properties holding objects with\n\t    // `start` and `end` properties in `{line, column}` form (with\n\t    // line being 1-based and column 0-based) will be attached to the\n\t    // nodes.\n\t    locations: false,\n\t    // A function can be passed as `onToken` option, which will\n\t    // cause Acorn to call that function with object in the same\n\t    // format as tokens returned from `tokenizer().getToken()`. Note\n\t    // that you are not allowed to call the parser from the\n\t    // callback—that will corrupt its internal state.\n\t    onToken: null,\n\t    // A function can be passed as `onComment` option, which will\n\t    // cause Acorn to call that function with `(block, text, start,\n\t    // end)` parameters whenever a comment is skipped. `block` is a\n\t    // boolean indicating whether this is a block (`/* */`) comment,\n\t    // `text` is the content of the comment, and `start` and `end` are\n\t    // character offsets that denote the start and end of the comment.\n\t    // When the `locations` option is on, two more parameters are\n\t    // passed, the full `{line, column}` locations of the start and\n\t    // end of the comments. Note that you are not allowed to call the\n\t    // parser from the callback—that will corrupt its internal state.\n\t    onComment: null,\n\t    // Nodes have their start and end characters offsets recorded in\n\t    // `start` and `end` properties (directly on the node, rather than\n\t    // the `loc` object, which holds line/column data. To also add a\n\t    // [semi-standardized][range] `range` property holding a `[start,\n\t    // end]` array with the same numbers, set the `ranges` option to\n\t    // `true`.\n\t    //\n\t    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n\t    ranges: false,\n\t    // It is possible to parse multiple files into a single AST by\n\t    // passing the tree produced by parsing the first file as\n\t    // `program` option in subsequent parses. This will add the\n\t    // toplevel forms of the parsed file to the `Program` (top) node\n\t    // of an existing parse tree.\n\t    program: null,\n\t    // When `locations` is on, you can pass this to record the source\n\t    // file in every node's `loc` object.\n\t    sourceFile: null,\n\t    // This value, if given, is stored in every node, whether\n\t    // `locations` is on or off.\n\t    directSourceFile: null,\n\t    // When enabled, parenthesized expressions are represented by\n\t    // (non-standard) ParenthesizedExpression nodes\n\t    preserveParens: false,\n\t    plugins: {}\n\t  }\n\t\n\t  // Interpret and default an options object\n\t\n\t  function getOptions(opts) {\n\t    var options = {}\n\t\n\t    for (var opt in defaultOptions)\n\t      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n\t\n\t    if (options.ecmaVersion >= 2015)\n\t      options.ecmaVersion -= 2009\n\t\n\t    if (options.allowReserved == null)\n\t      options.allowReserved = options.ecmaVersion < 5\n\t\n\t    if (isArray(options.onToken)) {\n\t      var tokens = options.onToken\n\t      options.onToken = function (token) { return tokens.push(token); }\n\t    }\n\t    if (isArray(options.onComment))\n\t      options.onComment = pushComment(options, options.onComment)\n\t\n\t    return options\n\t  }\n\t\n\t  function pushComment(options, array) {\n\t    return function (block, text, start, end, startLoc, endLoc) {\n\t      var comment = {\n\t        type: block ? 'Block' : 'Line',\n\t        value: text,\n\t        start: start,\n\t        end: end\n\t      }\n\t      if (options.locations)\n\t        comment.loc = new SourceLocation(this, startLoc, endLoc)\n\t      if (options.ranges)\n\t        comment.range = [start, end]\n\t      array.push(comment)\n\t    }\n\t  }\n\t\n\t  // Registered plugins\n\t  var plugins = {}\n\t\n\t  function keywordRegexp(words) {\n\t    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n\t  }\n\t\n\t  var Parser = function Parser(options, input, startPos) {\n\t    this.options = options = getOptions(options)\n\t    this.sourceFile = options.sourceFile\n\t    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n\t    var reserved = \"\"\n\t    if (!options.allowReserved) {\n\t      for (var v = options.ecmaVersion;; v--)\n\t        if (reserved = reservedWords[v]) break\n\t      if (options.sourceType == \"module\") reserved += \" await\"\n\t    }\n\t    this.reservedWords = keywordRegexp(reserved)\n\t    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n\t    this.reservedWordsStrict = keywordRegexp(reservedStrict)\n\t    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n\t    this.input = String(input)\n\t\n\t    // Used to signal to callers of `readWord1` whether the word\n\t    // contained any escape sequences. This is needed because words with\n\t    // escape sequences must not be interpreted as keywords.\n\t    this.containsEsc = false\n\t\n\t    // Load plugins\n\t    this.loadPlugins(options.plugins)\n\t\n\t    // Set up token state\n\t\n\t    // The current position of the tokenizer in the input.\n\t    if (startPos) {\n\t      this.pos = startPos\n\t      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1\n\t      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n\t    } else {\n\t      this.pos = this.lineStart = 0\n\t      this.curLine = 1\n\t    }\n\t\n\t    // Properties of the current token:\n\t    // Its type\n\t    this.type = tt.eof\n\t    // For tokens that include more information than their type, the value\n\t    this.value = null\n\t    // Its start and end offset\n\t    this.start = this.end = this.pos\n\t    // And, if locations are used, the {line, column} object\n\t    // corresponding to those offsets\n\t    this.startLoc = this.endLoc = this.curPosition()\n\t\n\t    // Position information for the previous token\n\t    this.lastTokEndLoc = this.lastTokStartLoc = null\n\t    this.lastTokStart = this.lastTokEnd = this.pos\n\t\n\t    // The context stack is used to superficially track syntactic\n\t    // context to predict whether a regular expression is allowed in a\n\t    // given position.\n\t    this.context = this.initialContext()\n\t    this.exprAllowed = true\n\t\n\t    // Figure out if it's a module code.\n\t    this.strict = this.inModule = options.sourceType === \"module\"\n\t\n\t    // Used to signify the start of a potential arrow function\n\t    this.potentialArrowAt = -1\n\t\n\t    // Flags to track whether we are in a function, a generator, an async function.\n\t    this.inFunction = this.inGenerator = this.inAsync = false\n\t    // Positions to delayed-check that yield/await does not exist in default parameters.\n\t    this.yieldPos = this.awaitPos = 0\n\t    // Labels in scope.\n\t    this.labels = []\n\t\n\t    // If enabled, skip leading hashbang line.\n\t    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n\t      this.skipLineComment(2)\n\t  };\n\t\n\t  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\t  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\n\t  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\t\n\t  Parser.prototype.extend = function extend (name, f) {\n\t    this[name] = f(this[name])\n\t  };\n\t\n\t  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n\t      var this$1 = this;\n\t\n\t    for (var name in pluginConfigs) {\n\t      var plugin = plugins[name]\n\t      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n\t      plugin(this$1, pluginConfigs[name])\n\t    }\n\t  };\n\t\n\t  Parser.prototype.parse = function parse () {\n\t    var node = this.options.program || this.startNode()\n\t    this.nextToken()\n\t    return this.parseTopLevel(node)\n\t  };\n\t\n\t  var pp = Parser.prototype\n\t\n\t  // ## Parser utilities\n\t\n\t  // Test whether a statement node is the string literal `\"use strict\"`.\n\t\n\t  pp.isUseStrict = function(stmt) {\n\t    return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n\t      stmt.expression.type === \"Literal\" &&\n\t      stmt.expression.raw.slice(1, -1) === \"use strict\"\n\t  }\n\t\n\t  // Predicate that tests whether the next token is of the given\n\t  // type, and if yes, consumes it as a side effect.\n\t\n\t  pp.eat = function(type) {\n\t    if (this.type === type) {\n\t      this.next()\n\t      return true\n\t    } else {\n\t      return false\n\t    }\n\t  }\n\t\n\t  // Tests whether parsed token is a contextual keyword.\n\t\n\t  pp.isContextual = function(name) {\n\t    return this.type === tt.name && this.value === name\n\t  }\n\t\n\t  // Consumes contextual keyword if possible.\n\t\n\t  pp.eatContextual = function(name) {\n\t    return this.value === name && this.eat(tt.name)\n\t  }\n\t\n\t  // Asserts that following token is given contextual keyword.\n\t\n\t  pp.expectContextual = function(name) {\n\t    if (!this.eatContextual(name)) this.unexpected()\n\t  }\n\t\n\t  // Test whether a semicolon can be inserted at the current position.\n\t\n\t  pp.canInsertSemicolon = function() {\n\t    return this.type === tt.eof ||\n\t      this.type === tt.braceR ||\n\t      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n\t  }\n\t\n\t  pp.insertSemicolon = function() {\n\t    if (this.canInsertSemicolon()) {\n\t      if (this.options.onInsertedSemicolon)\n\t        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n\t      return true\n\t    }\n\t  }\n\t\n\t  // Consume a semicolon, or, failing that, see if we are allowed to\n\t  // pretend that there is a semicolon at this position.\n\t\n\t  pp.semicolon = function() {\n\t    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n\t  }\n\t\n\t  pp.afterTrailingComma = function(tokType, notNext) {\n\t    if (this.type == tokType) {\n\t      if (this.options.onTrailingComma)\n\t        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n\t      if (!notNext)\n\t        this.next()\n\t      return true\n\t    }\n\t  }\n\t\n\t  // Expect a token of a given type. If found, consume it, otherwise,\n\t  // raise an unexpected token error.\n\t\n\t  pp.expect = function(type) {\n\t    this.eat(type) || this.unexpected()\n\t  }\n\t\n\t  // Raise an unexpected token error.\n\t\n\t  pp.unexpected = function(pos) {\n\t    this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n\t  }\n\t\n\t  var DestructuringErrors = function DestructuringErrors() {\n\t    this.shorthandAssign = 0\n\t    this.trailingComma = 0\n\t  };\n\t\n\t  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n\t    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma\n\t    if (!andThrow) return !!trailing\n\t    if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\")\n\t  }\n\t\n\t  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n\t    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign\n\t    if (!andThrow) return !!pos\n\t    if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n\t  }\n\t\n\t  pp.checkYieldAwaitInDefaultParams = function() {\n\t    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n\t      this.raise(this.yieldPos, \"Yield expression cannot be a default value\")\n\t    if (this.awaitPos)\n\t      this.raise(this.awaitPos, \"Await expression cannot be a default value\")\n\t  }\n\t\n\t  var pp$1 = Parser.prototype\n\t\n\t  // ### Statement parsing\n\t\n\t  // Parse a program. Initializes the parser, reads any number of\n\t  // statements, and wraps them in a Program node.  Optionally takes a\n\t  // `program` argument.  If present, the statements will be appended\n\t  // to its body instead of creating a new node.\n\t\n\t  pp$1.parseTopLevel = function(node) {\n\t    var this$1 = this;\n\t\n\t    var first = true, exports = {}\n\t    if (!node.body) node.body = []\n\t    while (this.type !== tt.eof) {\n\t      var stmt = this$1.parseStatement(true, true, exports)\n\t      node.body.push(stmt)\n\t      if (first) {\n\t        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)\n\t        first = false\n\t      }\n\t    }\n\t    this.next()\n\t    if (this.options.ecmaVersion >= 6) {\n\t      node.sourceType = this.options.sourceType\n\t    }\n\t    return this.finishNode(node, \"Program\")\n\t  }\n\t\n\t  var loopLabel = {kind: \"loop\"};\n\t  var switchLabel = {kind: \"switch\"};\n\t  pp$1.isLet = function() {\n\t    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n\t    skipWhiteSpace.lastIndex = this.pos\n\t    var skip = skipWhiteSpace.exec(this.input)\n\t    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n\t    if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n\t    if (isIdentifierStart(nextCh, true)) {\n\t      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n\t      var ident = this.input.slice(next, pos)\n\t      if (!this.isKeyword(ident)) return true\n\t    }\n\t    return false\n\t  }\n\t\n\t  // check 'async [no LineTerminator here] function'\n\t  // - 'async /*foo*/ function' is OK.\n\t  // - 'async /*\\n*/ function' is invalid.\n\t  pp$1.isAsyncFunction = function() {\n\t    if (this.type !== tt.name || this.options.ecmaVersion < 8 || this.value != \"async\")\n\t      return false\n\t\n\t    skipWhiteSpace.lastIndex = this.pos\n\t    var skip = skipWhiteSpace.exec(this.input)\n\t    var next = this.pos + skip[0].length\n\t    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n\t      this.input.slice(next, next + 8) === \"function\" &&\n\t      (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n\t  }\n\t\n\t  // Parse a single statement.\n\t  //\n\t  // If expecting a statement and finding a slash operator, parse a\n\t  // regular expression literal. This is to handle cases like\n\t  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n\t  // does not help.\n\t\n\t  pp$1.parseStatement = function(declaration, topLevel, exports) {\n\t    var starttype = this.type, node = this.startNode(), kind\n\t\n\t    if (this.isLet()) {\n\t      starttype = tt._var\n\t      kind = \"let\"\n\t    }\n\t\n\t    // Most types of statements are recognized by the keyword they\n\t    // start with. Many are trivial to parse, some require a bit of\n\t    // complexity.\n\t\n\t    switch (starttype) {\n\t    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n\t    case tt._debugger: return this.parseDebuggerStatement(node)\n\t    case tt._do: return this.parseDoStatement(node)\n\t    case tt._for: return this.parseForStatement(node)\n\t    case tt._function:\n\t      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n\t      return this.parseFunctionStatement(node, false)\n\t    case tt._class:\n\t      if (!declaration) this.unexpected()\n\t      return this.parseClass(node, true)\n\t    case tt._if: return this.parseIfStatement(node)\n\t    case tt._return: return this.parseReturnStatement(node)\n\t    case tt._switch: return this.parseSwitchStatement(node)\n\t    case tt._throw: return this.parseThrowStatement(node)\n\t    case tt._try: return this.parseTryStatement(node)\n\t    case tt._const: case tt._var:\n\t      kind = kind || this.value\n\t      if (!declaration && kind != \"var\") this.unexpected()\n\t      return this.parseVarStatement(node, kind)\n\t    case tt._while: return this.parseWhileStatement(node)\n\t    case tt._with: return this.parseWithStatement(node)\n\t    case tt.braceL: return this.parseBlock()\n\t    case tt.semi: return this.parseEmptyStatement(node)\n\t    case tt._export:\n\t    case tt._import:\n\t      if (!this.options.allowImportExportEverywhere) {\n\t        if (!topLevel)\n\t          this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n\t        if (!this.inModule)\n\t          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n\t      }\n\t      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node, exports)\n\t\n\t      // If the statement does not start with a statement keyword or a\n\t      // brace, it's an ExpressionStatement or LabeledStatement. We\n\t      // simply start parsing an expression, and afterwards, if the\n\t      // next token is a colon and the expression was a simple\n\t      // Identifier node, we switch to interpreting it as a label.\n\t    default:\n\t      if (this.isAsyncFunction() && declaration) {\n\t        this.next()\n\t        return this.parseFunctionStatement(node, true)\n\t      }\n\t\n\t      var maybeName = this.value, expr = this.parseExpression()\n\t      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n\t        return this.parseLabeledStatement(node, maybeName, expr)\n\t      else return this.parseExpressionStatement(node, expr)\n\t    }\n\t  }\n\t\n\t  pp$1.parseBreakContinueStatement = function(node, keyword) {\n\t    var this$1 = this;\n\t\n\t    var isBreak = keyword == \"break\"\n\t    this.next()\n\t    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n\t    else if (this.type !== tt.name) this.unexpected()\n\t    else {\n\t      node.label = this.parseIdent()\n\t      this.semicolon()\n\t    }\n\t\n\t    // Verify that there is an actual destination to break or\n\t    // continue to.\n\t    for (var i = 0; i < this.labels.length; ++i) {\n\t      var lab = this$1.labels[i]\n\t      if (node.label == null || lab.name === node.label.name) {\n\t        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n\t        if (node.label && isBreak) break\n\t      }\n\t    }\n\t    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n\t    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\t  }\n\t\n\t  pp$1.parseDebuggerStatement = function(node) {\n\t    this.next()\n\t    this.semicolon()\n\t    return this.finishNode(node, \"DebuggerStatement\")\n\t  }\n\t\n\t  pp$1.parseDoStatement = function(node) {\n\t    this.next()\n\t    this.labels.push(loopLabel)\n\t    node.body = this.parseStatement(false)\n\t    this.labels.pop()\n\t    this.expect(tt._while)\n\t    node.test = this.parseParenExpression()\n\t    if (this.options.ecmaVersion >= 6)\n\t      this.eat(tt.semi)\n\t    else\n\t      this.semicolon()\n\t    return this.finishNode(node, \"DoWhileStatement\")\n\t  }\n\t\n\t  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n\t  // loop is non-trivial. Basically, we have to parse the init `var`\n\t  // statement or expression, disallowing the `in` operator (see\n\t  // the second parameter to `parseExpression`), and then check\n\t  // whether the next token is `in` or `of`. When there is no init\n\t  // part (semicolon immediately after the opening parenthesis), it\n\t  // is a regular `for` loop.\n\t\n\t  pp$1.parseForStatement = function(node) {\n\t    this.next()\n\t    this.labels.push(loopLabel)\n\t    this.expect(tt.parenL)\n\t    if (this.type === tt.semi) return this.parseFor(node, null)\n\t    var isLet = this.isLet()\n\t    if (this.type === tt._var || this.type === tt._const || isLet) {\n\t      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n\t      this.next()\n\t      this.parseVar(init$1, true, kind)\n\t      this.finishNode(init$1, \"VariableDeclaration\")\n\t      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n\t          !(kind !== \"var\" && init$1.declarations[0].init))\n\t        return this.parseForIn(node, init$1)\n\t      return this.parseFor(node, init$1)\n\t    }\n\t    var refDestructuringErrors = new DestructuringErrors\n\t    var init = this.parseExpression(true, refDestructuringErrors)\n\t    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n\t      this.checkPatternErrors(refDestructuringErrors, true)\n\t      this.toAssignable(init)\n\t      this.checkLVal(init)\n\t      return this.parseForIn(node, init)\n\t    } else {\n\t      this.checkExpressionErrors(refDestructuringErrors, true)\n\t    }\n\t    return this.parseFor(node, init)\n\t  }\n\t\n\t  pp$1.parseFunctionStatement = function(node, isAsync) {\n\t    this.next()\n\t    return this.parseFunction(node, true, false, isAsync)\n\t  }\n\t\n\t  pp$1.isFunction = function() {\n\t    return this.type === tt._function || this.isAsyncFunction()\n\t  }\n\t\n\t  pp$1.parseIfStatement = function(node) {\n\t    this.next()\n\t    node.test = this.parseParenExpression()\n\t    // allow function declarations in branches, but only in non-strict mode\n\t    node.consequent = this.parseStatement(!this.strict && this.isFunction())\n\t    node.alternate = this.eat(tt._else) ? this.parseStatement(!this.strict && this.isFunction()) : null\n\t    return this.finishNode(node, \"IfStatement\")\n\t  }\n\t\n\t  pp$1.parseReturnStatement = function(node) {\n\t    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n\t      this.raise(this.start, \"'return' outside of function\")\n\t    this.next()\n\t\n\t    // In `return` (and `break`/`continue`), the keywords with\n\t    // optional arguments, we eagerly look for a semicolon or the\n\t    // possibility to insert one.\n\t\n\t    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n\t    else { node.argument = this.parseExpression(); this.semicolon() }\n\t    return this.finishNode(node, \"ReturnStatement\")\n\t  }\n\t\n\t  pp$1.parseSwitchStatement = function(node) {\n\t    var this$1 = this;\n\t\n\t    this.next()\n\t    node.discriminant = this.parseParenExpression()\n\t    node.cases = []\n\t    this.expect(tt.braceL)\n\t    this.labels.push(switchLabel)\n\t\n\t    // Statements under must be grouped (by label) in SwitchCase\n\t    // nodes. `cur` is used to keep the node that we are currently\n\t    // adding statements to.\n\t\n\t    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n\t      if (this$1.type === tt._case || this$1.type === tt._default) {\n\t        var isCase = this$1.type === tt._case\n\t        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n\t        node.cases.push(cur = this$1.startNode())\n\t        cur.consequent = []\n\t        this$1.next()\n\t        if (isCase) {\n\t          cur.test = this$1.parseExpression()\n\t        } else {\n\t          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n\t          sawDefault = true\n\t          cur.test = null\n\t        }\n\t        this$1.expect(tt.colon)\n\t      } else {\n\t        if (!cur) this$1.unexpected()\n\t        cur.consequent.push(this$1.parseStatement(true))\n\t      }\n\t    }\n\t    if (cur) this.finishNode(cur, \"SwitchCase\")\n\t    this.next() // Closing brace\n\t    this.labels.pop()\n\t    return this.finishNode(node, \"SwitchStatement\")\n\t  }\n\t\n\t  pp$1.parseThrowStatement = function(node) {\n\t    this.next()\n\t    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n\t      this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n\t    node.argument = this.parseExpression()\n\t    this.semicolon()\n\t    return this.finishNode(node, \"ThrowStatement\")\n\t  }\n\t\n\t  // Reused empty array added for node fields that are always empty.\n\t\n\t  var empty = []\n\t\n\t  pp$1.parseTryStatement = function(node) {\n\t    this.next()\n\t    node.block = this.parseBlock()\n\t    node.handler = null\n\t    if (this.type === tt._catch) {\n\t      var clause = this.startNode()\n\t      this.next()\n\t      this.expect(tt.parenL)\n\t      clause.param = this.parseBindingAtom()\n\t      this.checkLVal(clause.param, true)\n\t      this.expect(tt.parenR)\n\t      clause.body = this.parseBlock()\n\t      node.handler = this.finishNode(clause, \"CatchClause\")\n\t    }\n\t    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n\t    if (!node.handler && !node.finalizer)\n\t      this.raise(node.start, \"Missing catch or finally clause\")\n\t    return this.finishNode(node, \"TryStatement\")\n\t  }\n\t\n\t  pp$1.parseVarStatement = function(node, kind) {\n\t    this.next()\n\t    this.parseVar(node, false, kind)\n\t    this.semicolon()\n\t    return this.finishNode(node, \"VariableDeclaration\")\n\t  }\n\t\n\t  pp$1.parseWhileStatement = function(node) {\n\t    this.next()\n\t    node.test = this.parseParenExpression()\n\t    this.labels.push(loopLabel)\n\t    node.body = this.parseStatement(false)\n\t    this.labels.pop()\n\t    return this.finishNode(node, \"WhileStatement\")\n\t  }\n\t\n\t  pp$1.parseWithStatement = function(node) {\n\t    if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n\t    this.next()\n\t    node.object = this.parseParenExpression()\n\t    node.body = this.parseStatement(false)\n\t    return this.finishNode(node, \"WithStatement\")\n\t  }\n\t\n\t  pp$1.parseEmptyStatement = function(node) {\n\t    this.next()\n\t    return this.finishNode(node, \"EmptyStatement\")\n\t  }\n\t\n\t  pp$1.parseLabeledStatement = function(node, maybeName, expr) {\n\t    var this$1 = this;\n\t\n\t    for (var i = 0; i < this.labels.length; ++i)\n\t      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n\t    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n\t    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n\t      var label = this$1.labels[i$1]\n\t      if (label.statementStart == node.start) {\n\t        label.statementStart = this$1.start\n\t        label.kind = kind\n\t      } else break\n\t    }\n\t    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n\t    node.body = this.parseStatement(true)\n\t    this.labels.pop()\n\t    node.label = expr\n\t    return this.finishNode(node, \"LabeledStatement\")\n\t  }\n\t\n\t  pp$1.parseExpressionStatement = function(node, expr) {\n\t    node.expression = expr\n\t    this.semicolon()\n\t    return this.finishNode(node, \"ExpressionStatement\")\n\t  }\n\t\n\t  // Parse a semicolon-enclosed block of statements, handling `\"use\n\t  // strict\"` declarations when `allowStrict` is true (used for\n\t  // function bodies).\n\t\n\t  pp$1.parseBlock = function(allowStrict) {\n\t    var this$1 = this;\n\t\n\t    var node = this.startNode(), first = true, oldStrict\n\t    node.body = []\n\t    this.expect(tt.braceL)\n\t    while (!this.eat(tt.braceR)) {\n\t      var stmt = this$1.parseStatement(true)\n\t      node.body.push(stmt)\n\t      if (first && allowStrict && this$1.isUseStrict(stmt)) {\n\t        oldStrict = this$1.strict\n\t        this$1.setStrict(this$1.strict = true)\n\t      }\n\t      first = false\n\t    }\n\t    if (oldStrict === false) this.setStrict(false)\n\t    return this.finishNode(node, \"BlockStatement\")\n\t  }\n\t\n\t  // Parse a regular `for` loop. The disambiguation code in\n\t  // `parseStatement` will already have parsed the init statement or\n\t  // expression.\n\t\n\t  pp$1.parseFor = function(node, init) {\n\t    node.init = init\n\t    this.expect(tt.semi)\n\t    node.test = this.type === tt.semi ? null : this.parseExpression()\n\t    this.expect(tt.semi)\n\t    node.update = this.type === tt.parenR ? null : this.parseExpression()\n\t    this.expect(tt.parenR)\n\t    node.body = this.parseStatement(false)\n\t    this.labels.pop()\n\t    return this.finishNode(node, \"ForStatement\")\n\t  }\n\t\n\t  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n\t  // same from parser's perspective.\n\t\n\t  pp$1.parseForIn = function(node, init) {\n\t    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n\t    this.next()\n\t    node.left = init\n\t    node.right = this.parseExpression()\n\t    this.expect(tt.parenR)\n\t    node.body = this.parseStatement(false)\n\t    this.labels.pop()\n\t    return this.finishNode(node, type)\n\t  }\n\t\n\t  // Parse a list of variable declarations.\n\t\n\t  pp$1.parseVar = function(node, isFor, kind) {\n\t    var this$1 = this;\n\t\n\t    node.declarations = []\n\t    node.kind = kind\n\t    for (;;) {\n\t      var decl = this$1.startNode()\n\t      this$1.parseVarId(decl)\n\t      if (this$1.eat(tt.eq)) {\n\t        decl.init = this$1.parseMaybeAssign(isFor)\n\t      } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n\t        this$1.unexpected()\n\t      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n\t        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n\t      } else {\n\t        decl.init = null\n\t      }\n\t      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n\t      if (!this$1.eat(tt.comma)) break\n\t    }\n\t    return node\n\t  }\n\t\n\t  pp$1.parseVarId = function(decl) {\n\t    decl.id = this.parseBindingAtom()\n\t    this.checkLVal(decl.id, true)\n\t  }\n\t\n\t  // Parse a function declaration or literal (depending on the\n\t  // `isStatement` parameter).\n\t\n\t  pp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n\t    this.initFunction(node)\n\t    if (this.options.ecmaVersion >= 6 && !isAsync)\n\t      node.generator = this.eat(tt.star)\n\t    if (this.options.ecmaVersion >= 8)\n\t      node.async = !!isAsync\n\t\n\t    if (isStatement)\n\t      node.id = this.parseIdent()\n\t\n\t    var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos\n\t    this.inGenerator = node.generator\n\t    this.inAsync = node.async\n\t    this.yieldPos = 0\n\t    this.awaitPos = 0\n\t\n\t    if (!isStatement && this.type === tt.name)\n\t      node.id = this.parseIdent()\n\t    this.parseFunctionParams(node)\n\t    this.parseFunctionBody(node, allowExpressionBody)\n\t\n\t    this.inGenerator = oldInGen\n\t    this.inAsync = oldInAsync\n\t    this.yieldPos = oldYieldPos\n\t    this.awaitPos = oldAwaitPos\n\t    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n\t  }\n\t\n\t  pp$1.parseFunctionParams = function(node) {\n\t    this.expect(tt.parenL)\n\t    node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8, true)\n\t    this.checkYieldAwaitInDefaultParams()\n\t  }\n\t\n\t  // Parse a class declaration or literal (depending on the\n\t  // `isStatement` parameter).\n\t\n\t  pp$1.parseClass = function(node, isStatement) {\n\t    var this$1 = this;\n\t\n\t    this.next()\n\t    this.parseClassId(node, isStatement)\n\t    this.parseClassSuper(node)\n\t    var classBody = this.startNode()\n\t    var hadConstructor = false\n\t    classBody.body = []\n\t    this.expect(tt.braceL)\n\t    while (!this.eat(tt.braceR)) {\n\t      if (this$1.eat(tt.semi)) continue\n\t      var method = this$1.startNode()\n\t      var isGenerator = this$1.eat(tt.star)\n\t      var isAsync = false\n\t      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n\t      this$1.parsePropertyName(method)\n\t      method.static = isMaybeStatic && this$1.type !== tt.parenL\n\t      if (method.static) {\n\t        if (isGenerator) this$1.unexpected()\n\t        isGenerator = this$1.eat(tt.star)\n\t        this$1.parsePropertyName(method)\n\t      }\n\t      if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed &&\n\t          method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.type !== tt.parenL &&\n\t          !this$1.canInsertSemicolon()) {\n\t        isAsync = true\n\t        this$1.parsePropertyName(method)\n\t      }\n\t      method.kind = \"method\"\n\t      var isGetSet = false\n\t      if (!method.computed) {\n\t        var key = method.key;\n\t        if (!isGenerator && !isAsync && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n\t          isGetSet = true\n\t          method.kind = key.name\n\t          key = this$1.parsePropertyName(method)\n\t        }\n\t        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n\t            key.type === \"Literal\" && key.value === \"constructor\")) {\n\t          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n\t          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n\t          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n\t          if (isAsync) this$1.raise(key.start, \"Constructor can't be an async method\")\n\t          method.kind = \"constructor\"\n\t          hadConstructor = true\n\t        }\n\t      }\n\t      this$1.parseClassMethod(classBody, method, isGenerator, isAsync)\n\t      if (isGetSet) {\n\t        var paramCount = method.kind === \"get\" ? 0 : 1\n\t        if (method.value.params.length !== paramCount) {\n\t          var start = method.value.start\n\t          if (method.kind === \"get\")\n\t            this$1.raiseRecoverable(start, \"getter should have no params\")\n\t          else\n\t            this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n\t        } else {\n\t          if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n\t            this$1.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\")\n\t        }\n\t      }\n\t    }\n\t    node.body = this.finishNode(classBody, \"ClassBody\")\n\t    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n\t  }\n\t\n\t  pp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n\t    method.value = this.parseMethod(isGenerator, isAsync)\n\t    classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n\t  }\n\t\n\t  pp$1.parseClassId = function(node, isStatement) {\n\t    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n\t  }\n\t\n\t  pp$1.parseClassSuper = function(node) {\n\t    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n\t  }\n\t\n\t  // Parses module export declaration.\n\t\n\t  pp$1.parseExport = function(node, exports) {\n\t    var this$1 = this;\n\t\n\t    this.next()\n\t    // export * from '...'\n\t    if (this.eat(tt.star)) {\n\t      this.expectContextual(\"from\")\n\t      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n\t      this.semicolon()\n\t      return this.finishNode(node, \"ExportAllDeclaration\")\n\t    }\n\t    if (this.eat(tt._default)) { // export default ...\n\t      this.checkExport(exports, \"default\", this.lastTokStart)\n\t      var parens = this.type == tt.parenL\n\t      var expr = this.parseMaybeAssign()\n\t      var needsSemi = true\n\t      if (!parens && (expr.type == \"FunctionExpression\" ||\n\t                      expr.type == \"ClassExpression\")) {\n\t        needsSemi = false\n\t        if (expr.id) {\n\t          expr.type = expr.type == \"FunctionExpression\"\n\t            ? \"FunctionDeclaration\"\n\t            : \"ClassDeclaration\"\n\t        }\n\t      }\n\t      node.declaration = expr\n\t      if (needsSemi) this.semicolon()\n\t      return this.finishNode(node, \"ExportDefaultDeclaration\")\n\t    }\n\t    // export var|const|let|function|class ...\n\t    if (this.shouldParseExportStatement()) {\n\t      node.declaration = this.parseStatement(true)\n\t      if (node.declaration.type === \"VariableDeclaration\")\n\t        this.checkVariableExport(exports, node.declaration.declarations)\n\t      else\n\t        this.checkExport(exports, node.declaration.id.name, node.declaration.id.start)\n\t      node.specifiers = []\n\t      node.source = null\n\t    } else { // export { x, y as z } [from '...']\n\t      node.declaration = null\n\t      node.specifiers = this.parseExportSpecifiers(exports)\n\t      if (this.eatContextual(\"from\")) {\n\t        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n\t      } else {\n\t        // check for keywords used as local names\n\t        for (var i = 0; i < node.specifiers.length; i++) {\n\t          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n\t            this$1.unexpected(node.specifiers[i].local.start)\n\t          }\n\t        }\n\t\n\t        node.source = null\n\t      }\n\t      this.semicolon()\n\t    }\n\t    return this.finishNode(node, \"ExportNamedDeclaration\")\n\t  }\n\t\n\t  pp$1.checkExport = function(exports, name, pos) {\n\t    if (!exports) return\n\t    if (Object.prototype.hasOwnProperty.call(exports, name))\n\t      this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\")\n\t    exports[name] = true\n\t  }\n\t\n\t  pp$1.checkPatternExport = function(exports, pat) {\n\t    var this$1 = this;\n\t\n\t    var type = pat.type\n\t    if (type == \"Identifier\")\n\t      this.checkExport(exports, pat.name, pat.start)\n\t    else if (type == \"ObjectPattern\")\n\t      for (var i = 0; i < pat.properties.length; ++i)\n\t        this$1.checkPatternExport(exports, pat.properties[i].value)\n\t    else if (type == \"ArrayPattern\")\n\t      for (var i$1 = 0; i$1 < pat.elements.length; ++i$1) {\n\t        var elt = pat.elements[i$1]\n\t        if (elt) this$1.checkPatternExport(exports, elt)\n\t      }\n\t    else if (type == \"AssignmentPattern\")\n\t      this.checkPatternExport(exports, pat.left)\n\t    else if (type == \"ParenthesizedExpression\")\n\t      this.checkPatternExport(exports, pat.expression)\n\t  }\n\t\n\t  pp$1.checkVariableExport = function(exports, decls) {\n\t    var this$1 = this;\n\t\n\t    if (!exports) return\n\t    for (var i = 0; i < decls.length; i++)\n\t      this$1.checkPatternExport(exports, decls[i].id)\n\t  }\n\t\n\t  pp$1.shouldParseExportStatement = function() {\n\t    return this.type.keyword || this.isLet() || this.isAsyncFunction()\n\t  }\n\t\n\t  // Parses a comma-separated list of module exports.\n\t\n\t  pp$1.parseExportSpecifiers = function(exports) {\n\t    var this$1 = this;\n\t\n\t    var nodes = [], first = true\n\t    // export { x, y as z } [from '...']\n\t    this.expect(tt.braceL)\n\t    while (!this.eat(tt.braceR)) {\n\t      if (!first) {\n\t        this$1.expect(tt.comma)\n\t        if (this$1.afterTrailingComma(tt.braceR)) break\n\t      } else first = false\n\t\n\t      var node = this$1.startNode()\n\t      node.local = this$1.parseIdent(this$1.type === tt._default)\n\t      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n\t      this$1.checkExport(exports, node.exported.name, node.exported.start)\n\t      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n\t    }\n\t    return nodes\n\t  }\n\t\n\t  // Parses import declaration.\n\t\n\t  pp$1.parseImport = function(node) {\n\t    this.next()\n\t    // import '...'\n\t    if (this.type === tt.string) {\n\t      node.specifiers = empty\n\t      node.source = this.parseExprAtom()\n\t    } else {\n\t      node.specifiers = this.parseImportSpecifiers()\n\t      this.expectContextual(\"from\")\n\t      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n\t    }\n\t    this.semicolon()\n\t    return this.finishNode(node, \"ImportDeclaration\")\n\t  }\n\t\n\t  // Parses a comma-separated list of module imports.\n\t\n\t  pp$1.parseImportSpecifiers = function() {\n\t    var this$1 = this;\n\t\n\t    var nodes = [], first = true\n\t    if (this.type === tt.name) {\n\t      // import defaultObj, { x, y as z } from '...'\n\t      var node = this.startNode()\n\t      node.local = this.parseIdent()\n\t      this.checkLVal(node.local, true)\n\t      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n\t      if (!this.eat(tt.comma)) return nodes\n\t    }\n\t    if (this.type === tt.star) {\n\t      var node$1 = this.startNode()\n\t      this.next()\n\t      this.expectContextual(\"as\")\n\t      node$1.local = this.parseIdent()\n\t      this.checkLVal(node$1.local, true)\n\t      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n\t      return nodes\n\t    }\n\t    this.expect(tt.braceL)\n\t    while (!this.eat(tt.braceR)) {\n\t      if (!first) {\n\t        this$1.expect(tt.comma)\n\t        if (this$1.afterTrailingComma(tt.braceR)) break\n\t      } else first = false\n\t\n\t      var node$2 = this$1.startNode()\n\t      node$2.imported = this$1.parseIdent(true)\n\t      if (this$1.eatContextual(\"as\")) {\n\t        node$2.local = this$1.parseIdent()\n\t      } else {\n\t        node$2.local = node$2.imported\n\t        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n\t        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raiseRecoverable(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n\t      }\n\t      this$1.checkLVal(node$2.local, true)\n\t      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n\t    }\n\t    return nodes\n\t  }\n\t\n\t  var pp$2 = Parser.prototype\n\t\n\t  // Convert existing expression atom to assignable pattern\n\t  // if possible.\n\t\n\t  pp$2.toAssignable = function(node, isBinding) {\n\t    var this$1 = this;\n\t\n\t    if (this.options.ecmaVersion >= 6 && node) {\n\t      switch (node.type) {\n\t        case \"Identifier\":\n\t        if (this.inAsync && node.name === \"await\")\n\t          this.raise(node.start, \"Can not use 'await' as identifier inside an async function\")\n\t        break\n\t\n\t      case \"ObjectPattern\":\n\t      case \"ArrayPattern\":\n\t        break\n\t\n\t      case \"ObjectExpression\":\n\t        node.type = \"ObjectPattern\"\n\t        for (var i = 0; i < node.properties.length; i++) {\n\t          var prop = node.properties[i]\n\t          if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n\t          this$1.toAssignable(prop.value, isBinding)\n\t        }\n\t        break\n\t\n\t      case \"ArrayExpression\":\n\t        node.type = \"ArrayPattern\"\n\t        this.toAssignableList(node.elements, isBinding)\n\t        break\n\t\n\t      case \"AssignmentExpression\":\n\t        if (node.operator === \"=\") {\n\t          node.type = \"AssignmentPattern\"\n\t          delete node.operator\n\t          this.toAssignable(node.left, isBinding)\n\t          // falls through to AssignmentPattern\n\t        } else {\n\t          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n\t          break\n\t        }\n\t\n\t      case \"AssignmentPattern\":\n\t        break\n\t\n\t      case \"ParenthesizedExpression\":\n\t        node.expression = this.toAssignable(node.expression, isBinding)\n\t        break\n\t\n\t      case \"MemberExpression\":\n\t        if (!isBinding) break\n\t\n\t      default:\n\t        this.raise(node.start, \"Assigning to rvalue\")\n\t      }\n\t    }\n\t    return node\n\t  }\n\t\n\t  // Convert list of expression atoms to binding list.\n\t\n\t  pp$2.toAssignableList = function(exprList, isBinding) {\n\t    var this$1 = this;\n\t\n\t    var end = exprList.length\n\t    if (end) {\n\t      var last = exprList[end - 1]\n\t      if (last && last.type == \"RestElement\") {\n\t        --end\n\t      } else if (last && last.type == \"SpreadElement\") {\n\t        last.type = \"RestElement\"\n\t        var arg = last.argument\n\t        this.toAssignable(arg, isBinding)\n\t        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n\t          this.unexpected(arg.start)\n\t        --end\n\t      }\n\t\n\t      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n\t        this.unexpected(last.argument.start)\n\t    }\n\t    for (var i = 0; i < end; i++) {\n\t      var elt = exprList[i]\n\t      if (elt) this$1.toAssignable(elt, isBinding)\n\t    }\n\t    return exprList\n\t  }\n\t\n\t  // Parses spread element.\n\t\n\t  pp$2.parseSpread = function(refDestructuringErrors) {\n\t    var node = this.startNode()\n\t    this.next()\n\t    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n\t    return this.finishNode(node, \"SpreadElement\")\n\t  }\n\t\n\t  pp$2.parseRest = function(allowNonIdent) {\n\t    var node = this.startNode()\n\t    this.next()\n\t\n\t    // RestElement inside of a function parameter must be an identifier\n\t    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n\t    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\t\n\t    return this.finishNode(node, \"RestElement\")\n\t  }\n\t\n\t  // Parses lvalue (assignable) atom.\n\t\n\t  pp$2.parseBindingAtom = function() {\n\t    if (this.options.ecmaVersion < 6) return this.parseIdent()\n\t    switch (this.type) {\n\t    case tt.name:\n\t      return this.parseIdent()\n\t\n\t    case tt.bracketL:\n\t      var node = this.startNode()\n\t      this.next()\n\t      node.elements = this.parseBindingList(tt.bracketR, true, true)\n\t      return this.finishNode(node, \"ArrayPattern\")\n\t\n\t    case tt.braceL:\n\t      return this.parseObj(true)\n\t\n\t    default:\n\t      this.unexpected()\n\t    }\n\t  }\n\t\n\t  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n\t    var this$1 = this;\n\t\n\t    var elts = [], first = true\n\t    while (!this.eat(close)) {\n\t      if (first) first = false\n\t      else this$1.expect(tt.comma)\n\t      if (allowEmpty && this$1.type === tt.comma) {\n\t        elts.push(null)\n\t      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n\t        break\n\t      } else if (this$1.type === tt.ellipsis) {\n\t        var rest = this$1.parseRest(allowNonIdent)\n\t        this$1.parseBindingListItem(rest)\n\t        elts.push(rest)\n\t        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n\t        this$1.expect(close)\n\t        break\n\t      } else {\n\t        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n\t        this$1.parseBindingListItem(elem)\n\t        elts.push(elem)\n\t      }\n\t    }\n\t    return elts\n\t  }\n\t\n\t  pp$2.parseBindingListItem = function(param) {\n\t    return param\n\t  }\n\t\n\t  // Parses assignment pattern around given atom if possible.\n\t\n\t  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n\t    left = left || this.parseBindingAtom()\n\t    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n\t    var node = this.startNodeAt(startPos, startLoc)\n\t    node.left = left\n\t    node.right = this.parseMaybeAssign()\n\t    return this.finishNode(node, \"AssignmentPattern\")\n\t  }\n\t\n\t  // Verify that a node is an lval — something that can be assigned\n\t  // to.\n\t\n\t  pp$2.checkLVal = function(expr, isBinding, checkClashes) {\n\t    var this$1 = this;\n\t\n\t    switch (expr.type) {\n\t    case \"Identifier\":\n\t      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n\t        this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n\t      if (checkClashes) {\n\t        if (has(checkClashes, expr.name))\n\t          this.raiseRecoverable(expr.start, \"Argument name clash\")\n\t        checkClashes[expr.name] = true\n\t      }\n\t      break\n\t\n\t    case \"MemberExpression\":\n\t      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n\t      break\n\t\n\t    case \"ObjectPattern\":\n\t      for (var i = 0; i < expr.properties.length; i++)\n\t        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n\t      break\n\t\n\t    case \"ArrayPattern\":\n\t      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n\t        var elem = expr.elements[i$1]\n\t        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n\t      }\n\t      break\n\t\n\t    case \"AssignmentPattern\":\n\t      this.checkLVal(expr.left, isBinding, checkClashes)\n\t      break\n\t\n\t    case \"RestElement\":\n\t      this.checkLVal(expr.argument, isBinding, checkClashes)\n\t      break\n\t\n\t    case \"ParenthesizedExpression\":\n\t      this.checkLVal(expr.expression, isBinding, checkClashes)\n\t      break\n\t\n\t    default:\n\t      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n\t    }\n\t  }\n\t\n\t  var pp$3 = Parser.prototype\n\t\n\t  // Check if property name clashes with already added.\n\t  // Object/class getters and setters are not allowed to clash —\n\t  // either with each other or with an init property — and in\n\t  // strict mode, init properties are also not allowed to be repeated.\n\t\n\t  pp$3.checkPropClash = function(prop, propHash) {\n\t    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n\t      return\n\t    var key = prop.key;\n\t    var name\n\t    switch (key.type) {\n\t    case \"Identifier\": name = key.name; break\n\t    case \"Literal\": name = String(key.value); break\n\t    default: return\n\t    }\n\t    var kind = prop.kind;\n\t    if (this.options.ecmaVersion >= 6) {\n\t      if (name === \"__proto__\" && kind === \"init\") {\n\t        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n\t        propHash.proto = true\n\t      }\n\t      return\n\t    }\n\t    name = \"$\" + name\n\t    var other = propHash[name]\n\t    if (other) {\n\t      var isGetSet = kind !== \"init\"\n\t      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n\t        this.raiseRecoverable(key.start, \"Redefinition of property\")\n\t    } else {\n\t      other = propHash[name] = {\n\t        init: false,\n\t        get: false,\n\t        set: false\n\t      }\n\t    }\n\t    other[kind] = true\n\t  }\n\t\n\t  // ### Expression parsing\n\t\n\t  // These nest, from the most general expression type at the top to\n\t  // 'atomic', nondivisible expression types at the bottom. Most of\n\t  // the functions will simply let the function(s) below them parse,\n\t  // and, *if* the syntactic construct they handle is present, wrap\n\t  // the AST node that the inner parser gave them in another node.\n\t\n\t  // Parse a full expression. The optional arguments are used to\n\t  // forbid the `in` operator (in for loops initalization expressions)\n\t  // and provide reference for storing '=' operator inside shorthand\n\t  // property assignment in contexts where both object expression\n\t  // and object pattern might appear (so it's possible to raise\n\t  // delayed syntax error at correct position).\n\t\n\t  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n\t    var this$1 = this;\n\t\n\t    var startPos = this.start, startLoc = this.startLoc\n\t    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n\t    if (this.type === tt.comma) {\n\t      var node = this.startNodeAt(startPos, startLoc)\n\t      node.expressions = [expr]\n\t      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n\t      return this.finishNode(node, \"SequenceExpression\")\n\t    }\n\t    return expr\n\t  }\n\t\n\t  // Parse an assignment expression. This includes applications of\n\t  // operators like `+=`.\n\t\n\t  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n\t    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\t\n\t    var ownDestructuringErrors = false\n\t    if (!refDestructuringErrors) {\n\t      refDestructuringErrors = new DestructuringErrors\n\t      ownDestructuringErrors = true\n\t    }\n\t    var startPos = this.start, startLoc = this.startLoc\n\t    if (this.type == tt.parenL || this.type == tt.name)\n\t      this.potentialArrowAt = this.start\n\t    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n\t    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n\t    if (this.type.isAssign) {\n\t      this.checkPatternErrors(refDestructuringErrors, true)\n\t      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n\t      var node = this.startNodeAt(startPos, startLoc)\n\t      node.operator = this.value\n\t      node.left = this.type === tt.eq ? this.toAssignable(left) : left\n\t      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly\n\t      this.checkLVal(left)\n\t      this.next()\n\t      node.right = this.parseMaybeAssign(noIn)\n\t      return this.finishNode(node, \"AssignmentExpression\")\n\t    } else {\n\t      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n\t    }\n\t    return left\n\t  }\n\t\n\t  // Parse a ternary conditional (`?:`) operator.\n\t\n\t  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n\t    var startPos = this.start, startLoc = this.startLoc\n\t    var expr = this.parseExprOps(noIn, refDestructuringErrors)\n\t    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n\t    if (this.eat(tt.question)) {\n\t      var node = this.startNodeAt(startPos, startLoc)\n\t      node.test = expr\n\t      node.consequent = this.parseMaybeAssign()\n\t      this.expect(tt.colon)\n\t      node.alternate = this.parseMaybeAssign(noIn)\n\t      return this.finishNode(node, \"ConditionalExpression\")\n\t    }\n\t    return expr\n\t  }\n\t\n\t  // Start the precedence parser.\n\t\n\t  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n\t    var startPos = this.start, startLoc = this.startLoc\n\t    var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n\t    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n\t    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n\t  }\n\t\n\t  // Parse binary operators with the operator precedence parsing\n\t  // algorithm. `left` is the left-hand side of the operator.\n\t  // `minPrec` provides context that allows the function to stop and\n\t  // defer further parser to one of its callers when it encounters an\n\t  // operator that has a lower precedence than the set it is parsing.\n\t\n\t  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n\t    var prec = this.type.binop\n\t    if (prec != null && (!noIn || this.type !== tt._in)) {\n\t      if (prec > minPrec) {\n\t        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n\t        var op = this.value\n\t        this.next()\n\t        var startPos = this.start, startLoc = this.startLoc\n\t        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n\t        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n\t        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n\t      }\n\t    }\n\t    return left\n\t  }\n\t\n\t  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n\t    var node = this.startNodeAt(startPos, startLoc)\n\t    node.left = left\n\t    node.operator = op\n\t    node.right = right\n\t    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n\t  }\n\t\n\t  // Parse unary operators, both prefix and postfix.\n\t\n\t  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n\t    var this$1 = this;\n\t\n\t    var startPos = this.start, startLoc = this.startLoc, expr\n\t    if (this.inAsync && this.isContextual(\"await\")) {\n\t      expr = this.parseAwait(refDestructuringErrors)\n\t      sawUnary = true\n\t    } else if (this.type.prefix) {\n\t      var node = this.startNode(), update = this.type === tt.incDec\n\t      node.operator = this.value\n\t      node.prefix = true\n\t      this.next()\n\t      node.argument = this.parseMaybeUnary(null, true)\n\t      this.checkExpressionErrors(refDestructuringErrors, true)\n\t      if (update) this.checkLVal(node.argument)\n\t      else if (this.strict && node.operator === \"delete\" &&\n\t               node.argument.type === \"Identifier\")\n\t        this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n\t      else sawUnary = true\n\t      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n\t    } else {\n\t      expr = this.parseExprSubscripts(refDestructuringErrors)\n\t      if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n\t      while (this.type.postfix && !this.canInsertSemicolon()) {\n\t        var node$1 = this$1.startNodeAt(startPos, startLoc)\n\t        node$1.operator = this$1.value\n\t        node$1.prefix = false\n\t        node$1.argument = expr\n\t        this$1.checkLVal(expr)\n\t        this$1.next()\n\t        expr = this$1.finishNode(node$1, \"UpdateExpression\")\n\t      }\n\t    }\n\t\n\t    if (!sawUnary && this.eat(tt.starstar))\n\t      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n\t    else\n\t      return expr\n\t  }\n\t\n\t  // Parse call, dot, and `[]`-subscript expressions.\n\t\n\t  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n\t    var startPos = this.start, startLoc = this.startLoc\n\t    var expr = this.parseExprAtom(refDestructuringErrors)\n\t    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n\t    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n\t    return this.parseSubscripts(expr, startPos, startLoc)\n\t  }\n\t\n\t  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n\t    var this$1 = this;\n\t\n\t    for (;;) {\n\t      var maybeAsyncArrow = this$1.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && !this$1.canInsertSemicolon()\n\t      if (this$1.eat(tt.dot)) {\n\t        var node = this$1.startNodeAt(startPos, startLoc)\n\t        node.object = base\n\t        node.property = this$1.parseIdent(true)\n\t        node.computed = false\n\t        base = this$1.finishNode(node, \"MemberExpression\")\n\t      } else if (this$1.eat(tt.bracketL)) {\n\t        var node$1 = this$1.startNodeAt(startPos, startLoc)\n\t        node$1.object = base\n\t        node$1.property = this$1.parseExpression()\n\t        node$1.computed = true\n\t        this$1.expect(tt.bracketR)\n\t        base = this$1.finishNode(node$1, \"MemberExpression\")\n\t      } else if (!noCalls && this$1.eat(tt.parenL)) {\n\t        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos\n\t        this$1.yieldPos = 0\n\t        this$1.awaitPos = 0\n\t        var exprList = this$1.parseExprList(tt.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors)\n\t        if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(tt.arrow)) {\n\t          this$1.checkPatternErrors(refDestructuringErrors, true)\n\t          this$1.checkYieldAwaitInDefaultParams()\n\t          this$1.yieldPos = oldYieldPos\n\t          this$1.awaitPos = oldAwaitPos\n\t          return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n\t        }\n\t        this$1.checkExpressionErrors(refDestructuringErrors, true)\n\t        this$1.yieldPos = oldYieldPos || this$1.yieldPos\n\t        this$1.awaitPos = oldAwaitPos || this$1.awaitPos\n\t        var node$2 = this$1.startNodeAt(startPos, startLoc)\n\t        node$2.callee = base\n\t        node$2.arguments = exprList\n\t        base = this$1.finishNode(node$2, \"CallExpression\")\n\t      } else if (this$1.type === tt.backQuote) {\n\t        var node$3 = this$1.startNodeAt(startPos, startLoc)\n\t        node$3.tag = base\n\t        node$3.quasi = this$1.parseTemplate()\n\t        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n\t      } else {\n\t        return base\n\t      }\n\t    }\n\t  }\n\t\n\t  // Parse an atomic expression — either a single token that is an\n\t  // expression, an expression started by a keyword like `function` or\n\t  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n\t  // or `{}`.\n\t\n\t  pp$3.parseExprAtom = function(refDestructuringErrors) {\n\t    var node, canBeArrow = this.potentialArrowAt == this.start\n\t    switch (this.type) {\n\t    case tt._super:\n\t      if (!this.inFunction)\n\t        this.raise(this.start, \"'super' outside of function or class\")\n\t\n\t    case tt._this:\n\t      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n\t      node = this.startNode()\n\t      this.next()\n\t      return this.finishNode(node, type)\n\t\n\t    case tt.name:\n\t      var startPos = this.start, startLoc = this.startLoc\n\t      var id = this.parseIdent(this.type !== tt.name)\n\t      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(tt._function))\n\t        return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true)\n\t      if (canBeArrow && !this.canInsertSemicolon()) {\n\t        if (this.eat(tt.arrow))\n\t          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false)\n\t        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === tt.name) {\n\t          id = this.parseIdent()\n\t          if (this.canInsertSemicolon() || !this.eat(tt.arrow))\n\t            this.unexpected()\n\t          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n\t        }\n\t      }\n\t      return id\n\t\n\t    case tt.regexp:\n\t      var value = this.value\n\t      node = this.parseLiteral(value.value)\n\t      node.regex = {pattern: value.pattern, flags: value.flags}\n\t      return node\n\t\n\t    case tt.num: case tt.string:\n\t      return this.parseLiteral(this.value)\n\t\n\t    case tt._null: case tt._true: case tt._false:\n\t      node = this.startNode()\n\t      node.value = this.type === tt._null ? null : this.type === tt._true\n\t      node.raw = this.type.keyword\n\t      this.next()\n\t      return this.finishNode(node, \"Literal\")\n\t\n\t    case tt.parenL:\n\t      return this.parseParenAndDistinguishExpression(canBeArrow)\n\t\n\t    case tt.bracketL:\n\t      node = this.startNode()\n\t      this.next()\n\t      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n\t      return this.finishNode(node, \"ArrayExpression\")\n\t\n\t    case tt.braceL:\n\t      return this.parseObj(false, refDestructuringErrors)\n\t\n\t    case tt._function:\n\t      node = this.startNode()\n\t      this.next()\n\t      return this.parseFunction(node, false)\n\t\n\t    case tt._class:\n\t      return this.parseClass(this.startNode(), false)\n\t\n\t    case tt._new:\n\t      return this.parseNew()\n\t\n\t    case tt.backQuote:\n\t      return this.parseTemplate()\n\t\n\t    default:\n\t      this.unexpected()\n\t    }\n\t  }\n\t\n\t  pp$3.parseLiteral = function(value) {\n\t    var node = this.startNode()\n\t    node.value = value\n\t    node.raw = this.input.slice(this.start, this.end)\n\t    this.next()\n\t    return this.finishNode(node, \"Literal\")\n\t  }\n\t\n\t  pp$3.parseParenExpression = function() {\n\t    this.expect(tt.parenL)\n\t    var val = this.parseExpression()\n\t    this.expect(tt.parenR)\n\t    return val\n\t  }\n\t\n\t  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n\t    var this$1 = this;\n\t\n\t    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8\n\t    if (this.options.ecmaVersion >= 6) {\n\t      this.next()\n\t\n\t      var innerStartPos = this.start, innerStartLoc = this.startLoc\n\t      var exprList = [], first = true, lastIsComma = false\n\t      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart, innerParenStart\n\t      this.yieldPos = 0\n\t      this.awaitPos = 0\n\t      while (this.type !== tt.parenR) {\n\t        first ? first = false : this$1.expect(tt.comma)\n\t        if (allowTrailingComma && this$1.afterTrailingComma(tt.parenR, true)) {\n\t          lastIsComma = true\n\t          break\n\t        } else if (this$1.type === tt.ellipsis) {\n\t          spreadStart = this$1.start\n\t          exprList.push(this$1.parseParenItem(this$1.parseRest()))\n\t          if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n\t          break\n\t        } else {\n\t          if (this$1.type === tt.parenL && !innerParenStart) {\n\t            innerParenStart = this$1.start\n\t          }\n\t          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n\t        }\n\t      }\n\t      var innerEndPos = this.start, innerEndLoc = this.startLoc\n\t      this.expect(tt.parenR)\n\t\n\t      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n\t        this.checkPatternErrors(refDestructuringErrors, true)\n\t        this.checkYieldAwaitInDefaultParams()\n\t        if (innerParenStart) this.unexpected(innerParenStart)\n\t        this.yieldPos = oldYieldPos\n\t        this.awaitPos = oldAwaitPos\n\t        return this.parseParenArrowList(startPos, startLoc, exprList)\n\t      }\n\t\n\t      if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart)\n\t      if (spreadStart) this.unexpected(spreadStart)\n\t      this.checkExpressionErrors(refDestructuringErrors, true)\n\t      this.yieldPos = oldYieldPos || this.yieldPos\n\t      this.awaitPos = oldAwaitPos || this.awaitPos\n\t\n\t      if (exprList.length > 1) {\n\t        val = this.startNodeAt(innerStartPos, innerStartLoc)\n\t        val.expressions = exprList\n\t        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n\t      } else {\n\t        val = exprList[0]\n\t      }\n\t    } else {\n\t      val = this.parseParenExpression()\n\t    }\n\t\n\t    if (this.options.preserveParens) {\n\t      var par = this.startNodeAt(startPos, startLoc)\n\t      par.expression = val\n\t      return this.finishNode(par, \"ParenthesizedExpression\")\n\t    } else {\n\t      return val\n\t    }\n\t  }\n\t\n\t  pp$3.parseParenItem = function(item) {\n\t    return item\n\t  }\n\t\n\t  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n\t    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n\t  }\n\t\n\t  // New's precedence is slightly tricky. It must allow its argument to\n\t  // be a `[]` or dot subscript expression, but not a call — at least,\n\t  // not without wrapping it in parentheses. Thus, it uses the noCalls\n\t  // argument to parseSubscripts to prevent it from consuming the\n\t  // argument list.\n\t\n\t  var empty$1 = []\n\t\n\t  pp$3.parseNew = function() {\n\t    var node = this.startNode()\n\t    var meta = this.parseIdent(true)\n\t    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n\t      node.meta = meta\n\t      node.property = this.parseIdent(true)\n\t      if (node.property.name !== \"target\")\n\t        this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n\t      if (!this.inFunction)\n\t        this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n\t      return this.finishNode(node, \"MetaProperty\")\n\t    }\n\t    var startPos = this.start, startLoc = this.startLoc\n\t    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n\t    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, this.options.ecmaVersion >= 8, false)\n\t    else node.arguments = empty$1\n\t    return this.finishNode(node, \"NewExpression\")\n\t  }\n\t\n\t  // Parse template expression.\n\t\n\t  pp$3.parseTemplateElement = function() {\n\t    var elem = this.startNode()\n\t    elem.value = {\n\t      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n\t      cooked: this.value\n\t    }\n\t    this.next()\n\t    elem.tail = this.type === tt.backQuote\n\t    return this.finishNode(elem, \"TemplateElement\")\n\t  }\n\t\n\t  pp$3.parseTemplate = function() {\n\t    var this$1 = this;\n\t\n\t    var node = this.startNode()\n\t    this.next()\n\t    node.expressions = []\n\t    var curElt = this.parseTemplateElement()\n\t    node.quasis = [curElt]\n\t    while (!curElt.tail) {\n\t      this$1.expect(tt.dollarBraceL)\n\t      node.expressions.push(this$1.parseExpression())\n\t      this$1.expect(tt.braceR)\n\t      node.quasis.push(curElt = this$1.parseTemplateElement())\n\t    }\n\t    this.next()\n\t    return this.finishNode(node, \"TemplateLiteral\")\n\t  }\n\t\n\t  // Parse an object literal or binding pattern.\n\t\n\t  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n\t    var this$1 = this;\n\t\n\t    var node = this.startNode(), first = true, propHash = {}\n\t    node.properties = []\n\t    this.next()\n\t    while (!this.eat(tt.braceR)) {\n\t      if (!first) {\n\t        this$1.expect(tt.comma)\n\t        if (this$1.afterTrailingComma(tt.braceR)) break\n\t      } else first = false\n\t\n\t      var prop = this$1.startNode(), isGenerator, isAsync, startPos, startLoc\n\t      if (this$1.options.ecmaVersion >= 6) {\n\t        prop.method = false\n\t        prop.shorthand = false\n\t        if (isPattern || refDestructuringErrors) {\n\t          startPos = this$1.start\n\t          startLoc = this$1.startLoc\n\t        }\n\t        if (!isPattern)\n\t          isGenerator = this$1.eat(tt.star)\n\t      }\n\t      this$1.parsePropertyName(prop)\n\t      if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && !prop.computed &&\n\t          prop.key.type === \"Identifier\" && prop.key.name === \"async\" && this$1.type !== tt.parenL &&\n\t          this$1.type !== tt.colon && !this$1.canInsertSemicolon()) {\n\t        isAsync = true\n\t        this$1.parsePropertyName(prop, refDestructuringErrors)\n\t      } else {\n\t        isAsync = false\n\t      }\n\t      this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors)\n\t      this$1.checkPropClash(prop, propHash)\n\t      node.properties.push(this$1.finishNode(prop, \"Property\"))\n\t    }\n\t    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n\t  }\n\t\n\t  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {\n\t    if ((isGenerator || isAsync) && this.type === tt.colon)\n\t      this.unexpected()\n\t\n\t    if (this.eat(tt.colon)) {\n\t      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n\t      prop.kind = \"init\"\n\t    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n\t      if (isPattern) this.unexpected()\n\t      prop.kind = \"init\"\n\t      prop.method = true\n\t      prop.value = this.parseMethod(isGenerator, isAsync)\n\t    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n\t               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n\t               (this.type != tt.comma && this.type != tt.braceR)) {\n\t      if (isGenerator || isAsync || isPattern) this.unexpected()\n\t      prop.kind = prop.key.name\n\t      this.parsePropertyName(prop)\n\t      prop.value = this.parseMethod(false)\n\t      var paramCount = prop.kind === \"get\" ? 0 : 1\n\t      if (prop.value.params.length !== paramCount) {\n\t        var start = prop.value.start\n\t        if (prop.kind === \"get\")\n\t          this.raiseRecoverable(start, \"getter should have no params\")\n\t        else\n\t          this.raiseRecoverable(start, \"setter should have exactly one param\")\n\t      } else {\n\t        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n\t          this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n\t      }\n\t    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n\t      if (this.keywords.test(prop.key.name) ||\n\t          (this.strict ? this.reservedWordsStrict : this.reservedWords).test(prop.key.name) ||\n\t          (this.inGenerator && prop.key.name == \"yield\") ||\n\t          (this.inAsync && prop.key.name == \"await\"))\n\t        this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n\t      prop.kind = \"init\"\n\t      if (isPattern) {\n\t        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n\t      } else if (this.type === tt.eq && refDestructuringErrors) {\n\t        if (!refDestructuringErrors.shorthandAssign)\n\t          refDestructuringErrors.shorthandAssign = this.start\n\t        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n\t      } else {\n\t        prop.value = prop.key\n\t      }\n\t      prop.shorthand = true\n\t    } else this.unexpected()\n\t  }\n\t\n\t  pp$3.parsePropertyName = function(prop) {\n\t    if (this.options.ecmaVersion >= 6) {\n\t      if (this.eat(tt.bracketL)) {\n\t        prop.computed = true\n\t        prop.key = this.parseMaybeAssign()\n\t        this.expect(tt.bracketR)\n\t        return prop.key\n\t      } else {\n\t        prop.computed = false\n\t      }\n\t    }\n\t    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n\t  }\n\t\n\t  // Initialize empty function node.\n\t\n\t  pp$3.initFunction = function(node) {\n\t    node.id = null\n\t    if (this.options.ecmaVersion >= 6) {\n\t      node.generator = false\n\t      node.expression = false\n\t    }\n\t    if (this.options.ecmaVersion >= 8)\n\t      node.async = false\n\t  }\n\t\n\t  // Parse object or class method.\n\t\n\t  pp$3.parseMethod = function(isGenerator, isAsync) {\n\t    var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos\n\t\n\t    this.initFunction(node)\n\t    if (this.options.ecmaVersion >= 6)\n\t      node.generator = isGenerator\n\t    if (this.options.ecmaVersion >= 8)\n\t      node.async = !!isAsync\n\t\n\t    this.inGenerator = node.generator\n\t    this.inAsync = node.async\n\t    this.yieldPos = 0\n\t    this.awaitPos = 0\n\t\n\t    this.expect(tt.parenL)\n\t    node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8)\n\t    this.checkYieldAwaitInDefaultParams()\n\t    this.parseFunctionBody(node, false)\n\t\n\t    this.inGenerator = oldInGen\n\t    this.inAsync = oldInAsync\n\t    this.yieldPos = oldYieldPos\n\t    this.awaitPos = oldAwaitPos\n\t    return this.finishNode(node, \"FunctionExpression\")\n\t  }\n\t\n\t  // Parse arrow function expression with given parameters.\n\t\n\t  pp$3.parseArrowExpression = function(node, params, isAsync) {\n\t    var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos\n\t\n\t    this.initFunction(node)\n\t    if (this.options.ecmaVersion >= 8)\n\t      node.async = !!isAsync\n\t\n\t    this.inGenerator = false\n\t    this.inAsync = node.async\n\t    this.yieldPos = 0\n\t    this.awaitPos = 0\n\t\n\t    node.params = this.toAssignableList(params, true)\n\t    this.parseFunctionBody(node, true)\n\t\n\t    this.inGenerator = oldInGen\n\t    this.inAsync = oldInAsync\n\t    this.yieldPos = oldYieldPos\n\t    this.awaitPos = oldAwaitPos\n\t    return this.finishNode(node, \"ArrowFunctionExpression\")\n\t  }\n\t\n\t  // Parse function body and check parameters.\n\t\n\t  pp$3.parseFunctionBody = function(node, isArrowFunction) {\n\t    var isExpression = isArrowFunction && this.type !== tt.braceL\n\t\n\t    if (isExpression) {\n\t      node.body = this.parseMaybeAssign()\n\t      node.expression = true\n\t    } else {\n\t      // Start a new scope with regard to labels and the `inFunction`\n\t      // flag (restore them to their old value afterwards).\n\t      var oldInFunc = this.inFunction, oldLabels = this.labels\n\t      this.inFunction = true; this.labels = []\n\t      node.body = this.parseBlock(true)\n\t      node.expression = false\n\t      this.inFunction = oldInFunc; this.labels = oldLabels\n\t    }\n\t\n\t    // If this is a strict mode function, verify that argument names\n\t    // are not repeated, and it does not try to bind the words `eval`\n\t    // or `arguments`.\n\t    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null\n\t    if (useStrict && this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params))\n\t      this.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\")\n\t\n\t    if (this.strict || useStrict) {\n\t      var oldStrict = this.strict\n\t      this.strict = true\n\t      if (node.id)\n\t        this.checkLVal(node.id, true)\n\t      this.checkParams(node)\n\t      this.strict = oldStrict\n\t    } else if (isArrowFunction || !this.isSimpleParamList(node.params)) {\n\t      this.checkParams(node)\n\t    }\n\t  }\n\t\n\t  pp$3.isSimpleParamList = function(params) {\n\t    for (var i = 0; i < params.length; i++)\n\t      if (params[i].type !== \"Identifier\") return false\n\t    return true\n\t  }\n\t\n\t  // Checks function params for various disallowed patterns such as using \"eval\"\n\t  // or \"arguments\" and duplicate parameters.\n\t\n\t  pp$3.checkParams = function(node) {\n\t    var this$1 = this;\n\t\n\t    var nameHash = {}\n\t    for (var i = 0; i < node.params.length; i++) this$1.checkLVal(node.params[i], true, nameHash)\n\t  }\n\t\n\t  // Parses a comma-separated list of expressions, and returns them as\n\t  // an array. `close` is the token type that ends the list, and\n\t  // `allowEmpty` can be turned on to allow subsequent commas with\n\t  // nothing in between them to be parsed as `null` (which is needed\n\t  // for array literals).\n\t\n\t  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n\t    var this$1 = this;\n\t\n\t    var elts = [], first = true\n\t    while (!this.eat(close)) {\n\t      if (!first) {\n\t        this$1.expect(tt.comma)\n\t        if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n\t      } else first = false\n\t\n\t      var elt\n\t      if (allowEmpty && this$1.type === tt.comma)\n\t        elt = null\n\t      else if (this$1.type === tt.ellipsis) {\n\t        elt = this$1.parseSpread(refDestructuringErrors)\n\t        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n\t          refDestructuringErrors.trailingComma = this$1.start\n\t        }\n\t      } else\n\t        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n\t      elts.push(elt)\n\t    }\n\t    return elts\n\t  }\n\t\n\t  // Parse the next token as an identifier. If `liberal` is true (used\n\t  // when parsing properties), it will also convert keywords into\n\t  // identifiers.\n\t\n\t  pp$3.parseIdent = function(liberal) {\n\t    var node = this.startNode()\n\t    if (liberal && this.options.allowReserved == \"never\") liberal = false\n\t    if (this.type === tt.name) {\n\t      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n\t          (this.options.ecmaVersion >= 6 ||\n\t           this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n\t        this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n\t      if (this.inGenerator && this.value === \"yield\")\n\t        this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n\t      if (this.inAsync && this.value === \"await\")\n\t        this.raiseRecoverable(this.start, \"Can not use 'await' as identifier inside an async function\")\n\t      node.name = this.value\n\t    } else if (liberal && this.type.keyword) {\n\t      node.name = this.type.keyword\n\t    } else {\n\t      this.unexpected()\n\t    }\n\t    this.next()\n\t    return this.finishNode(node, \"Identifier\")\n\t  }\n\t\n\t  // Parses yield expression inside generator.\n\t\n\t  pp$3.parseYield = function() {\n\t    if (!this.yieldPos) this.yieldPos = this.start\n\t\n\t    var node = this.startNode()\n\t    this.next()\n\t    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n\t      node.delegate = false\n\t      node.argument = null\n\t    } else {\n\t      node.delegate = this.eat(tt.star)\n\t      node.argument = this.parseMaybeAssign()\n\t    }\n\t    return this.finishNode(node, \"YieldExpression\")\n\t  }\n\t\n\t  pp$3.parseAwait = function() {\n\t    if (!this.awaitPos) this.awaitPos = this.start\n\t\n\t    var node = this.startNode()\n\t    this.next()\n\t    node.argument = this.parseMaybeUnary(null, true)\n\t    return this.finishNode(node, \"AwaitExpression\")\n\t  }\n\t\n\t  var pp$4 = Parser.prototype\n\t\n\t  // This function is used to raise exceptions on parse errors. It\n\t  // takes an offset integer (into the current `input`) to indicate\n\t  // the location of the error, attaches the position to the end\n\t  // of the error message, and then raises a `SyntaxError` with that\n\t  // message.\n\t\n\t  pp$4.raise = function(pos, message) {\n\t    var loc = getLineInfo(this.input, pos)\n\t    message += \" (\" + loc.line + \":\" + loc.column + \")\"\n\t    var err = new SyntaxError(message)\n\t    err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n\t    throw err\n\t  }\n\t\n\t  pp$4.raiseRecoverable = pp$4.raise\n\t\n\t  pp$4.curPosition = function() {\n\t    if (this.options.locations) {\n\t      return new Position(this.curLine, this.pos - this.lineStart)\n\t    }\n\t  }\n\t\n\t  var Node = function Node(parser, pos, loc) {\n\t    this.type = \"\"\n\t    this.start = pos\n\t    this.end = 0\n\t    if (parser.options.locations)\n\t      this.loc = new SourceLocation(parser, loc)\n\t    if (parser.options.directSourceFile)\n\t      this.sourceFile = parser.options.directSourceFile\n\t    if (parser.options.ranges)\n\t      this.range = [pos, 0]\n\t  };\n\t\n\t  // Start an AST node, attaching a start offset.\n\t\n\t  var pp$5 = Parser.prototype\n\t\n\t  pp$5.startNode = function() {\n\t    return new Node(this, this.start, this.startLoc)\n\t  }\n\t\n\t  pp$5.startNodeAt = function(pos, loc) {\n\t    return new Node(this, pos, loc)\n\t  }\n\t\n\t  // Finish an AST node, adding `type` and `end` properties.\n\t\n\t  function finishNodeAt(node, type, pos, loc) {\n\t    node.type = type\n\t    node.end = pos\n\t    if (this.options.locations)\n\t      node.loc.end = loc\n\t    if (this.options.ranges)\n\t      node.range[1] = pos\n\t    return node\n\t  }\n\t\n\t  pp$5.finishNode = function(node, type) {\n\t    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n\t  }\n\t\n\t  // Finish node at given position\n\t\n\t  pp$5.finishNodeAt = function(node, type, pos, loc) {\n\t    return finishNodeAt.call(this, node, type, pos, loc)\n\t  }\n\t\n\t  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n\t    this.token = token\n\t    this.isExpr = !!isExpr\n\t    this.preserveSpace = !!preserveSpace\n\t    this.override = override\n\t  };\n\t\n\t  var types = {\n\t    b_stat: new TokContext(\"{\", false),\n\t    b_expr: new TokContext(\"{\", true),\n\t    b_tmpl: new TokContext(\"${\", true),\n\t    p_stat: new TokContext(\"(\", false),\n\t    p_expr: new TokContext(\"(\", true),\n\t    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n\t    f_expr: new TokContext(\"function\", true)\n\t  }\n\t\n\t  var pp$6 = Parser.prototype\n\t\n\t  pp$6.initialContext = function() {\n\t    return [types.b_stat]\n\t  }\n\t\n\t  pp$6.braceIsBlock = function(prevType) {\n\t    if (prevType === tt.colon) {\n\t      var parent = this.curContext()\n\t      if (parent === types.b_stat || parent === types.b_expr)\n\t        return !parent.isExpr\n\t    }\n\t    if (prevType === tt._return)\n\t      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n\t    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n\t      return true\n\t    if (prevType == tt.braceL)\n\t      return this.curContext() === types.b_stat\n\t    return !this.exprAllowed\n\t  }\n\t\n\t  pp$6.updateContext = function(prevType) {\n\t    var update, type = this.type\n\t    if (type.keyword && prevType == tt.dot)\n\t      this.exprAllowed = false\n\t    else if (update = type.updateContext)\n\t      update.call(this, prevType)\n\t    else\n\t      this.exprAllowed = type.beforeExpr\n\t  }\n\t\n\t  // Token-specific context update code\n\t\n\t  tt.parenR.updateContext = tt.braceR.updateContext = function() {\n\t    if (this.context.length == 1) {\n\t      this.exprAllowed = true\n\t      return\n\t    }\n\t    var out = this.context.pop()\n\t    if (out === types.b_stat && this.curContext() === types.f_expr) {\n\t      this.context.pop()\n\t      this.exprAllowed = false\n\t    } else if (out === types.b_tmpl) {\n\t      this.exprAllowed = true\n\t    } else {\n\t      this.exprAllowed = !out.isExpr\n\t    }\n\t  }\n\t\n\t  tt.braceL.updateContext = function(prevType) {\n\t    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n\t    this.exprAllowed = true\n\t  }\n\t\n\t  tt.dollarBraceL.updateContext = function() {\n\t    this.context.push(types.b_tmpl)\n\t    this.exprAllowed = true\n\t  }\n\t\n\t  tt.parenL.updateContext = function(prevType) {\n\t    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n\t    this.context.push(statementParens ? types.p_stat : types.p_expr)\n\t    this.exprAllowed = true\n\t  }\n\t\n\t  tt.incDec.updateContext = function() {\n\t    // tokExprAllowed stays unchanged\n\t  }\n\t\n\t  tt._function.updateContext = function(prevType) {\n\t    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n\t        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n\t      this.context.push(types.f_expr)\n\t    this.exprAllowed = false\n\t  }\n\t\n\t  tt.backQuote.updateContext = function() {\n\t    if (this.curContext() === types.q_tmpl)\n\t      this.context.pop()\n\t    else\n\t      this.context.push(types.q_tmpl)\n\t    this.exprAllowed = false\n\t  }\n\t\n\t  // Object type used to represent tokens. Note that normally, tokens\n\t  // simply exist as properties on the parser object. This is only\n\t  // used for the onToken callback and the external tokenizer.\n\t\n\t  var Token = function Token(p) {\n\t    this.type = p.type\n\t    this.value = p.value\n\t    this.start = p.start\n\t    this.end = p.end\n\t    if (p.options.locations)\n\t      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n\t    if (p.options.ranges)\n\t      this.range = [p.start, p.end]\n\t  };\n\t\n\t  // ## Tokenizer\n\t\n\t  var pp$7 = Parser.prototype\n\t\n\t  // Are we running under Rhino?\n\t  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\t\n\t  // Move to the next token\n\t\n\t  pp$7.next = function() {\n\t    if (this.options.onToken)\n\t      this.options.onToken(new Token(this))\n\t\n\t    this.lastTokEnd = this.end\n\t    this.lastTokStart = this.start\n\t    this.lastTokEndLoc = this.endLoc\n\t    this.lastTokStartLoc = this.startLoc\n\t    this.nextToken()\n\t  }\n\t\n\t  pp$7.getToken = function() {\n\t    this.next()\n\t    return new Token(this)\n\t  }\n\t\n\t  // If we're in an ES6 environment, make parsers iterable\n\t  if (typeof Symbol !== \"undefined\")\n\t    pp$7[Symbol.iterator] = function () {\n\t      var self = this\n\t      return {next: function () {\n\t        var token = self.getToken()\n\t        return {\n\t          done: token.type === tt.eof,\n\t          value: token\n\t        }\n\t      }}\n\t    }\n\t\n\t  // Toggle strict mode. Re-reads the next number or string to please\n\t  // pedantic tests (`\"use strict\"; 010;` should fail).\n\t\n\t  pp$7.setStrict = function(strict) {\n\t    var this$1 = this;\n\t\n\t    this.strict = strict\n\t    if (this.type !== tt.num && this.type !== tt.string) return\n\t    this.pos = this.start\n\t    if (this.options.locations) {\n\t      while (this.pos < this.lineStart) {\n\t        this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1\n\t        --this$1.curLine\n\t      }\n\t    }\n\t    this.nextToken()\n\t  }\n\t\n\t  pp$7.curContext = function() {\n\t    return this.context[this.context.length - 1]\n\t  }\n\t\n\t  // Read a single token, updating the parser object's token-related\n\t  // properties.\n\t\n\t  pp$7.nextToken = function() {\n\t    var curContext = this.curContext()\n\t    if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\t\n\t    this.start = this.pos\n\t    if (this.options.locations) this.startLoc = this.curPosition()\n\t    if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\t\n\t    if (curContext.override) return curContext.override(this)\n\t    else this.readToken(this.fullCharCodeAtPos())\n\t  }\n\t\n\t  pp$7.readToken = function(code) {\n\t    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n\t    // identifiers, so '\\' also dispatches to that.\n\t    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n\t      return this.readWord()\n\t\n\t    return this.getTokenFromCode(code)\n\t  }\n\t\n\t  pp$7.fullCharCodeAtPos = function() {\n\t    var code = this.input.charCodeAt(this.pos)\n\t    if (code <= 0xd7ff || code >= 0xe000) return code\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    return (code << 10) + next - 0x35fdc00\n\t  }\n\t\n\t  pp$7.skipBlockComment = function() {\n\t    var this$1 = this;\n\t\n\t    var startLoc = this.options.onComment && this.curPosition()\n\t    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n\t    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n\t    this.pos = end + 2\n\t    if (this.options.locations) {\n\t      lineBreakG.lastIndex = start\n\t      var match\n\t      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n\t        ++this$1.curLine\n\t        this$1.lineStart = match.index + match[0].length\n\t      }\n\t    }\n\t    if (this.options.onComment)\n\t      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n\t                             startLoc, this.curPosition())\n\t  }\n\t\n\t  pp$7.skipLineComment = function(startSkip) {\n\t    var this$1 = this;\n\t\n\t    var start = this.pos\n\t    var startLoc = this.options.onComment && this.curPosition()\n\t    var ch = this.input.charCodeAt(this.pos+=startSkip)\n\t    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n\t      ++this$1.pos\n\t      ch = this$1.input.charCodeAt(this$1.pos)\n\t    }\n\t    if (this.options.onComment)\n\t      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n\t                             startLoc, this.curPosition())\n\t  }\n\t\n\t  // Called at the start of the parse and after every token. Skips\n\t  // whitespace and comments, and.\n\t\n\t  pp$7.skipSpace = function() {\n\t    var this$1 = this;\n\t\n\t    loop: while (this.pos < this.input.length) {\n\t      var ch = this$1.input.charCodeAt(this$1.pos)\n\t      switch (ch) {\n\t        case 32: case 160: // ' '\n\t          ++this$1.pos\n\t          break\n\t        case 13:\n\t          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n\t            ++this$1.pos\n\t          }\n\t        case 10: case 8232: case 8233:\n\t          ++this$1.pos\n\t          if (this$1.options.locations) {\n\t            ++this$1.curLine\n\t            this$1.lineStart = this$1.pos\n\t          }\n\t          break\n\t        case 47: // '/'\n\t          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n\t            case 42: // '*'\n\t              this$1.skipBlockComment()\n\t              break\n\t            case 47:\n\t              this$1.skipLineComment(2)\n\t              break\n\t            default:\n\t              break loop\n\t          }\n\t          break\n\t        default:\n\t          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n\t            ++this$1.pos\n\t          } else {\n\t            break loop\n\t          }\n\t      }\n\t    }\n\t  }\n\t\n\t  // Called at the end of every token. Sets `end`, `val`, and\n\t  // maintains `context` and `exprAllowed`, and skips the space after\n\t  // the token, so that the next one's `start` will point at the\n\t  // right position.\n\t\n\t  pp$7.finishToken = function(type, val) {\n\t    this.end = this.pos\n\t    if (this.options.locations) this.endLoc = this.curPosition()\n\t    var prevType = this.type\n\t    this.type = type\n\t    this.value = val\n\t\n\t    this.updateContext(prevType)\n\t  }\n\t\n\t  // ### Token reading\n\t\n\t  // This is the function that is called to fetch the next token. It\n\t  // is somewhat obscure, because it works in character codes rather\n\t  // than characters, and because operator parsing has been inlined\n\t  // into it.\n\t  //\n\t  // All in the name of speed.\n\t  //\n\t  pp$7.readToken_dot = function() {\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    if (next >= 48 && next <= 57) return this.readNumber(true)\n\t    var next2 = this.input.charCodeAt(this.pos + 2)\n\t    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n\t      this.pos += 3\n\t      return this.finishToken(tt.ellipsis)\n\t    } else {\n\t      ++this.pos\n\t      return this.finishToken(tt.dot)\n\t    }\n\t  }\n\t\n\t  pp$7.readToken_slash = function() { // '/'\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n\t    if (next === 61) return this.finishOp(tt.assign, 2)\n\t    return this.finishOp(tt.slash, 1)\n\t  }\n\t\n\t  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    var size = 1\n\t    var tokentype = code === 42 ? tt.star : tt.modulo\n\t\n\t    // exponentiation operator ** and **=\n\t    if (this.options.ecmaVersion >= 7 && next === 42) {\n\t      ++size\n\t      tokentype = tt.starstar\n\t      next = this.input.charCodeAt(this.pos + 2)\n\t    }\n\t\n\t    if (next === 61) return this.finishOp(tt.assign, size + 1)\n\t    return this.finishOp(tokentype, size)\n\t  }\n\t\n\t  pp$7.readToken_pipe_amp = function(code) { // '|&'\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n\t    if (next === 61) return this.finishOp(tt.assign, 2)\n\t    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n\t  }\n\t\n\t  pp$7.readToken_caret = function() { // '^'\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    if (next === 61) return this.finishOp(tt.assign, 2)\n\t    return this.finishOp(tt.bitwiseXOR, 1)\n\t  }\n\t\n\t  pp$7.readToken_plus_min = function(code) { // '+-'\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    if (next === code) {\n\t      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n\t          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n\t        // A `-->` line comment\n\t        this.skipLineComment(3)\n\t        this.skipSpace()\n\t        return this.nextToken()\n\t      }\n\t      return this.finishOp(tt.incDec, 2)\n\t    }\n\t    if (next === 61) return this.finishOp(tt.assign, 2)\n\t    return this.finishOp(tt.plusMin, 1)\n\t  }\n\t\n\t  pp$7.readToken_lt_gt = function(code) { // '<>'\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    var size = 1\n\t    if (next === code) {\n\t      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n\t      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n\t      return this.finishOp(tt.bitShift, size)\n\t    }\n\t    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n\t        this.input.charCodeAt(this.pos + 3) == 45) {\n\t      if (this.inModule) this.unexpected()\n\t      // `<!--`, an XML-style comment that should be interpreted as a line comment\n\t      this.skipLineComment(4)\n\t      this.skipSpace()\n\t      return this.nextToken()\n\t    }\n\t    if (next === 61) size = 2\n\t    return this.finishOp(tt.relational, size)\n\t  }\n\t\n\t  pp$7.readToken_eq_excl = function(code) { // '=!'\n\t    var next = this.input.charCodeAt(this.pos + 1)\n\t    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n\t    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n\t      this.pos += 2\n\t      return this.finishToken(tt.arrow)\n\t    }\n\t    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n\t  }\n\t\n\t  pp$7.getTokenFromCode = function(code) {\n\t    switch (code) {\n\t      // The interpretation of a dot depends on whether it is followed\n\t      // by a digit or another two dots.\n\t    case 46: // '.'\n\t      return this.readToken_dot()\n\t\n\t      // Punctuation tokens.\n\t    case 40: ++this.pos; return this.finishToken(tt.parenL)\n\t    case 41: ++this.pos; return this.finishToken(tt.parenR)\n\t    case 59: ++this.pos; return this.finishToken(tt.semi)\n\t    case 44: ++this.pos; return this.finishToken(tt.comma)\n\t    case 91: ++this.pos; return this.finishToken(tt.bracketL)\n\t    case 93: ++this.pos; return this.finishToken(tt.bracketR)\n\t    case 123: ++this.pos; return this.finishToken(tt.braceL)\n\t    case 125: ++this.pos; return this.finishToken(tt.braceR)\n\t    case 58: ++this.pos; return this.finishToken(tt.colon)\n\t    case 63: ++this.pos; return this.finishToken(tt.question)\n\t\n\t    case 96: // '`'\n\t      if (this.options.ecmaVersion < 6) break\n\t      ++this.pos\n\t      return this.finishToken(tt.backQuote)\n\t\n\t    case 48: // '0'\n\t      var next = this.input.charCodeAt(this.pos + 1)\n\t      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n\t      if (this.options.ecmaVersion >= 6) {\n\t        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n\t        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n\t      }\n\t      // Anything else beginning with a digit is an integer, octal\n\t      // number, or float.\n\t    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n\t      return this.readNumber(false)\n\t\n\t      // Quotes produce strings.\n\t    case 34: case 39: // '\"', \"'\"\n\t      return this.readString(code)\n\t\n\t      // Operators are parsed inline in tiny state machines. '=' (61) is\n\t      // often referred to. `finishOp` simply skips the amount of\n\t      // characters it is given as second argument, and returns a token\n\t      // of the type given by its first argument.\n\t\n\t    case 47: // '/'\n\t      return this.readToken_slash()\n\t\n\t    case 37: case 42: // '%*'\n\t      return this.readToken_mult_modulo_exp(code)\n\t\n\t    case 124: case 38: // '|&'\n\t      return this.readToken_pipe_amp(code)\n\t\n\t    case 94: // '^'\n\t      return this.readToken_caret()\n\t\n\t    case 43: case 45: // '+-'\n\t      return this.readToken_plus_min(code)\n\t\n\t    case 60: case 62: // '<>'\n\t      return this.readToken_lt_gt(code)\n\t\n\t    case 61: case 33: // '=!'\n\t      return this.readToken_eq_excl(code)\n\t\n\t    case 126: // '~'\n\t      return this.finishOp(tt.prefix, 1)\n\t    }\n\t\n\t    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n\t  }\n\t\n\t  pp$7.finishOp = function(type, size) {\n\t    var str = this.input.slice(this.pos, this.pos + size)\n\t    this.pos += size\n\t    return this.finishToken(type, str)\n\t  }\n\t\n\t  // Parse a regular expression. Some context-awareness is necessary,\n\t  // since a '/' inside a '[]' set does not end the expression.\n\t\n\t  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n\t    try {\n\t      return new RegExp(src, flags)\n\t    } catch (e) {\n\t      if (throwErrorAt !== undefined) {\n\t        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n\t        throw e\n\t      }\n\t    }\n\t  }\n\t\n\t  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\t\n\t  pp$7.readRegexp = function() {\n\t    var this$1 = this;\n\t\n\t    var escaped, inClass, start = this.pos\n\t    for (;;) {\n\t      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n\t      var ch = this$1.input.charAt(this$1.pos)\n\t      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n\t      if (!escaped) {\n\t        if (ch === \"[\") inClass = true\n\t        else if (ch === \"]\" && inClass) inClass = false\n\t        else if (ch === \"/\" && !inClass) break\n\t        escaped = ch === \"\\\\\"\n\t      } else escaped = false\n\t      ++this$1.pos\n\t    }\n\t    var content = this.input.slice(start, this.pos)\n\t    ++this.pos\n\t    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n\t    // here (don't ask).\n\t    var mods = this.readWord1()\n\t    var tmp = content, tmpFlags = \"\"\n\t    if (mods) {\n\t      var validFlags = /^[gim]*$/\n\t      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n\t      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n\t      if (mods.indexOf(\"u\") >= 0) {\n\t        if (regexpUnicodeSupport) {\n\t          tmpFlags = \"u\"\n\t        } else {\n\t          // Replace each astral symbol and every Unicode escape sequence that\n\t          // possibly represents an astral symbol or a paired surrogate with a\n\t          // single ASCII symbol to avoid throwing on regular expressions that\n\t          // are only valid in combination with the `/u` flag.\n\t          // Note: replacing with the ASCII symbol `x` might cause false\n\t          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n\t          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n\t          // be replaced by `[x-b]` which throws an error.\n\t          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n\t            code = Number(\"0x\" + code)\n\t            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n\t            return \"x\"\n\t          })\n\t          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n\t          tmpFlags = tmpFlags.replace(\"u\", \"\")\n\t        }\n\t      }\n\t    }\n\t    // Detect invalid regular expressions.\n\t    var value = null\n\t    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n\t    // so don't do detection if we are running under Rhino\n\t    if (!isRhino) {\n\t      tryCreateRegexp(tmp, tmpFlags, start, this)\n\t      // Get a regular expression object for this pattern-flag pair, or `null` in\n\t      // case the current environment doesn't support the flags it uses.\n\t      value = tryCreateRegexp(content, mods)\n\t    }\n\t    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n\t  }\n\t\n\t  // Read an integer in the given radix. Return null if zero digits\n\t  // were read, the integer value otherwise. When `len` is given, this\n\t  // will return `null` unless the integer has exactly `len` digits.\n\t\n\t  pp$7.readInt = function(radix, len) {\n\t    var this$1 = this;\n\t\n\t    var start = this.pos, total = 0\n\t    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n\t      var code = this$1.input.charCodeAt(this$1.pos), val\n\t      if (code >= 97) val = code - 97 + 10 // a\n\t      else if (code >= 65) val = code - 65 + 10 // A\n\t      else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n\t      else val = Infinity\n\t      if (val >= radix) break\n\t      ++this$1.pos\n\t      total = total * radix + val\n\t    }\n\t    if (this.pos === start || len != null && this.pos - start !== len) return null\n\t\n\t    return total\n\t  }\n\t\n\t  pp$7.readRadixNumber = function(radix) {\n\t    this.pos += 2 // 0x\n\t    var val = this.readInt(radix)\n\t    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n\t    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\t    return this.finishToken(tt.num, val)\n\t  }\n\t\n\t  // Read an integer, octal integer, or floating-point number.\n\t\n\t  pp$7.readNumber = function(startsWithDot) {\n\t    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n\t    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n\t    if (octal && this.pos == start + 1) octal = false\n\t    var next = this.input.charCodeAt(this.pos)\n\t    if (next === 46 && !octal) { // '.'\n\t      ++this.pos\n\t      this.readInt(10)\n\t      isFloat = true\n\t      next = this.input.charCodeAt(this.pos)\n\t    }\n\t    if ((next === 69 || next === 101) && !octal) { // 'eE'\n\t      next = this.input.charCodeAt(++this.pos)\n\t      if (next === 43 || next === 45) ++this.pos // '+-'\n\t      if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n\t      isFloat = true\n\t    }\n\t    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\t\n\t    var str = this.input.slice(start, this.pos), val\n\t    if (isFloat) val = parseFloat(str)\n\t    else if (!octal || str.length === 1) val = parseInt(str, 10)\n\t    else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n\t    else val = parseInt(str, 8)\n\t    return this.finishToken(tt.num, val)\n\t  }\n\t\n\t  // Read a string value, interpreting backslash-escapes.\n\t\n\t  pp$7.readCodePoint = function() {\n\t    var ch = this.input.charCodeAt(this.pos), code\n\t\n\t    if (ch === 123) {\n\t      if (this.options.ecmaVersion < 6) this.unexpected()\n\t      var codePos = ++this.pos\n\t      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n\t      ++this.pos\n\t      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n\t    } else {\n\t      code = this.readHexChar(4)\n\t    }\n\t    return code\n\t  }\n\t\n\t  function codePointToString(code) {\n\t    // UTF-16 Decoding\n\t    if (code <= 0xFFFF) return String.fromCharCode(code)\n\t    code -= 0x10000\n\t    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n\t  }\n\t\n\t  pp$7.readString = function(quote) {\n\t    var this$1 = this;\n\t\n\t    var out = \"\", chunkStart = ++this.pos\n\t    for (;;) {\n\t      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n\t      var ch = this$1.input.charCodeAt(this$1.pos)\n\t      if (ch === quote) break\n\t      if (ch === 92) { // '\\'\n\t        out += this$1.input.slice(chunkStart, this$1.pos)\n\t        out += this$1.readEscapedChar(false)\n\t        chunkStart = this$1.pos\n\t      } else {\n\t        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n\t        ++this$1.pos\n\t      }\n\t    }\n\t    out += this.input.slice(chunkStart, this.pos++)\n\t    return this.finishToken(tt.string, out)\n\t  }\n\t\n\t  // Reads template string tokens.\n\t\n\t  pp$7.readTmplToken = function() {\n\t    var this$1 = this;\n\t\n\t    var out = \"\", chunkStart = this.pos\n\t    for (;;) {\n\t      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n\t      var ch = this$1.input.charCodeAt(this$1.pos)\n\t      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n\t        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n\t          if (ch === 36) {\n\t            this$1.pos += 2\n\t            return this$1.finishToken(tt.dollarBraceL)\n\t          } else {\n\t            ++this$1.pos\n\t            return this$1.finishToken(tt.backQuote)\n\t          }\n\t        }\n\t        out += this$1.input.slice(chunkStart, this$1.pos)\n\t        return this$1.finishToken(tt.template, out)\n\t      }\n\t      if (ch === 92) { // '\\'\n\t        out += this$1.input.slice(chunkStart, this$1.pos)\n\t        out += this$1.readEscapedChar(true)\n\t        chunkStart = this$1.pos\n\t      } else if (isNewLine(ch)) {\n\t        out += this$1.input.slice(chunkStart, this$1.pos)\n\t        ++this$1.pos\n\t        switch (ch) {\n\t          case 13:\n\t            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n\t          case 10:\n\t            out += \"\\n\"\n\t            break\n\t          default:\n\t            out += String.fromCharCode(ch)\n\t            break\n\t        }\n\t        if (this$1.options.locations) {\n\t          ++this$1.curLine\n\t          this$1.lineStart = this$1.pos\n\t        }\n\t        chunkStart = this$1.pos\n\t      } else {\n\t        ++this$1.pos\n\t      }\n\t    }\n\t  }\n\t\n\t  // Used to read escaped characters\n\t\n\t  pp$7.readEscapedChar = function(inTemplate) {\n\t    var ch = this.input.charCodeAt(++this.pos)\n\t    ++this.pos\n\t    switch (ch) {\n\t    case 110: return \"\\n\" // 'n' -> '\\n'\n\t    case 114: return \"\\r\" // 'r' -> '\\r'\n\t    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n\t    case 117: return codePointToString(this.readCodePoint()) // 'u'\n\t    case 116: return \"\\t\" // 't' -> '\\t'\n\t    case 98: return \"\\b\" // 'b' -> '\\b'\n\t    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n\t    case 102: return \"\\f\" // 'f' -> '\\f'\n\t    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n\t    case 10: // ' \\n'\n\t      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n\t      return \"\"\n\t    default:\n\t      if (ch >= 48 && ch <= 55) {\n\t        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n\t        var octal = parseInt(octalStr, 8)\n\t        if (octal > 255) {\n\t          octalStr = octalStr.slice(0, -1)\n\t          octal = parseInt(octalStr, 8)\n\t        }\n\t        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n\t          this.raise(this.pos - 2, \"Octal literal in strict mode\")\n\t        }\n\t        this.pos += octalStr.length - 1\n\t        return String.fromCharCode(octal)\n\t      }\n\t      return String.fromCharCode(ch)\n\t    }\n\t  }\n\t\n\t  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\t\n\t  pp$7.readHexChar = function(len) {\n\t    var codePos = this.pos\n\t    var n = this.readInt(16, len)\n\t    if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n\t    return n\n\t  }\n\t\n\t  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n\t  // to whether the word contained a '\\u' escape.\n\t  //\n\t  // Incrementally adds only escaped chars, adding other chunks as-is\n\t  // as a micro-optimization.\n\t\n\t  pp$7.readWord1 = function() {\n\t    var this$1 = this;\n\t\n\t    this.containsEsc = false\n\t    var word = \"\", first = true, chunkStart = this.pos\n\t    var astral = this.options.ecmaVersion >= 6\n\t    while (this.pos < this.input.length) {\n\t      var ch = this$1.fullCharCodeAtPos()\n\t      if (isIdentifierChar(ch, astral)) {\n\t        this$1.pos += ch <= 0xffff ? 1 : 2\n\t      } else if (ch === 92) { // \"\\\"\n\t        this$1.containsEsc = true\n\t        word += this$1.input.slice(chunkStart, this$1.pos)\n\t        var escStart = this$1.pos\n\t        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n\t          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n\t        ++this$1.pos\n\t        var esc = this$1.readCodePoint()\n\t        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n\t          this$1.raise(escStart, \"Invalid Unicode escape\")\n\t        word += codePointToString(esc)\n\t        chunkStart = this$1.pos\n\t      } else {\n\t        break\n\t      }\n\t      first = false\n\t    }\n\t    return word + this.input.slice(chunkStart, this.pos)\n\t  }\n\t\n\t  // Read an identifier or keyword token. Will check for reserved\n\t  // words when necessary.\n\t\n\t  pp$7.readWord = function() {\n\t    var word = this.readWord1()\n\t    var type = tt.name\n\t    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n\t      type = keywordTypes[word]\n\t    return this.finishToken(type, word)\n\t  }\n\t\n\t  var version = \"4.0.3\"\n\t\n\t  // The main exported interface (under `self.acorn` when in the\n\t  // browser) is a `parse` function that takes a code string and\n\t  // returns an abstract syntax tree as specified by [Mozilla parser\n\t  // API][api].\n\t  //\n\t  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\t\n\t  function parse(input, options) {\n\t    return new Parser(options, input).parse()\n\t  }\n\t\n\t  // This function tries to parse a single expression at a given\n\t  // offset in a string. Useful for parsing mixed-language formats\n\t  // that embed JavaScript expressions.\n\t\n\t  function parseExpressionAt(input, pos, options) {\n\t    var p = new Parser(options, input, pos)\n\t    p.nextToken()\n\t    return p.parseExpression()\n\t  }\n\t\n\t  // Acorn is organized as a tokenizer and a recursive-descent parser.\n\t  // The `tokenizer` export provides an interface to the tokenizer.\n\t\n\t  function tokenizer(input, options) {\n\t    return new Parser(options, input)\n\t  }\n\t\n\t  // This is a terrible kludge to support the existing, pre-ES6\n\t  // interface where the loose parser module retroactively adds exports\n\t  // to this module.\n\t  function addLooseExports(parse, Parser, plugins) {\n\t    exports.parse_dammit = parse\n\t    exports.LooseParser = Parser\n\t    exports.pluginsLoose = plugins\n\t  }\n\t\n\t  exports.version = version;\n\t  exports.parse = parse;\n\t  exports.parseExpressionAt = parseExpressionAt;\n\t  exports.tokenizer = tokenizer;\n\t  exports.addLooseExports = addLooseExports;\n\t  exports.Parser = Parser;\n\t  exports.plugins = plugins;\n\t  exports.defaultOptions = defaultOptions;\n\t  exports.Position = Position;\n\t  exports.SourceLocation = SourceLocation;\n\t  exports.getLineInfo = getLineInfo;\n\t  exports.Node = Node;\n\t  exports.TokenType = TokenType;\n\t  exports.tokTypes = tt;\n\t  exports.TokContext = TokContext;\n\t  exports.tokContexts = types;\n\t  exports.isIdentifierChar = isIdentifierChar;\n\t  exports.isIdentifierStart = isIdentifierStart;\n\t  exports.Token = Token;\n\t  exports.isNewLine = isNewLine;\n\t  exports.lineBreak = lineBreak;\n\t  exports.lineBreakG = lineBreakG;\n\t\n\t  Object.defineProperty(exports, '__esModule', { value: true });\n\t\n\t}));\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** cf1509709bae44bff51b.worker.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cf1509709bae44bff51b\n **/","import { Interpreter, JsObject } from 'js-interp';\nimport {\n  MW_STOP, MwStopParams,\n  MW_RUN, MwRunParams,\n  MW_API_RESPONSE, MwResponseParams,\n} from '../shared';\nimport ThreadManager from './ThreadManager';\nimport { WorkerGlobalScope } from './types';\ndeclare const self: WorkerGlobalScope;\n\nconst VM_FPS = 100;\n\nconst threads = new ThreadManager();\nsetInterval(() => threads.onTick(), 1000 / VM_FPS);\n\nself.onmessage = e => {\n  switch(e.data.type) {\n    case MW_RUN: {\n      const { objectId, threadId, code } = <MwRunParams> e.data;\n      threads.spawn(objectId, threadId, code);\n      break;\n    }\n    case MW_STOP: {\n      const { objectId } = <MwStopParams> e.data;\n      threads.terminate(objectId);\n      break;\n    }\n    case MW_API_RESPONSE: {\n      const { requestId, params } = <MwResponseParams> e.data;\n      threads.onResponse(requestId, params);\n      break;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/vm/worker/index.ts\n **/","interface BaseParams {\n  type: string;\n}\n\nexport interface WmBaseParams extends BaseParams {\n  objectId: string;\n  threadId: number;\n}\n\nexport const WM_STOPPED = 'WM_STOPPED';\n\nexport const MW_STOP = 'MW_STOP';\nexport interface MwStopParams {\n  objectId: string;\n}\n\nexport const MW_RUN = 'MW_RUN';\nexport interface MwRunParams {\n  objectId: string;\n  threadId: number;\n  code: string;\n}\n\nexport const MW_API_RESPONSE = 'MW_API_RESPONSE';\nexport interface MwResponseParams {\n  requestId: number;\n  params: any;\n}\n\nexport const WM_HIGHLIGHT_BLOCK = 'WM_HIGHLIGHT_BLOCK';\nexport interface WmHighlightBlockParams extends WmBaseParams {\n  blockId: string;\n}\n\nexport const WM_API_REQUEST = 'WM_API_REQUEST';\nexport interface WmApiRequestParams extends WmBaseParams {\n  requestId: number;\n  api: string;\n  body: any;\n}\n\nexport const WM_THREAD_START = 'WM_THREAD_START';\nexport interface WmThreadStartParams extends WmBaseParams {\n}\n\nexport const WM_THREAD_STOP = 'WM_THREAD_STOP';\nexport interface WmThreadStopParams extends WmBaseParams {\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/vm/shared.ts\n **/","\"use strict\";\nvar JsObject = (function () {\n    /**\n     * Class for an object.\n     * @param {Interpreter.Object} parent Parent constructor function.\n     * @constructor\n     */\n    function JsObject(parent) {\n        /**\n         * @type {string}\n         */\n        this.type = 'object';\n        /**\n         * @type {Interpreter.Object}\n         */\n        this.parent = null;\n        /**\n         * @type {boolean}\n         */\n        this.isPrimitive = false;\n        /**\n         * @type {number|string|boolean|undefined|!RegExp}\n         */\n        this.data = undefined;\n        this.notConfigurable = Object.create(null);\n        this.notEnumerable = Object.create(null);\n        this.notWritable = Object.create(null);\n        this.getter = Object.create(null);\n        this.setter = Object.create(null);\n        this.properties = Object.create(null);\n        this.parent = parent;\n    }\n    ;\n    /**\n     * Convert this object into a boolean.\n     * @return {boolean} Boolean value.\n     */\n    JsObject.prototype.toBoolean = function () {\n        return true;\n    };\n    ;\n    /**\n     * Convert this object into a number.\n     * @return {number} Number value.\n     */\n    JsObject.prototype.toNumber = function () {\n        return Number(this.data === undefined ? this.toString() : this.data);\n    };\n    ;\n    /**\n     * Convert this object into a string.\n     * @return {string} String value.\n     * @override\n     */\n    JsObject.prototype.toString = function () {\n        return this.data === undefined ? ('[' + this.type + ']') : String(this.data);\n    };\n    ;\n    /**\n     * Return the object value.\n     * @return {*} Value.\n     * @override\n     */\n    JsObject.prototype.valueOf = function () {\n        return this.data === undefined ? this : this.data;\n    };\n    ;\n    return JsObject;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = JsObject;\n//# sourceMappingURL=JsObject.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-interp/lib/JsObject.js\n ** module id = 2\n ** module chunks = 0\n **/","class IdIssuer {\n  private id: number;\n\n  constructor() {\n    this.id = 0;\n  }\n\n  issue() {\n    return ++this.id;\n  }\n}\n\nexport default IdIssuer;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/vm/IdIssuer.ts\n **/","import { Interpreter, JsObject } from 'js-interp';\nimport IdIssuer from '../IdIssuer';\nimport { createInitInterpreter } from './api';\nimport {\n  WM_THREAD_START, WmThreadStartParams,\n  WM_THREAD_STOP, WmThreadStopParams,\n  WM_API_REQUEST, WmApiRequestParams,\n} from '../shared';\nimport { WorkerGlobalScope } from './types';\ndeclare const self: WorkerGlobalScope;\n\nconst requestIdIssuer = new IdIssuer();\n\ninterface Thread {\n  objectId: string;\n  threadId: number;\n  interpreter: Interpreter;\n  pendingRequests: Set<number>;\n}\n\ninterface Request {\n  objectId: string;\n  resolve: (result?: any) => any;\n  reject: (err: any) => any;\n}\n\nclass ThreadManager {\n  private threads: Thread[];\n  private threadsByObjectId: Map<string, Thread>;\n\n  private pendingRequests: Map<number, Request>;\n\n  constructor() {\n    this.threads = [];\n    this.threadsByObjectId = new Map();\n    this.pendingRequests = new Map();\n  }\n\n  spawn(objectId: string, threadId: number, code: string) {\n    this.terminate(objectId);\n\n    const thread: Thread = {\n      objectId,\n      threadId,\n      interpreter: new Interpreter(code, createInitInterpreter(this, threadId, objectId)),\n      pendingRequests: new Set(),\n    };\n    this.threads.push(thread);\n    this.threadsByObjectId.set(thread.objectId, thread);\n\n    const message: WmThreadStartParams = {\n      type: WM_THREAD_START,\n      objectId: thread.objectId,\n      threadId: thread.threadId,\n    };\n\n    self.postMessage(message);\n  }\n\n  terminate(objectId: string) {\n    const thread = this.threadsByObjectId.get(objectId);\n    if (thread) {\n      this.destroyThread(thread, this.threads.indexOf(thread));\n    }\n  }\n\n  onTick() {\n    for (let i = this.threads.length - 1; i >= 0; --i) {\n      const thread = this.threads[i];\n      if (!thread.interpreter.step()) {\n        this.destroyThread(thread, i);\n      }\n    }\n  }\n\n  request(objectId: string, api: string, params?: any) {\n    const thread = this.threadsByObjectId.get(objectId);\n    if (!thread) throw new Error(`Cannot find thread for object ${objectId}`);\n\n    return new Promise((resolve, reject) => {\n      const requestId = requestIdIssuer.issue();\n\n      this.pendingRequests.set(requestId, { objectId, resolve, reject });\n      thread.pendingRequests.add(requestId);\n\n      const message: WmApiRequestParams = {\n        objectId, requestId, api,\n        type: WM_API_REQUEST,\n        body: params && thread.interpreter.pseudoToNative(params),\n        threadId: thread.threadId,\n      };\n\n      self.postMessage(message);\n    });\n  }\n\n  onResponse(requestId: number, params: any) {\n    const request = this.pendingRequests.get(requestId);\n    if (!request) return;\n\n    this.pendingRequests.delete(requestId);\n\n    const thread = this.threadsByObjectId.get(request.objectId);\n    if (!thread) return;\n\n    thread.pendingRequests.delete(requestId);\n\n    request.resolve(thread.interpreter.nativeToPseudo(params));\n  }\n\n  private destroyThread(thread: Thread, index: number) {\n    for (const requestId of thread.pendingRequests) {\n      this.pendingRequests.delete(requestId);\n    }\n    thread.pendingRequests = null;\n\n    this.threads.splice(index, 1);\n    this.threadsByObjectId.delete(thread.objectId);\n\n    const message: WmThreadStopParams = {\n      type: WM_THREAD_STOP,\n      objectId: thread.objectId,\n      threadId: thread.threadId,\n    };\n\n    self.postMessage(message);\n  }\n}\n\nexport default ThreadManager;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/vm/worker/ThreadManager.ts\n **/","import { Interpreter, JsObject } from 'js-interp';\nimport {\n  WM_HIGHLIGHT_BLOCK, WmHighlightBlockParams,\n} from '../shared';\nimport ThreadManager from './ThreadManager';\nimport { WorkerGlobalScope } from './types';\ndeclare const self: WorkerGlobalScope;\n\nfunction createInitInterpreter(threads: ThreadManager, threadId: number, objectId: string) {\n  return function initInterpreter(interpreter: Interpreter, scope: JsObject) {\n    interpreter.setProperty(scope, 'highlightBlock', interpreter.createNativeFunction((id) => {\n      const blockId = id ? id.toString() : '';\n      const message: WmHighlightBlockParams = {\n        type: WM_HIGHLIGHT_BLOCK,\n        objectId, threadId, blockId,\n      };\n      self.postMessage(message);\n      return interpreter.UNDEFINED;\n    }));\n\n    // API\n\n    interpreter.setProperty(scope, 'getNearestVoxels', interpreter.createAsyncFunction((types) => {\n      return threads.request(objectId, 'getNearestVoxels', types);\n    }));\n\n    interpreter.setProperty(scope, 'moveTo', interpreter.createAsyncFunction((position) => {\n      return threads.request(objectId, 'moveTo', position);\n    }));\n\n    interpreter.setProperty(scope, 'use', interpreter.createAsyncFunction((position) => {\n      return threads.request(objectId, 'use', position);\n    }));\n\n    interpreter.setProperty(scope, 'jump', interpreter.createAsyncFunction(() => {\n      return threads.request(objectId, 'jump');\n    }));\n  }\n}\n\nexport { createInitInterpreter }\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/vm/worker/api.ts\n **/","\"use strict\";\nvar acorn = require('acorn');\nvar Primitive_1 = require('./Primitive');\nvar JsObject_1 = require('./JsObject');\nvar utils = require('./utils');\n/**\n * @const {!Object} Configuration used for all Acorn parsing.\n */\nvar PARSE_OPTIONS = {\n    ecmaVersion: 5\n};\n/**\n * Property descriptor of readonly properties.\n */\nvar READONLY_DESCRIPTOR = {\n    configurable: true,\n    enumerable: true,\n    writable: false\n};\n/**\n * Property descriptor of non-enumerable properties.\n */\nvar NONENUMERABLE_DESCRIPTOR = {\n    configurable: true,\n    enumerable: false,\n    writable: true\n};\n/**\n * Property descriptor of readonly, non-enumerable properties.\n */\nvar READONLY_NONENUMERABLE_DESCRIPTOR = {\n    configurable: true,\n    enumerable: false,\n    writable: false\n};\n/**\n * @fileoverview Interpreting JavaScript in JavaScript.\n * @author fraser@google.com (Neil Fraser)\n */\nvar Interpreter = (function () {\n    /**\n     * Create a new interpreter.\n     * @param {string|!Object} code Raw JavaScript text or AST.\n     * @param {Function=} opt_initFunc Optional initialization function.  Used to\n     *     define APIs.  When called it is passed the interpreter object and the\n     *     global scope object.\n     * @constructor\n     */\n    function Interpreter(code, opt_initFunc) {\n        if (typeof code == 'string') {\n            code = acorn.parse(code, PARSE_OPTIONS);\n        }\n        this.ast = code;\n        this.initFunc_ = opt_initFunc;\n        this.paused_ = false;\n        this.polyfills_ = [];\n        // Predefine some common primitives for performance.\n        this.UNDEFINED = new Primitive_1.default(undefined, this);\n        this.NULL = new Primitive_1.default(null, this);\n        this.NAN = new Primitive_1.default(NaN, this);\n        this.TRUE = new Primitive_1.default(true, this);\n        this.FALSE = new Primitive_1.default(false, this);\n        this.NUMBER_ZERO = new Primitive_1.default(0, this);\n        this.NUMBER_ONE = new Primitive_1.default(1, this);\n        this.STRING_EMPTY = new Primitive_1.default('', this);\n        // Create and initialize the global scope.\n        var scope = this.createScope(this.ast, null);\n        // Fix the parent properties now that the global scope exists.\n        //this.UNDEFINED.parent = undefined;\n        //this.NULL.parent = undefined;\n        this.NAN.parent = this.NUMBER;\n        this.TRUE.parent = this.BOOLEAN;\n        this.FALSE.parent = this.BOOLEAN;\n        this.NUMBER_ZERO.parent = this.NUMBER;\n        this.NUMBER_ONE.parent = this.NUMBER;\n        this.STRING_EMPTY.parent = this.STRING;\n        // Run the polyfills.\n        this.ast = acorn.parse(this.polyfills_.join('\\n'), PARSE_OPTIONS);\n        this.polyfills_ = undefined; // Allow polyfill strings to garbage collect.\n        utils.stripLocations(this.ast);\n        this.stateStack = [{\n                node: this.ast,\n                scope: scope,\n                thisExpression: scope,\n                done: false\n            }];\n        this.run();\n        this.value = this.UNDEFINED;\n        // Point at the main program.\n        this.ast = code;\n        this.stateStack = [{\n                node: this.ast,\n                scope: scope,\n                thisExpression: scope,\n                done: false,\n            }];\n    }\n    /**\n     * Add more code to the interpreter.\n     * @param {string|!Object} code Raw JavaScript text or AST.\n     */\n    Interpreter.prototype.appendCode = function (code) {\n        var state = this.stateStack[this.stateStack.length - 1];\n        if (!state || state.node.type != 'Program') {\n            throw Error('Expecting original AST to start with a Program node.');\n        }\n        if (typeof code == 'string') {\n            code = acorn.parse(code, PARSE_OPTIONS);\n        }\n        if (!code || code.type != 'Program') {\n            throw Error('Expecting new AST to start with a Program node.');\n        }\n        this.populateScope_(code, state.scope);\n        // Append the new program to the old one.\n        for (var i = 0, node = void 0; node = code.body[i]; i++) {\n            state.node.body.push(node);\n        }\n        state.done = false;\n    };\n    ;\n    /**\n     * Execute one step of the interpreter.\n     * @return {boolean} True if a step was executed, false if no more instructions.\n     */\n    Interpreter.prototype.step = function () {\n        var state = this.stateStack[0];\n        if (!state || state.node.type == 'Program' && state.done) {\n            return false;\n        }\n        else if (this.paused_) {\n            return true;\n        }\n        switch (state.node.type) {\n            case 'ArrayExpression': {\n                this.stepArrayExpression();\n                break;\n            }\n            case 'AssignmentExpression': {\n                this.stepAssignmentExpression();\n                break;\n            }\n            case 'BinaryExpression': {\n                this.stepBinaryExpression();\n                break;\n            }\n            case 'BlockStatement': {\n                this.stepBlockStatement();\n                break;\n            }\n            case 'BreakStatement': {\n                this.stepBreakStatement();\n                break;\n            }\n            case 'CallExpression': {\n                this.stepCallExpression();\n                break;\n            }\n            case 'CatchClause': {\n                this.stepCatchClause();\n                break;\n            }\n            case 'ConditionalExpression': {\n                this.stepConditionalExpression();\n                break;\n            }\n            case 'ContinueStatement': {\n                this.stepContinueStatement();\n                break;\n            }\n            case 'DoWhileStatement': {\n                this.stepDoWhileStatement();\n                break;\n            }\n            case 'EmptyStatement': {\n                this.stepEmptyStatement();\n                break;\n            }\n            case 'Eval_': {\n                this.stepEval_();\n                break;\n            }\n            case 'ExpressionStatement': {\n                this.stepExpressionStatement();\n                break;\n            }\n            case 'ForInStatement': {\n                this.stepForInStatement();\n                break;\n            }\n            case 'ForStatement': {\n                this.stepForStatement();\n                break;\n            }\n            case 'FunctionDeclaration': {\n                this.stepFunctionDeclaration();\n                break;\n            }\n            case 'FunctionExpression': {\n                this.stepFunctionExpression();\n                break;\n            }\n            case 'Identifier': {\n                this.stepIdentifier();\n                break;\n            }\n            case 'IfStatement': {\n                this.stepIfStatement();\n                break;\n            }\n            case 'LabeledStatement': {\n                this.stepLabeledStatement();\n                break;\n            }\n            case 'Literal': {\n                this.stepLiteral();\n                break;\n            }\n            case 'LogicalExpression': {\n                this.stepLogicalExpression();\n                break;\n            }\n            case 'MemberExpression': {\n                this.stepMemberExpression();\n                break;\n            }\n            case 'NewExpression': {\n                this.stepNewExpression();\n                break;\n            }\n            case 'ObjectExpression': {\n                this.stepObjectExpression();\n                break;\n            }\n            case 'Program': {\n                this.stepProgram();\n                break;\n            }\n            case 'ReturnStatement': {\n                this.stepReturnStatement();\n                break;\n            }\n            case 'SequenceExpression': {\n                this.stepSequenceExpression();\n                break;\n            }\n            case 'SwitchStatement': {\n                this.stepSwitchStatement();\n                break;\n            }\n            case 'ThisExpression': {\n                this.stepThisExpression();\n                break;\n            }\n            case 'ThrowStatement': {\n                this.stepThrowStatement();\n                break;\n            }\n            case 'TryStatement': {\n                this.stepTryStatement();\n                break;\n            }\n            case 'UnaryExpression': {\n                this.stepUnaryExpression();\n                break;\n            }\n            case 'UpdateExpression': {\n                this.stepUpdateExpression();\n                break;\n            }\n            case 'VariableDeclaration': {\n                this.stepVariableDeclaration();\n                break;\n            }\n            case 'VariableDeclarator': {\n                this.stepVariableDeclarator();\n                break;\n            }\n            case 'WithStatement': {\n                this.stepWithStatement();\n                break;\n            }\n            case 'WhileStatement': {\n                this.stepWhileStatement();\n                break;\n            }\n            default: {\n                throw Error(\"invalid node: \" + state.node.type);\n            }\n        }\n        if (!state.node.end) {\n            // This is polyfill code. Keep executing until we arrive at user code.\n            return this.step();\n        }\n        return true;\n    };\n    ;\n    /**\n     * Execute the interpreter to program completion. Vulnerable to infinite loops.\n     * @return {boolean} True if a execution is asynchonously blocked,\n     *     false if no more instructions.\n     */\n    Interpreter.prototype.run = function () {\n        while (!this.paused_ && this.step()) { }\n        return this.paused_;\n    };\n    ;\n    /**\n     * Initialize the global scope with buitin properties and functions.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initGlobalScope = function (scope) {\n        var _this = this;\n        // Initialize uneditable global properties.\n        this.setProperty(scope, 'Infinity', this.createPrimitive(Infinity), READONLY_DESCRIPTOR);\n        this.setProperty(scope, 'NaN', this.NAN, READONLY_DESCRIPTOR);\n        this.setProperty(scope, 'undefined', this.UNDEFINED, READONLY_DESCRIPTOR);\n        this.setProperty(scope, 'window', scope, READONLY_DESCRIPTOR);\n        this.setProperty(scope, 'self', scope); // Editable.\n        // Initialize global objects.\n        this.initFunction(scope);\n        this.initObject(scope);\n        // Unable to set scope's parent prior (this.OBJECT did not exist).\n        scope.parent = this.OBJECT;\n        this.initArray(scope);\n        this.initNumber(scope);\n        this.initString(scope);\n        this.initBoolean(scope);\n        this.initDate(scope);\n        this.initMath(scope);\n        this.initRegExp(scope);\n        this.initJSON(scope);\n        this.initError(scope);\n        // Initialize global functions.\n        this.setProperty(scope, 'isNaN', this.createNativeFunction(function (num) {\n            num = num || _this.UNDEFINED;\n            return _this.createPrimitive(isNaN(num.toNumber()));\n        }));\n        this.setProperty(scope, 'isFinite', this.createNativeFunction(function (num) {\n            num = num || _this.UNDEFINED;\n            return _this.createPrimitive(isFinite(num.toNumber()));\n        }));\n        this.setProperty(scope, 'parseFloat', this.getProperty(this.NUMBER, 'parseFloat'));\n        this.setProperty(scope, 'parseInt', this.getProperty(this.NUMBER, 'parseInt'));\n        var func = this.createObject(this.FUNCTION);\n        func.eval = true;\n        this.setProperty(func, 'length', this.NUMBER_ONE, READONLY_DESCRIPTOR);\n        this.setProperty(scope, 'eval', func);\n        this.setProperty(scope, 'decodeURI', this.createUriFunction(decodeURI));\n        this.setProperty(scope, 'decodeURIComponent', this.createUriFunction(decodeURIComponent));\n        this.setProperty(scope, 'encodeURI', this.createUriFunction(encodeURI));\n        this.setProperty(scope, 'encodeURIComponent', this.createUriFunction(encodeURIComponent));\n        // Run any user-provided initialization.\n        if (this.initFunc_) {\n            this.initFunc_(this, scope);\n        }\n    };\n    ;\n    Interpreter.prototype.createUriFunction = function (fn) {\n        var _this = this;\n        return this.createNativeFunction(function (str) {\n            str = (str || _this.UNDEFINED).toString();\n            try {\n                str = fn(str);\n            }\n            catch (e) {\n                // decodeURI('%xy') will throw an error.  Catch and rethrow.\n                _this.throwException(_this.URI_ERROR, e.message);\n            }\n            return _this.createPrimitive(str);\n        });\n    };\n    /**\n     * Initialize the Function class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initFunction = function (scope) {\n        var thisInterpreter = this;\n        var wrapper;\n        // Function constructor.\n        wrapper = function (var_args) {\n            var newFunc;\n            var code;\n            if (this.parent == thisInterpreter.FUNCTION) {\n                // Called with new.\n                newFunc = this;\n            }\n            else {\n                newFunc = thisInterpreter.createObject(thisInterpreter.FUNCTION);\n            }\n            if (arguments.length) {\n                code = arguments[arguments.length - 1].toString();\n            }\n            else {\n                code = '';\n            }\n            var args = [];\n            for (var i = 0; i < arguments.length - 1; i++) {\n                args.push(arguments[i].toString());\n            }\n            args = args.join(', ');\n            if (args.indexOf(')') != -1) {\n                throw SyntaxError('Function arg string contains parenthesis');\n            }\n            // Interestingly, the scope for constructed functions is the global scope,\n            // even if they were constructed in some other scope.\n            newFunc.parentScope = thisInterpreter.stateStack[thisInterpreter.stateStack.length - 1].scope;\n            var ast = acorn.parse('$ = function(' + args + ') {' + code + '};', PARSE_OPTIONS);\n            var statement = ast.body[0];\n            var expression = statement.expression;\n            newFunc.node = expression.right;\n            thisInterpreter.setProperty(newFunc, 'length', thisInterpreter.createPrimitive(newFunc.node.length), READONLY_DESCRIPTOR);\n            return newFunc;\n        };\n        this.FUNCTION = this.createObject(null);\n        this.setProperty(scope, 'Function', this.FUNCTION);\n        // Manually setup type and prototype because createObj doesn't recognize\n        // this object as a function (this.FUNCTION did not exist).\n        this.FUNCTION.type = 'function';\n        this.setProperty(this.FUNCTION, 'prototype', this.createObject(null));\n        this.FUNCTION.nativeFunc = wrapper;\n        wrapper = function (thisArg, args) {\n            var state = thisInterpreter.stateStack[0];\n            // Rewrite the current 'CallExpression' to apply a different function.\n            state.func_ = this;\n            // Assign the 'this' object.\n            state.funcThis_ = thisArg;\n            // Bind any provided arguments.\n            state.arguments = [];\n            if (args) {\n                if (utils.isa(args, thisInterpreter.ARRAY)) {\n                    for (var i = 0; i < args.length; i++) {\n                        state.arguments[i] = thisInterpreter.getProperty(args, i);\n                    }\n                }\n                else {\n                    thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'CreateListFromArrayLike called on non-object');\n                }\n            }\n            state.doneArgs_ = true;\n            state.doneExec_ = false;\n        };\n        this.setNativeFunctionPrototype(this.FUNCTION, 'apply', wrapper);\n        wrapper = function (thisArg, var_args) {\n            var state = thisInterpreter.stateStack[0];\n            // Rewrite the current 'CallExpression' to call a different function.\n            state.func_ = this;\n            // Assign the 'this' object.\n            state.funcThis_ = thisArg;\n            // Bind any provided arguments.\n            state.arguments = [];\n            for (var i = 1; i < arguments.length; i++) {\n                state.arguments.push(arguments[i]);\n            }\n            state.doneArgs_ = true;\n            state.doneExec_ = false;\n        };\n        this.setNativeFunctionPrototype(this.FUNCTION, 'call', wrapper);\n        wrapper = function (thisArg, var_args) {\n            // Clone function\n            var clone = thisInterpreter.createFunction(this.node, this.parentScope);\n            // Assign the 'this' object.\n            if (thisArg) {\n                clone.boundThis_ = thisArg;\n            }\n            // Bind any provided arguments.\n            clone.boundArgs_ = [];\n            for (var i = 1; i < arguments.length; i++) {\n                clone.boundArgs_.push(arguments[i]);\n            }\n            return clone;\n        };\n        this.setNativeFunctionPrototype(this.FUNCTION, 'bind', wrapper);\n        // Function has no parent to inherit from, so it needs its own mandatory\n        // toString and valueOf functions.\n        wrapper = function () {\n            return thisInterpreter.createPrimitive(this.toString());\n        };\n        this.setNativeFunctionPrototype(this.FUNCTION, 'toString', wrapper);\n        this.setProperty(this.FUNCTION, 'toString', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function () {\n            return thisInterpreter.createPrimitive(this.valueOf());\n        };\n        this.setNativeFunctionPrototype(this.FUNCTION, 'valueOf', wrapper);\n        this.setProperty(this.FUNCTION, 'valueOf', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n    };\n    ;\n    /**\n     * Initialize the Object class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initObject = function (scope) {\n        var thisInterpreter = this;\n        var wrapper;\n        // Object constructor.\n        wrapper = function (value) {\n            if (!value || value == thisInterpreter.UNDEFINED ||\n                value == thisInterpreter.NULL) {\n                // Create a new object.\n                if (this.parent == thisInterpreter.OBJECT) {\n                    // Called with new.\n                    return this;\n                }\n                else {\n                    return thisInterpreter.createObject(thisInterpreter.OBJECT);\n                }\n            }\n            if (value.isPrimitive) {\n                // Wrap the value as an object.\n                var obj = thisInterpreter.createObject(value.parent);\n                obj.data = value.data;\n                return obj;\n            }\n            // Return the provided object.\n            return value;\n        };\n        this.OBJECT = this.createNativeFunction(wrapper);\n        this.setProperty(scope, 'Object', this.OBJECT);\n        // Static methods on Object.\n        wrapper = function (obj) {\n            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            var i = 0;\n            for (var key in obj.properties) {\n                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));\n                i++;\n            }\n            return pseudoList;\n        };\n        this.setProperty(this.OBJECT, 'getOwnPropertyNames', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (obj) {\n            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            var i = 0;\n            for (var key in obj.properties) {\n                if (obj.notEnumerable[key]) {\n                    continue;\n                }\n                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(key));\n                i++;\n            }\n            return pseudoList;\n        };\n        this.setProperty(this.OBJECT, 'keys', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (obj, prop, descriptor) {\n            prop = (prop || thisInterpreter.UNDEFINED).toString();\n            if (!(descriptor instanceof JsObject_1.default)) {\n                thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'Property description must be an object.');\n                return;\n            }\n            if (!obj.properties[prop] && obj.preventExtensions) {\n                thisInterpreter.throwException(thisInterpreter.TYPE_ERROR, 'Can\\'t define property ' + prop + ', object is not extensible');\n                return;\n            }\n            var value = thisInterpreter.getProperty(descriptor, 'value');\n            if (value == thisInterpreter.UNDEFINED) {\n                value = null;\n            }\n            var get = thisInterpreter.getProperty(descriptor, 'get');\n            var set = thisInterpreter.getProperty(descriptor, 'set');\n            var nativeDescriptor = {\n                configurable: thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor, 'configurable')),\n                enumerable: thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor, 'enumerable')),\n                writable: thisInterpreter.pseudoToNative(thisInterpreter.getProperty(descriptor, 'writable')),\n                get: get == thisInterpreter.UNDEFINED ? undefined : get,\n                set: set == thisInterpreter.UNDEFINED ? undefined : set\n            };\n            thisInterpreter.setProperty(obj, prop, value, nativeDescriptor);\n            return obj;\n        };\n        this.setProperty(this.OBJECT, 'defineProperty', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        this.polyfills_.push(\"Object.defineProperty(Array.prototype, 'defineProperties', {configurable: true, value:\", \"function(obj, props) {\", \"var keys = Object.keys(props);\", \"for (var i = 0; i < keys.length; i++) {\", \"Object.defineProperty(obj, keys[i], props[keys[i]]);\", \"}\", \"return obj;\", \"}\", \"});\", \"\");\n        wrapper = function (obj, prop) {\n            prop = (prop || thisInterpreter.UNDEFINED).toString();\n            if (!(prop in obj.properties)) {\n                return thisInterpreter.UNDEFINED;\n            }\n            var configurable = !obj.notConfigurable[prop];\n            var enumerable = !obj.notEnumerable[prop];\n            var writable = !obj.notWritable[prop];\n            var getter = obj.getter[prop];\n            var setter = obj.setter[prop];\n            var descriptor = thisInterpreter.createObject(thisInterpreter.OBJECT);\n            thisInterpreter.setProperty(descriptor, 'configurable', thisInterpreter.createPrimitive(configurable));\n            thisInterpreter.setProperty(descriptor, 'enumerable', thisInterpreter.createPrimitive(enumerable));\n            if (getter || setter) {\n                thisInterpreter.setProperty(descriptor, 'getter', getter);\n                thisInterpreter.setProperty(descriptor, 'setter', setter);\n            }\n            else {\n                thisInterpreter.setProperty(descriptor, 'writable', thisInterpreter.createPrimitive(writable));\n                thisInterpreter.setProperty(descriptor, 'value', thisInterpreter.getProperty(obj, prop));\n            }\n            return descriptor;\n        };\n        this.setProperty(this.OBJECT, 'getOwnPropertyDescriptor', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (obj) {\n            if (obj.parent && obj.parent.properties &&\n                obj.parent.properties.prototype) {\n                return obj.parent.properties.prototype;\n            }\n            return thisInterpreter.NULL;\n        };\n        this.setProperty(this.OBJECT, 'getPrototypeOf', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (obj) {\n            return thisInterpreter.createPrimitive(!obj.preventExtensions);\n        };\n        this.setProperty(this.OBJECT, 'isExtensible', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (obj) {\n            if (!obj.isPrimitive) {\n                obj.preventExtensions = true;\n            }\n            return obj;\n        };\n        this.setProperty(this.OBJECT, 'preventExtensions', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        // Instance methods on Object.\n        wrapper = function () {\n            return thisInterpreter.createPrimitive(this.toString());\n        };\n        this.setNativeFunctionPrototype(this.OBJECT, 'toString', wrapper);\n        wrapper = function () {\n            return thisInterpreter.createPrimitive(this.toString());\n        };\n        this.setNativeFunctionPrototype(this.OBJECT, 'toLocaleString', wrapper);\n        wrapper = function () {\n            return thisInterpreter.createPrimitive(this.valueOf());\n        };\n        this.setNativeFunctionPrototype(this.OBJECT, 'valueOf', wrapper);\n        wrapper = function (prop) {\n            prop = (prop || thisInterpreter.UNDEFINED).toString();\n            return (prop in this.properties) ?\n                thisInterpreter.TRUE : thisInterpreter.FALSE;\n        };\n        this.setNativeFunctionPrototype(this.OBJECT, 'hasOwnProperty', wrapper);\n        wrapper = function (prop) {\n            prop = (prop || thisInterpreter.UNDEFINED).toString();\n            var enumerable = prop in this.properties && !this.notEnumerable[prop];\n            return thisInterpreter.createPrimitive(enumerable);\n        };\n        this.setNativeFunctionPrototype(this.OBJECT, 'propertyIsEnumerable', wrapper);\n        wrapper = function (obj) {\n            while (true) {\n                if (obj.parent && obj.parent.properties &&\n                    obj.parent.properties.prototype) {\n                    obj = obj.parent.properties.prototype;\n                    if (obj == this) {\n                        return thisInterpreter.createPrimitive(true);\n                    }\n                }\n                else {\n                    // No parent, reached the top.\n                    return thisInterpreter.createPrimitive(false);\n                }\n            }\n        };\n        this.setNativeFunctionPrototype(this.OBJECT, 'isPrototypeOf', wrapper);\n    };\n    ;\n    /**\n     * Initialize the Array class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initArray = function (scope) {\n        var thisInterpreter = this;\n        var getInt = function (obj, def) {\n            // Return an integer, or the default.\n            var n = obj ? Math.floor(obj.toNumber()) : def;\n            if (isNaN(n)) {\n                n = def;\n            }\n            return n;\n        };\n        var wrapper;\n        // Array constructor.\n        wrapper = function (var_args) {\n            var newArray;\n            if (this.parent == thisInterpreter.ARRAY) {\n                // Called with new.\n                newArray = this;\n            }\n            else {\n                newArray = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            }\n            var first = arguments[0];\n            if (first && first.type == 'number') {\n                if (isNaN(utils.arrayIndex(first))) {\n                    thisInterpreter.throwException(thisInterpreter.RANGE_ERROR, 'Invalid array length');\n                }\n                newArray.length = first.data;\n            }\n            else {\n                var i = void 0;\n                for (i = 0; i < arguments.length; i++) {\n                    newArray.properties[i] = arguments[i];\n                }\n                newArray.length = i;\n            }\n            return newArray;\n        };\n        this.ARRAY = this.createNativeFunction(wrapper);\n        this.setProperty(scope, 'Array', this.ARRAY);\n        // Static methods on Array.\n        wrapper = function (obj) {\n            return thisInterpreter.createPrimitive(utils.isa(obj, thisInterpreter.ARRAY));\n        };\n        this.setProperty(this.ARRAY, 'isArray', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        // Instance methods on Array.\n        wrapper = function () {\n            var value;\n            if (this.length) {\n                value = this.properties[this.length - 1];\n                delete this.properties[this.length - 1];\n                this.length--;\n            }\n            else {\n                value = thisInterpreter.UNDEFINED;\n            }\n            return value;\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'pop', wrapper);\n        wrapper = function (var_args) {\n            for (var i = 0; i < arguments.length; i++) {\n                this.properties[this.length] = arguments[i];\n                this.length++;\n            }\n            return thisInterpreter.createPrimitive(this.length);\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'push', wrapper);\n        wrapper = function () {\n            var value;\n            if (this.length) {\n                value = this.properties[0];\n                for (var i = 1; i < this.length; i++) {\n                    this.properties[i - 1] = this.properties[i];\n                }\n                this.length--;\n                delete this.properties[this.length];\n            }\n            else {\n                value = thisInterpreter.UNDEFINED;\n            }\n            return value;\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'shift', wrapper);\n        wrapper = function (var_args) {\n            for (var i = this.length - 1; i >= 0; i--) {\n                this.properties[i + arguments.length] = this.properties[i];\n            }\n            this.length += arguments.length;\n            for (var i = 0; i < arguments.length; i++) {\n                this.properties[i] = arguments[i];\n            }\n            return thisInterpreter.createPrimitive(this.length);\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'unshift', wrapper);\n        wrapper = function () {\n            for (var i = 0; i < this.length / 2; i++) {\n                var tmp = this.properties[this.length - i - 1];\n                this.properties[this.length - i - 1] = this.properties[i];\n                this.properties[i] = tmp;\n            }\n            return this;\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'reverse', wrapper);\n        wrapper = function (index, howmany, var_args) {\n            index = getInt(index, 0);\n            if (index < 0) {\n                index = Math.max(this.length + index, 0);\n            }\n            else {\n                index = Math.min(index, this.length);\n            }\n            howmany = getInt(howmany, Infinity);\n            howmany = Math.min(howmany, this.length - index);\n            var removed = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            // Remove specified elements.\n            for (var i = index; i < index + howmany; i++) {\n                removed.properties[removed.length++] = this.properties[i];\n                this.properties[i] = this.properties[i + howmany];\n            }\n            // Move other element to fill the gap.\n            for (var i = index + howmany; i < this.length - howmany; i++) {\n                this.properties[i] = this.properties[i + howmany];\n            }\n            // Delete superfluous properties.\n            for (var i = this.length - howmany; i < this.length; i++) {\n                delete this.properties[i];\n            }\n            this.length -= howmany;\n            // Insert specified items.\n            for (var i = this.length - 1; i >= index; i--) {\n                this.properties[i + arguments.length - 2] = this.properties[i];\n            }\n            this.length += arguments.length - 2;\n            for (var i = 2; i < arguments.length; i++) {\n                this.properties[index + i - 2] = arguments[i];\n            }\n            return removed;\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'splice', wrapper);\n        wrapper = function (opt_begin, opt_end) {\n            var list = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            var begin = getInt(opt_begin, 0);\n            if (begin < 0) {\n                begin = this.length + begin;\n            }\n            begin = Math.max(0, Math.min(begin, this.length));\n            var end = getInt(opt_end, this.length);\n            if (end < 0) {\n                end = this.length + end;\n            }\n            end = Math.max(0, Math.min(end, this.length));\n            var length = 0;\n            for (var i = begin; i < end; i++) {\n                var element = thisInterpreter.getProperty(this, i);\n                thisInterpreter.setProperty(list, length++, element);\n            }\n            return list;\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'slice', wrapper);\n        wrapper = function (opt_separator) {\n            var sep;\n            if (!opt_separator || opt_separator.data === undefined) {\n                sep = undefined;\n            }\n            else {\n                sep = opt_separator.toString();\n            }\n            var text = [];\n            for (var i = 0; i < this.length; i++) {\n                text[i] = this.properties[i];\n            }\n            return thisInterpreter.createPrimitive(text.join(sep));\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'join', wrapper);\n        wrapper = function (var_args) {\n            var list = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            var length = 0;\n            // Start by copying the current array.\n            for (var i = 0; i < this.length; i++) {\n                var element = thisInterpreter.getProperty(this, i);\n                thisInterpreter.setProperty(list, length++, element);\n            }\n            // Loop through all arguments and copy them in.\n            for (var i = 0; i < arguments.length; i++) {\n                var value = arguments[i];\n                if (utils.isa(value, thisInterpreter.ARRAY)) {\n                    for (var j = 0; j < value.length; j++) {\n                        var element = thisInterpreter.getProperty(value, j);\n                        thisInterpreter.setProperty(list, length++, element);\n                    }\n                }\n                else {\n                    thisInterpreter.setProperty(list, length++, value);\n                }\n            }\n            return list;\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'concat', wrapper);\n        wrapper = function (searchElement, opt_fromIndex) {\n            searchElement = searchElement || thisInterpreter.UNDEFINED;\n            var fromIndex = getInt(opt_fromIndex, 0);\n            if (fromIndex < 0) {\n                fromIndex = this.length + fromIndex;\n            }\n            fromIndex = Math.max(0, fromIndex);\n            for (var i = fromIndex; i < this.length; i++) {\n                var element = thisInterpreter.getProperty(this, i);\n                if (utils.strictComp(element, searchElement)) {\n                    return thisInterpreter.createPrimitive(i);\n                }\n            }\n            return thisInterpreter.createPrimitive(-1);\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'indexOf', wrapper);\n        wrapper = function (searchElement, opt_fromIndex) {\n            searchElement = searchElement || thisInterpreter.UNDEFINED;\n            var fromIndex = getInt(opt_fromIndex, this.length);\n            if (fromIndex < 0) {\n                fromIndex = this.length + fromIndex;\n            }\n            fromIndex = Math.min(fromIndex, this.length - 1);\n            for (var i = fromIndex; i >= 0; i--) {\n                var element = thisInterpreter.getProperty(this, i);\n                if (utils.strictComp(element, searchElement)) {\n                    return thisInterpreter.createPrimitive(i);\n                }\n            }\n            return thisInterpreter.createPrimitive(-1);\n        };\n        this.setNativeFunctionPrototype(this.ARRAY, 'lastIndexOf', wrapper);\n        this.polyfills_.push(\n        // Polyfill copied from:\n        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/every\n        \"Object.defineProperty(Array.prototype, 'every', {configurable: true, value:\", \"function(callbackfn, thisArg) {\", \"if (this == null || typeof callbackfn !== 'function') throw new TypeError;\", \"var T, k;\", \"var O = Object(this);\", \"var len = O.length >>> 0;\", \"if (arguments.length > 1) T = thisArg;\", \"k = 0;\", \"while (k < len) {\", \"if (k in O && !callbackfn.call(T, O[k], k, O)) return false;\", \"k++;\", \"}\", \"return true;\", \"}\", \"});\", \n        // Polyfill copied from:\n        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n        \"Object.defineProperty(Array.prototype, 'filter', {configurable: true, value:\", \"function(fun/*, thisArg*/) {\", \"if (this === void 0 || this === null || typeof fun !== 'function') throw new TypeError;\", \"var t = Object(this);\", \"var len = t.length >>> 0;\", \"var res = [];\", \"var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\", \"for (var i = 0; i < len; i++) {\", \"if (i in t) {\", \"var val = t[i];\", \"if (fun.call(thisArg, val, i, t)) res.push(val);\", \"}\", \"}\", \"return res;\", \"}\", \"});\", \n        // Polyfill copied from:\n        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n        \"Object.defineProperty(Array.prototype, 'forEach', {configurable: true, value:\", \"function(callback, thisArg) {\", \"if (this == null || typeof callback !== 'function') throw new TypeError;\", \"var T, k;\", \"var O = Object(this);\", \"var len = O.length >>> 0;\", \"if (arguments.length > 1) T = thisArg;\", \"k = 0;\", \"while (k < len) {\", \"if (k in O) callback.call(T, O[k], k, O);\", \"k++;\", \"}\", \"}\", \"});\", \n        // Polyfill copied from:\n        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n        \"Object.defineProperty(Array.prototype, 'map', {configurable: true, value:\", \"function(callback, thisArg) {\", \"if (this == null || typeof callback !== 'function') new TypeError;\", \"var T, A, k;\", \"var O = Object(this);\", \"var len = O.length >>> 0;\", \"if (arguments.length > 1) T = thisArg;\", \"A = new Array(len);\", \"k = 0;\", \"while (k < len) {\", \"if (k in O) A[k] = callback.call(T, O[k], k, O);\", \"k++;\", \"}\", \"return A;\", \"}\", \"});\", \n        // Polyfill copied from:\n        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\n        \"Object.defineProperty(Array.prototype, 'reduce', {configurable: true, value:\", \"function(callback /*, initialValue*/) {\", \"if (this == null || typeof callback !== 'function') throw new TypeError;\", \"var t = Object(this), len = t.length >>> 0, k = 0, value;\", \"if (arguments.length == 2) {\", \"value = arguments[1];\", \"} else {\", \"while (k < len && !(k in t)) k++;\", \"if (k >= len) {\", \"throw new TypeError('Reduce of empty array with no initial value');\", \"}\", \"value = t[k++];\", \"}\", \"for (; k < len; k++) {\", \"if (k in t) value = callback(value, t[k], k, t);\", \"}\", \"return value;\", \"}\", \"});\", \n        // Polyfill copied from:\n        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\n        \"Object.defineProperty(Array.prototype, 'reduceRight', {configurable: true, value:\", \"function(callback /*, initialValue*/) {\", \"if (null === this || 'undefined' === typeof this || 'function' !== typeof callback) throw new TypeError;\", \"var t = Object(this), len = t.length >>> 0, k = len - 1, value;\", \"if (arguments.length >= 2) {\", \"value = arguments[1];\", \"} else {\", \"while (k >= 0 && !(k in t)) k--;\", \"if (k < 0) {\", \"throw new TypeError('Reduce of empty array with no initial value');\", \"}\", \"value = t[k--];\", \"}\", \"for (; k >= 0; k--) {\", \"if (k in t) value = callback(value, t[k], k, t);\", \"}\", \"return value;\", \"}\", \"});\", \n        // Polyfill copied from:\n        // developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n        \"Object.defineProperty(Array.prototype, 'some', {configurable: true, value:\", \"function(fun/*, thisArg*/) {\", \"if (this == null || typeof fun !== 'function') throw new TypeError;\", \"var t = Object(this);\", \"var len = t.length >>> 0;\", \"var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\", \"for (var i = 0; i < len; i++) {\", \"if (i in t && fun.call(thisArg, t[i], i, t)) {\", \"return true;\", \"}\", \"}\", \"return false;\", \"}\", \"});\", \"Object.defineProperty(Array.prototype, 'sort', {configurable: true, value:\", \"function(opt_comp) {\", \"for (var i = 0; i < this.length; i++) {\", \"var changes = 0;\", \"for (var j = 0; j < this.length - i - 1; j++) {\", \"if (opt_comp ?\" +\n            \"opt_comp(this[j], this[j + 1]) > 0 : this[j] > this[j + 1]) {\", \"var swap = this[j];\", \"this[j] = this[j + 1];\", \"this[j + 1] = swap;\", \"changes++;\", \"}\", \"}\", \"if (changes <= 1) break;\", \"}\", \"return this;\", \"}\", \"});\", \"Object.defineProperty(Array.prototype, 'toLocaleString', {configurable: true, value:\", \"function() {\", \"var out = [];\", \"for (var i = 0; i < this.length; i++) {\", \"out[i] = (this[i] === null || this[i] === undefined) ? '' : this[i].toLocaleString();\", \"}\", \"return out.join(',');\", \"}\", \"});\", \"\");\n    };\n    ;\n    /**\n     * Initialize the Number class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initNumber = function (scope) {\n        var thisInterpreter = this;\n        var wrapper;\n        // Number constructor.\n        wrapper = function (value) {\n            value = value ? value.toNumber() : 0;\n            if (this.parent != thisInterpreter.NUMBER) {\n                // Called as Number().\n                return thisInterpreter.createPrimitive(value);\n            }\n            // Called as new Number().\n            this.data = value;\n            return this;\n        };\n        this.NUMBER = this.createNativeFunction(wrapper);\n        this.setProperty(scope, 'Number', this.NUMBER);\n        this.setProperty(this.NUMBER, 'MAX_VALUE', this.createPrimitive(Number.MAX_VALUE));\n        this.setProperty(this.NUMBER, 'MIN_VALUE', this.createPrimitive(Number.MIN_VALUE));\n        this.setProperty(this.NUMBER, 'NaN', this.createPrimitive(Number.NaN));\n        this.setProperty(this.NUMBER, 'NEGATIVE_INFINITY', this.createPrimitive(Number.NEGATIVE_INFINITY));\n        this.setProperty(this.NUMBER, 'POSITIVE_INFINITY', this.createPrimitive(Number.POSITIVE_INFINITY));\n        // Static methods on Number.\n        wrapper = function (str) {\n            str = str || thisInterpreter.UNDEFINED;\n            return thisInterpreter.createPrimitive(parseFloat(str.toString()));\n        };\n        this.setProperty(this.NUMBER, 'parseFloat', this.createNativeFunction(wrapper));\n        wrapper = function (str, radix) {\n            str = str || thisInterpreter.UNDEFINED;\n            radix = radix || thisInterpreter.UNDEFINED;\n            return thisInterpreter.createPrimitive(parseInt(str.toString(), radix.toNumber()));\n        };\n        this.setProperty(this.NUMBER, 'parseInt', this.createNativeFunction(wrapper));\n        // Instance methods on Number.\n        wrapper = function (fractionDigits) {\n            fractionDigits = fractionDigits ? fractionDigits.toNumber() : undefined;\n            var n = this.toNumber();\n            return thisInterpreter.createPrimitive(n.toExponential(fractionDigits));\n        };\n        this.setNativeFunctionPrototype(this.NUMBER, 'toExponential', wrapper);\n        wrapper = function (digits) {\n            digits = digits ? digits.toNumber() : undefined;\n            var n = this.toNumber();\n            return thisInterpreter.createPrimitive(n.toFixed(digits));\n        };\n        this.setNativeFunctionPrototype(this.NUMBER, 'toFixed', wrapper);\n        wrapper = function (precision) {\n            precision = precision ? precision.toNumber() : undefined;\n            var n = this.toNumber();\n            return thisInterpreter.createPrimitive(n.toPrecision(precision));\n        };\n        this.setNativeFunctionPrototype(this.NUMBER, 'toPrecision', wrapper);\n        wrapper = function (radix) {\n            radix = radix ? radix.toNumber() : 10;\n            var n = this.toNumber();\n            return thisInterpreter.createPrimitive(n.toString(radix));\n        };\n        this.setNativeFunctionPrototype(this.NUMBER, 'toString', wrapper);\n        wrapper = function (locales, options) {\n            locales = locales ? thisInterpreter.pseudoToNative(locales) : undefined;\n            options = options ? thisInterpreter.pseudoToNative(options) : undefined;\n            return thisInterpreter.createPrimitive(this.toNumber().toLocaleString(locales, options));\n        };\n        this.setNativeFunctionPrototype(this.NUMBER, 'toLocaleString', wrapper);\n    };\n    ;\n    /**\n     * Initialize the String class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initString = function (scope) {\n        var thisInterpreter = this;\n        var wrapper;\n        // String constructor.\n        wrapper = function (value) {\n            value = value ? value.toString() : '';\n            if (this.parent != thisInterpreter.STRING) {\n                // Called as String().\n                return thisInterpreter.createPrimitive(value);\n            }\n            // Called as new String().\n            this.data = value;\n            return this;\n        };\n        this.STRING = this.createNativeFunction(wrapper);\n        this.setProperty(scope, 'String', this.STRING);\n        // Static methods on String.\n        wrapper = function (var_args) {\n            for (var i = 0; i < arguments.length; i++) {\n                arguments[i] = arguments[i].toNumber();\n            }\n            return thisInterpreter.createPrimitive(String.fromCharCode.apply(String, arguments));\n        };\n        this.setProperty(this.STRING, 'fromCharCode', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        // Instance methods on String.\n        // Methods with no arguments.\n        var functions = ['toLowerCase', 'toUpperCase',\n            'toLocaleLowerCase', 'toLocaleUpperCase'];\n        for (var i = 0; i < functions.length; i++) {\n            wrapper = (function (nativeFunc) {\n                return function () {\n                    return thisInterpreter.createPrimitive(nativeFunc.apply(this));\n                };\n            })(String.prototype[functions[i]]);\n            this.setNativeFunctionPrototype(this.STRING, functions[i], wrapper);\n        }\n        // Trim function may not exist in host browser.  Write them from scratch.\n        wrapper = function () {\n            var str = this.toString();\n            return thisInterpreter.createPrimitive(str.replace(/^\\s+|\\s+$/g, ''));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'trim', wrapper);\n        wrapper = function () {\n            var str = this.toString();\n            return thisInterpreter.createPrimitive(str.replace(/^\\s+/g, ''));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'trimLeft', wrapper);\n        wrapper = function () {\n            var str = this.toString();\n            return thisInterpreter.createPrimitive(str.replace(/\\s+$/g, ''));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'trimRight', wrapper);\n        // Methods with only numeric arguments.\n        functions = ['charAt', 'charCodeAt', 'substring', 'slice', 'substr'];\n        for (var i = 0; i < functions.length; i++) {\n            wrapper = (function (nativeFunc) {\n                return function () {\n                    for (var j = 0; j < arguments.length; j++) {\n                        arguments[j] = arguments[j].toNumber();\n                    }\n                    return thisInterpreter.createPrimitive(nativeFunc.apply(this, arguments));\n                };\n            })(String.prototype[functions[i]]);\n            this.setNativeFunctionPrototype(this.STRING, functions[i], wrapper);\n        }\n        wrapper = function (searchValue, fromIndex) {\n            var str = this.toString();\n            searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();\n            fromIndex = fromIndex ? fromIndex.toNumber() : undefined;\n            return thisInterpreter.createPrimitive(str.indexOf(searchValue, fromIndex));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'indexOf', wrapper);\n        wrapper = function (searchValue, fromIndex) {\n            var str = this.toString();\n            searchValue = (searchValue || thisInterpreter.UNDEFINED).toString();\n            fromIndex = fromIndex ? fromIndex.toNumber() : undefined;\n            return thisInterpreter.createPrimitive(str.lastIndexOf(searchValue, fromIndex));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'lastIndexOf', wrapper);\n        wrapper = function (compareString, locales, options) {\n            compareString = (compareString || thisInterpreter.UNDEFINED).toString();\n            locales = locales ? thisInterpreter.pseudoToNative(locales) : undefined;\n            options = options ? thisInterpreter.pseudoToNative(options) : undefined;\n            return thisInterpreter.createPrimitive(this.toString().localeCompare(compareString, locales, options));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'localeCompare', wrapper);\n        wrapper = function (separator, limit) {\n            var str = this.toString();\n            if (separator) {\n                separator = utils.isa(separator, thisInterpreter.REGEXP) ?\n                    separator.data : separator.toString();\n            }\n            else {\n                separator = undefined;\n            }\n            limit = limit ? limit.toNumber() : undefined;\n            var jsList = str.split(separator, limit);\n            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            for (var i = 0; i < jsList.length; i++) {\n                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(jsList[i]));\n            }\n            return pseudoList;\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'split', wrapper);\n        wrapper = function (var_args) {\n            var str = this.toString();\n            for (var i = 0; i < arguments.length; i++) {\n                str += arguments[i].toString();\n            }\n            return thisInterpreter.createPrimitive(str);\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'concat', wrapper);\n        wrapper = function (regexp) {\n            var str = this.toString();\n            regexp = regexp ? regexp.data : undefined;\n            var match = str.match(regexp);\n            if (match === null) {\n                return thisInterpreter.NULL;\n            }\n            var pseudoList = thisInterpreter.createObject(thisInterpreter.ARRAY);\n            for (var i = 0; i < match.length; i++) {\n                thisInterpreter.setProperty(pseudoList, i, thisInterpreter.createPrimitive(match[i]));\n            }\n            return pseudoList;\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'match', wrapper);\n        wrapper = function (regexp) {\n            var str = this.toString();\n            regexp = regexp ? regexp.data : undefined;\n            return thisInterpreter.createPrimitive(str.search(regexp));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'search', wrapper);\n        wrapper = function (substr, newSubStr) {\n            var str = this.toString();\n            substr = (substr || thisInterpreter.UNDEFINED).valueOf();\n            newSubStr = (newSubStr || thisInterpreter.UNDEFINED).toString();\n            return thisInterpreter.createPrimitive(str.replace(substr, newSubStr));\n        };\n        this.setNativeFunctionPrototype(this.STRING, 'replace', wrapper);\n    };\n    ;\n    /**\n     * Initialize the Boolean class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initBoolean = function (scope) {\n        var thisInterpreter = this;\n        var wrapper;\n        // Boolean constructor.\n        wrapper = function (value) {\n            value = value ? value.toBoolean() : false;\n            if (this.parent != thisInterpreter.BOOLEAN) {\n                // Called as Boolean().\n                return thisInterpreter.createPrimitive(value);\n            }\n            // Called as new Boolean().\n            this.data = value;\n            return this;\n        };\n        this.BOOLEAN = this.createNativeFunction(wrapper);\n        this.setProperty(scope, 'Boolean', this.BOOLEAN);\n    };\n    ;\n    /**\n     * Initialize the Date class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initDate = function (scope) {\n        var thisInterpreter = this;\n        var wrapper;\n        // Date constructor.\n        wrapper = function (a, b, c, d, e, f, h) {\n            var newDate;\n            if (this.parent == thisInterpreter.DATE) {\n                // Called with new.\n                newDate = this;\n            }\n            else {\n                // Calling Date() as a function returns a string, no arguments are heeded.\n                return thisInterpreter.createPrimitive(Date());\n            }\n            if (!arguments.length) {\n                newDate.data = new Date();\n            }\n            else if (arguments.length == 1 && (a.type == 'string' ||\n                utils.isa(a, thisInterpreter.STRING))) {\n                newDate.data = new Date(a.toString());\n            }\n            else {\n                var args = [null];\n                for (var i = 0; i < arguments.length; i++) {\n                    args[i + 1] = arguments[i] ? arguments[i].toNumber() : undefined;\n                }\n                newDate.data = new (Function.prototype.bind.apply(Date, args));\n            }\n            return newDate;\n        };\n        this.DATE = this.createNativeFunction(wrapper);\n        this.setProperty(scope, 'Date', this.DATE);\n        // Static methods on Date.\n        wrapper = function () {\n            return thisInterpreter.createPrimitive(new Date().getTime());\n        };\n        this.setProperty(this.DATE, 'now', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (dateString) {\n            dateString = dateString ? dateString.toString() : undefined;\n            return thisInterpreter.createPrimitive(Date.parse(dateString));\n        };\n        this.setProperty(this.DATE, 'parse', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (a, b, c, d, e, f, h) {\n            var args = [];\n            for (var i = 0; i < arguments.length; i++) {\n                args[i] = arguments[i] ? arguments[i].toNumber() : undefined;\n            }\n            return thisInterpreter.createPrimitive(Date.UTC.apply(Date, args));\n        };\n        this.setProperty(this.DATE, 'UTC', this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        // Instance methods on Date.\n        var functions = ['getDate', 'getDay', 'getFullYear', 'getHours',\n            'getMilliseconds', 'getMinutes', 'getMonth', 'getSeconds', 'getTime',\n            'getTimezoneOffset', 'getUTCDate', 'getUTCDay', 'getUTCFullYear',\n            'getUTCHours', 'getUTCMilliseconds', 'getUTCMinutes', 'getUTCMonth',\n            'getUTCSeconds', 'getYear',\n            'setDate', 'setFullYear', 'setHours', 'setMilliseconds',\n            'setMinutes', 'setMonth', 'setSeconds', 'setTime', 'setUTCDate',\n            'setUTCFullYear', 'setUTCHours', 'setUTCMilliseconds', 'setUTCMinutes',\n            'setUTCMonth', 'setUTCSeconds', 'setYear',\n            'toDateString', 'toISOString', 'toJSON', 'toGMTString',\n            'toLocaleDateString', 'toLocaleString', 'toLocaleTimeString',\n            'toTimeString', 'toUTCString'];\n        for (var i = 0; i < functions.length; i++) {\n            wrapper = (function (nativeFunc) {\n                return function (var_args) {\n                    var args = [];\n                    for (var i_1 = 0; i_1 < arguments.length; i_1++) {\n                        args[i_1] = thisInterpreter.pseudoToNative(arguments[i_1]);\n                    }\n                    return thisInterpreter.createPrimitive(this.data[nativeFunc].apply(this.data, args));\n                };\n            })(functions[i]);\n            this.setNativeFunctionPrototype(this.DATE, functions[i], wrapper);\n        }\n    };\n    ;\n    /**\n     * Initialize Math object.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initMath = function (scope) {\n        var thisInterpreter = this;\n        var myMath = this.createObject(this.OBJECT);\n        this.setProperty(scope, 'Math', myMath);\n        this.setProperty(myMath, 'E', this.createPrimitive(Math.E), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(myMath, 'LN2', this.createPrimitive(Math.LN2), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(myMath, 'LN10', this.createPrimitive(Math.LN10), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(myMath, 'LOG2E', this.createPrimitive(Math.LOG2E), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(myMath, 'LOG10E', this.createPrimitive(Math.LOG10E), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(myMath, 'PI', this.createPrimitive(Math.PI), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(myMath, 'SQRT1_2', this.createPrimitive(Math.SQRT1_2), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(myMath, 'SQRT2', this.createPrimitive(Math.SQRT2), READONLY_NONENUMERABLE_DESCRIPTOR);\n        var numFunctions = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos',\n            'exp', 'floor', 'log', 'max', 'min', 'pow', 'random',\n            'round', 'sin', 'sqrt', 'tan'];\n        for (var i = 0; i < numFunctions.length; i++) {\n            var wrapper = (function (nativeFunc) {\n                return function () {\n                    for (var j = 0; j < arguments.length; j++) {\n                        arguments[j] = arguments[j].toNumber();\n                    }\n                    return thisInterpreter.createPrimitive(nativeFunc.apply(Math, arguments));\n                };\n            })(Math[numFunctions[i]]);\n            this.setProperty(myMath, numFunctions[i], this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n        }\n    };\n    ;\n    /**\n     * Initialize Regular Expression object.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initRegExp = function (scope) {\n        var thisInterpreter = this;\n        var wrapper;\n        // Regex constructor.\n        wrapper = function (pattern, flags) {\n            var rgx;\n            if (this.parent == thisInterpreter.REGEXP) {\n                // Called with new.\n                rgx = this;\n            }\n            else {\n                rgx = thisInterpreter.createObject(thisInterpreter.REGEXP);\n            }\n            pattern = pattern ? pattern.toString() : '';\n            flags = flags ? flags.toString() : '';\n            return thisInterpreter.populateRegExp_(rgx, new RegExp(pattern, flags));\n        };\n        this.REGEXP = this.createNativeFunction(wrapper);\n        this.setProperty(scope, 'RegExp', this.REGEXP);\n        this.setProperty(this.REGEXP.properties.prototype, 'global', this.UNDEFINED, READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(this.REGEXP.properties.prototype, 'ignoreCase', this.UNDEFINED, READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(this.REGEXP.properties.prototype, 'multiline', this.UNDEFINED, READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(this.REGEXP.properties.prototype, 'source', this.createPrimitive('(?:)'), READONLY_NONENUMERABLE_DESCRIPTOR);\n        wrapper = function (str) {\n            str = str.toString();\n            return thisInterpreter.createPrimitive(this.data.test(str));\n        };\n        this.setNativeFunctionPrototype(this.REGEXP, 'test', wrapper);\n        wrapper = function (str) {\n            str = str.toString();\n            // Get lastIndex from wrapped regex, since this is settable.\n            this.data.lastIndex =\n                thisInterpreter.getProperty(this, 'lastIndex').toNumber();\n            var match = this.data.exec(str);\n            thisInterpreter.setProperty(this, 'lastIndex', thisInterpreter.createPrimitive(this.data.lastIndex));\n            if (match) {\n                var result = thisInterpreter.createObject(thisInterpreter.ARRAY);\n                for (var i = 0; i < match.length; i++) {\n                    thisInterpreter.setProperty(result, i, thisInterpreter.createPrimitive(match[i]));\n                }\n                // match has additional properties.\n                thisInterpreter.setProperty(result, 'index', thisInterpreter.createPrimitive(match.index));\n                thisInterpreter.setProperty(result, 'input', thisInterpreter.createPrimitive(match.input));\n                return result;\n            }\n            return thisInterpreter.NULL;\n        };\n        this.setNativeFunctionPrototype(this.REGEXP, 'exec', wrapper);\n    };\n    ;\n    /**\n     * Initialize JSON object.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initJSON = function (scope) {\n        var _this = this;\n        var myJSON = this.createObject(this.OBJECT);\n        this.setProperty(scope, 'JSON', myJSON);\n        this.setProperty(myJSON, 'parse', this.createNativeFunction(function (text) {\n            var nativeObj = JSON.parse(text.toString());\n            return _this.nativeToPseudo(nativeObj);\n        }));\n        this.setProperty(myJSON, 'stringify', this.createNativeFunction(function (value) {\n            var nativeObj = _this.pseudoToNative(value);\n            return _this.createPrimitive(JSON.stringify(nativeObj));\n        }));\n    };\n    ;\n    /**\n     * Initialize the Error class.\n     * @param {!JsObject} scope Global scope.\n     */\n    Interpreter.prototype.initError = function (scope) {\n        var thisInterpreter = this;\n        // Error constructor.\n        this.ERROR = this.createNativeFunction(function (opt_message) {\n            var newError;\n            if (this.parent == thisInterpreter.ERROR) {\n                // Called with new.\n                newError = this;\n            }\n            else {\n                newError = thisInterpreter.createObject(thisInterpreter.ERROR);\n            }\n            if (opt_message) {\n                thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), NONENUMERABLE_DESCRIPTOR);\n            }\n            return newError;\n        });\n        this.setProperty(scope, 'Error', this.ERROR);\n        this.setProperty(this.ERROR.properties.prototype, 'message', this.STRING_EMPTY, NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(this.ERROR.properties.prototype, 'name', this.createPrimitive('Error'), NONENUMERABLE_DESCRIPTOR);\n        var createErrorSubclass = function (name) {\n            var constructor = thisInterpreter.createNativeFunction(function (opt_message) {\n                var newError;\n                if (utils.isa(this.parent, thisInterpreter.ERROR)) {\n                    // Called with new.\n                    newError = this;\n                }\n                else {\n                    newError = thisInterpreter.createObject(constructor);\n                }\n                if (opt_message) {\n                    thisInterpreter.setProperty(newError, 'message', thisInterpreter.createPrimitive(String(opt_message)), NONENUMERABLE_DESCRIPTOR);\n                }\n                return newError;\n            });\n            thisInterpreter.setProperty(constructor, 'prototype', thisInterpreter.createObject(thisInterpreter.ERROR));\n            thisInterpreter.setProperty(constructor.properties.prototype, 'name', thisInterpreter.createPrimitive(name), NONENUMERABLE_DESCRIPTOR);\n            thisInterpreter.setProperty(scope, name, constructor);\n            return constructor;\n        };\n        this.EVAL_ERROR = createErrorSubclass('EvalError');\n        this.RANGE_ERROR = createErrorSubclass('RangeError');\n        this.REFERENCE_ERROR = createErrorSubclass('ReferenceError');\n        this.SYNTAX_ERROR = createErrorSubclass('SyntaxError');\n        this.TYPE_ERROR = createErrorSubclass('TypeError');\n        this.URI_ERROR = createErrorSubclass('URIError');\n    };\n    ;\n    /**\n     * Create a new data object for a primitive.\n     * @param {number|string|boolean|null|undefined|RegExp} data Data to\n     *     encapsulate.\n     * @return {!Primitive|!JsObject} New data object.\n     */\n    Interpreter.prototype.createPrimitive = function (data) {\n        // Reuse a predefined primitive constant if possible.\n        if (data === undefined) {\n            return this.UNDEFINED;\n        }\n        else if (data === null) {\n            return this.NULL;\n        }\n        else if (data === true) {\n            return this.TRUE;\n        }\n        else if (data === false) {\n            return this.FALSE;\n        }\n        else if (data === 0) {\n            return this.NUMBER_ZERO;\n        }\n        else if (data === 1) {\n            return this.NUMBER_ONE;\n        }\n        else if (data === '') {\n            return this.STRING_EMPTY;\n        }\n        else if (data instanceof RegExp) {\n            return this.populateRegExp_(this.createObject(this.REGEXP), data);\n        }\n        return new Primitive_1.default(data, this);\n    };\n    ;\n    /**\n     * Create a new data object.\n     * @param {JsObject} parent Parent constructor function.\n     * @return {!JsObject} New data object.\n     */\n    Interpreter.prototype.createObject = function (parent) {\n        var obj = new JsObject_1.default(parent);\n        // Functions have prototype objects.\n        if (utils.isa(obj, this.FUNCTION)) {\n            obj.type = 'function';\n            this.setProperty(obj, 'prototype', this.createObject(this.OBJECT || null));\n        }\n        // Arrays have length.\n        if (utils.isa(obj, this.ARRAY)) {\n            obj.length = 0;\n            obj.toString = function () {\n                var strs = [];\n                for (var i = 0; i < this.length; i++) {\n                    var value = this.properties[i];\n                    strs[i] = (!value || (value.isPrimitive && (value.data === null ||\n                        value.data === undefined))) ? '' : value.toString();\n                }\n                return strs.join(',');\n            };\n        }\n        return obj;\n    };\n    ;\n    /**\n     * Initialize a pseudo regular expression object based on a native regular\n     * expression object.\n     * @param {!JsObject} pseudoRegexp The existing object to set.\n     * @param {!RegExp} nativeRegexp The native regular expression.\n     * @return {!JsObject} Newly populated regular expression object.\n     * @private\n     */\n    Interpreter.prototype.populateRegExp_ = function (pseudoRegexp, nativeRegexp) {\n        pseudoRegexp.data = nativeRegexp;\n        // lastIndex is settable, all others are read-only attributes\n        this.setProperty(pseudoRegexp, 'lastIndex', this.createPrimitive(nativeRegexp.lastIndex), NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(pseudoRegexp, 'source', this.createPrimitive(nativeRegexp.source), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(pseudoRegexp, 'global', this.createPrimitive(nativeRegexp.global), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(pseudoRegexp, 'ignoreCase', this.createPrimitive(nativeRegexp.ignoreCase), READONLY_NONENUMERABLE_DESCRIPTOR);\n        this.setProperty(pseudoRegexp, 'multiline', this.createPrimitive(nativeRegexp.multiline), READONLY_NONENUMERABLE_DESCRIPTOR);\n        // Override a couple of Object's conversion functions.\n        pseudoRegexp.toString = function () { return String(this.data); };\n        pseudoRegexp.valueOf = function () { return this.data; };\n        return pseudoRegexp;\n    };\n    ;\n    /**\n     * Create a new function.\n     * @param {Object} node AST node defining the function.\n     * @param {Object=} opt_scope Optional parent scope.\n     * @return {!JsObject} New function.\n     */\n    Interpreter.prototype.createFunction = function (node, opt_scope) {\n        var func = this.createObject(this.FUNCTION);\n        func.parentScope = opt_scope || this.getScope();\n        func.node = node;\n        this.setProperty(func, 'length', this.createPrimitive(func.node.params.length), READONLY_DESCRIPTOR);\n        return func;\n    };\n    ;\n    /**\n     * Create a new native function.\n     * @param {!Function} nativeFunc JavaScript function.\n     * @return {!JsObject} New function.\n     */\n    Interpreter.prototype.createNativeFunction = function (nativeFunc) {\n        var func = this.createObject(this.FUNCTION);\n        func.nativeFunc = nativeFunc;\n        this.setProperty(func, 'length', this.createPrimitive(nativeFunc.length), READONLY_DESCRIPTOR);\n        return func;\n    };\n    ;\n    /**\n     * Create a new native asynchronous function.\n     * @param {!Function} asyncFunc JavaScript function.\n     * @return {!JsObject} New function.\n     */\n    Interpreter.prototype.createAsyncFunction = function (asyncFunc) {\n        var func = this.createObject(this.FUNCTION);\n        func.asyncFunc = asyncFunc;\n        this.setProperty(func, 'length', this.createPrimitive(asyncFunc.length), READONLY_DESCRIPTOR);\n        return func;\n    };\n    ;\n    /**\n     * Converts from a native JS object or value to a JS interpreter object.\n     * Can handle JSON-style values.\n     * @param {*} nativeObj The native JS object to be converted.\n     * @return {!JsObject|!Primitive} The equivalent\n     *     JS interpreter object.\n     */\n    Interpreter.prototype.nativeToPseudo = function (nativeObj) {\n        if (typeof nativeObj == 'boolean' ||\n            typeof nativeObj == 'number' ||\n            typeof nativeObj == 'string' ||\n            nativeObj === null || nativeObj === undefined ||\n            nativeObj instanceof RegExp) {\n            return this.createPrimitive(nativeObj);\n        }\n        var pseudoObj;\n        if (nativeObj instanceof Array) {\n            pseudoObj = this.createObject(this.ARRAY);\n            for (var i = 0; i < nativeObj.length; i++) {\n                this.setProperty(pseudoObj, i, this.nativeToPseudo(nativeObj[i]));\n            }\n        }\n        else {\n            pseudoObj = this.createObject(this.OBJECT);\n            for (var key in nativeObj) {\n                this.setProperty(pseudoObj, key, this.nativeToPseudo(nativeObj[key]));\n            }\n        }\n        return pseudoObj;\n    };\n    ;\n    /**\n     * Converts from a JS interpreter object to native JS object.\n     * Can handle JSON-style values.\n     * @param {!JsObject|!Primitive} pseudoObj The JS\n     *     interpreter object to be converted.\n     * @return {*} The equivalent native JS object or value.\n     */\n    Interpreter.prototype.pseudoToNative = function (pseudoObj) {\n        if (pseudoObj.isPrimitive ||\n            utils.isa(pseudoObj, this.NUMBER) ||\n            utils.isa(pseudoObj, this.STRING) ||\n            utils.isa(pseudoObj, this.BOOLEAN)) {\n            return pseudoObj.data;\n        }\n        var nativeObj;\n        if (utils.isa(pseudoObj, this.ARRAY)) {\n            nativeObj = [];\n            for (var i = 0; i < pseudoObj.length; i++) {\n                nativeObj[i] = this.pseudoToNative(pseudoObj.properties[i]);\n            }\n        }\n        else {\n            nativeObj = {};\n            for (var key in pseudoObj.properties) {\n                nativeObj[key] = this.pseudoToNative(pseudoObj.properties[key]);\n            }\n        }\n        return nativeObj;\n    };\n    ;\n    /**\n     * Fetch a property value from a data object.\n     * @param {!JsObject|!Primitive} obj Data object.\n     * @param {*} name Name of property.\n     * @return {!JsObject|!Primitive|null} Property value\n     *     (may be UNDEFINED), or null if an error was thrown and will be caught.\n     */\n    Interpreter.prototype.getProperty = function (obj, name) {\n        name = name.toString();\n        if (obj == this.UNDEFINED || obj == this.NULL) {\n            this.throwException(this.TYPE_ERROR, \"Cannot read property '\" + name + \"' of \" + obj);\n            return null;\n        }\n        // Special cases for magic length property.\n        if (utils.isa(obj, this.STRING)) {\n            if (name == 'length') {\n                return this.createPrimitive(obj.data.length);\n            }\n            var n = utils.arrayIndex(name);\n            if (!isNaN(n) && n < obj.data.length) {\n                return this.createPrimitive(obj.data[n]);\n            }\n        }\n        else if (utils.isa(obj, this.ARRAY) && name == 'length') {\n            return this.createPrimitive(obj.length);\n        }\n        while (true) {\n            if (obj.properties && name in obj.properties) {\n                var getter = obj.getter[name];\n                if (getter) {\n                    // Flag this function as being a getter and thus needing immediate\n                    // execution (rather than being the value of the property).\n                    getter.isGetter = true;\n                    return getter;\n                }\n                return obj.properties[name];\n            }\n            if (obj.parent && obj.parent.properties &&\n                obj.parent.properties.prototype) {\n                obj = obj.parent.properties.prototype;\n            }\n            else {\n                // No parent, reached the top.\n                break;\n            }\n        }\n        return this.UNDEFINED;\n    };\n    ;\n    /**\n     * Does the named property exist on a data object.\n     * @param {!JsObject|!Primitive} obj Data object.\n     * @param {*} name Name of property.\n     * @return {boolean} True if property exists.\n     */\n    Interpreter.prototype.hasProperty = function (obj, name) {\n        name = name.toString();\n        if (obj.isPrimitive)\n            throw TypeError('Primitive data type has no properties');\n        if (name == 'length' && (utils.isa(obj, this.STRING) || utils.isa(obj, this.ARRAY))) {\n            return true;\n        }\n        if (utils.isa(obj, this.STRING)) {\n            var n = utils.arrayIndex(name);\n            if (!isNaN(n) && n < obj.data.length)\n                return true;\n        }\n        while (true) {\n            if (obj.properties && name in obj.properties)\n                return true;\n            if (obj.parent && obj.parent.properties && obj.parent.properties.prototype) {\n                obj = obj.parent.properties.prototype;\n            }\n            else {\n                // No parent, reached the top.\n                break;\n            }\n        }\n        return false;\n    };\n    ;\n    /**\n     * Set a property value on a data object.\n     * @param {!JsObject} obj Data object.\n     * @param {*} name Name of property.\n     * @param {JsObject|Primitive} value\n     *     New property value or null if getter/setter is described.\n     * @param {Object=} opt_descriptor Optional descriptor object.\n     * @return {!JsObject|undefined} Returns a setter function if one\n     *     needs to be called, otherwise undefined.\n     */\n    Interpreter.prototype.setProperty = function (obj, name, value, opt_descriptor) {\n        name = name.toString();\n        if (opt_descriptor && obj.notConfigurable[name]) {\n            this.throwException(this.TYPE_ERROR, \"Cannot redefine property: \" + name);\n        }\n        if (typeof value != 'object') {\n            throw Error(\"Failure to wrap a value: \" + value + \"'\");\n        }\n        if (obj == this.UNDEFINED || obj == this.NULL) {\n            this.throwException(this.TYPE_ERROR, \"Cannot set property '\" + name + \"' of \" + obj);\n        }\n        if (opt_descriptor && (opt_descriptor.get || opt_descriptor.set) &&\n            (value || opt_descriptor.writable !== undefined)) {\n            this.throwException(this.TYPE_ERROR, 'Invalid property descriptor. ' +\n                'Cannot both specify accessors and a value or writable attribute');\n        }\n        if (obj.isPrimitive) {\n            return;\n        }\n        if (utils.isa(obj, this.STRING)) {\n            var n = utils.arrayIndex(name);\n            if (name == 'length' || (!isNaN(n) && n < obj.data.length)) {\n                // Can't set length or letters on Strings.\n                return;\n            }\n        }\n        if (utils.isa(obj, this.ARRAY)) {\n            // Arrays have a magic length variable that is bound to the elements.\n            var i = void 0;\n            if (name == 'length') {\n                // Delete elements if length is smaller.\n                var newLength = utils.arrayIndex(value.toNumber());\n                if (isNaN(newLength)) {\n                    this.throwException(this.RANGE_ERROR, 'Invalid array length');\n                }\n                if (newLength < obj.length) {\n                    for (i in obj.properties) {\n                        i = utils.arrayIndex(i);\n                        if (!isNaN(i) && newLength <= i) {\n                            delete obj.properties[i];\n                        }\n                    }\n                }\n                obj.length = newLength;\n                return; // Don't set a real length property.\n            }\n            else if (!isNaN(i = utils.arrayIndex(name))) {\n                // Increase length if this index is larger.\n                obj.length = Math.max(obj.length, i + 1);\n            }\n        }\n        if (!obj.properties[name] && obj.preventExtensions) {\n            var scope = this.getScope();\n            if (scope.strict) {\n                this.throwException(this.TYPE_ERROR, \"Can't add property \" + name + \" object is not extensible\");\n            }\n            return;\n        }\n        if (opt_descriptor) {\n            // Define the property.\n            obj.properties[name] = value;\n            if (!opt_descriptor.configurable) {\n                obj.notConfigurable[name] = true;\n            }\n            var getter = opt_descriptor.get;\n            if (getter) {\n                obj.getter[name] = getter;\n            }\n            else {\n                delete obj.getter[name];\n            }\n            var setter = opt_descriptor.set;\n            if (setter) {\n                obj.setter[name] = setter;\n            }\n            else {\n                delete obj.setter[name];\n            }\n            var enumerable = opt_descriptor.enumerable || false;\n            if (enumerable) {\n                delete obj.notEnumerable[name];\n            }\n            else {\n                obj.notEnumerable[name] = true;\n            }\n            if (getter || setter) {\n                delete obj.notWritable[name];\n                obj.properties[name] = this.UNDEFINED;\n            }\n            else {\n                var writable = opt_descriptor.writable || false;\n                if (writable) {\n                    delete obj.notWritable[name];\n                }\n                else {\n                    obj.notWritable[name] = true;\n                }\n            }\n        }\n        else {\n            // Set the property.\n            // Determine if there is a setter anywhere in the history chain.\n            var parent_1 = obj;\n            while (true) {\n                if (parent_1.setter && parent_1.setter[name]) {\n                    return parent_1.setter[name];\n                }\n                if (parent_1.parent && parent_1.parent.properties &&\n                    parent_1.parent.properties.prototype) {\n                    parent_1 = parent_1.parent.properties.prototype;\n                }\n                else {\n                    // No parent, reached the top.\n                    break;\n                }\n            }\n            // No setter, simple assignment.\n            if (!obj.notWritable[name]) {\n                obj.properties[name] = value;\n            }\n        }\n    };\n    ;\n    /**\n     * Convenience method for adding a native function as a non-enumerable property\n     * onto an object's prototype.\n     * @param {!JsObject} obj Data object.\n     * @param {*} name Name of property.\n     * @param {!Function} wrapper Function object.\n     */\n    Interpreter.prototype.setNativeFunctionPrototype = function (obj, name, wrapper) {\n        this.setProperty(obj.properties.prototype, name, this.createNativeFunction(wrapper), NONENUMERABLE_DESCRIPTOR);\n    };\n    ;\n    /**\n     * Delete a property value on a data object.\n     * @param {!JsObject} obj Data object.\n     * @param {*} name Name of property.\n     * @return {boolean} True if deleted, false if undeletable.\n     */\n    Interpreter.prototype.deleteProperty = function (obj, name) {\n        name = name.toString();\n        if (obj.isPrimitive || obj.notWritable[name]) {\n            return false;\n        }\n        if (name == 'length' && utils.isa(obj, this.ARRAY)) {\n            return false;\n        }\n        return delete obj.properties[name];\n    };\n    ;\n    /**\n     * Returns the current scope from the stateStack.\n     * @return {!JsObject} Current scope dictionary.\n     */\n    Interpreter.prototype.getScope = function () {\n        for (var i = 0; i < this.stateStack.length; i++) {\n            if (this.stateStack[i].scope) {\n                return this.stateStack[i].scope;\n            }\n        }\n        throw Error('No scope found.');\n    };\n    ;\n    /**\n     * Create a new scope dictionary.\n     * @param {!Object} node AST node defining the scope container\n     *     (e.g. a function).\n     * @param {JsObject} parentScope Scope to link to.\n     * @return {!JsObject} New scope.\n     */\n    Interpreter.prototype.createScope = function (node, parentScope) {\n        var scope = this.createObject(null);\n        scope.parentScope = parentScope;\n        if (!parentScope) {\n            this.initGlobalScope(scope);\n        }\n        this.populateScope_(node, scope);\n        // Determine if this scope starts with 'use strict'.\n        scope.strict = false;\n        if (parentScope && parentScope.strict) {\n            scope.strict = true;\n        }\n        else {\n            var firstNode = node.body && node.body[0];\n            if (firstNode && firstNode.expression &&\n                firstNode.expression.type == 'Literal' &&\n                firstNode.expression.value == 'use strict') {\n                scope.strict = true;\n            }\n        }\n        return scope;\n    };\n    ;\n    /**\n     * Create a new special scope dictionary. Similar to createScope(), but\n     * doesn't assume that the scope is for a function body. This is used for\n     * the catch clause and with statement.\n     * @param {!JsObject} parentScope Scope to link to.\n     * @param {JsObject=} opt_scope Optional object to transform into\n     *     scope.\n     * @return {!JsObject} New scope.\n     */\n    Interpreter.prototype.createSpecialScope = function (parentScope, opt_scope) {\n        if (!parentScope) {\n            throw Error('parentScope required');\n        }\n        var scope = opt_scope || this.createObject(null);\n        scope.parentScope = parentScope;\n        scope.strict = parentScope.strict;\n        return scope;\n    };\n    ;\n    /**\n     * Retrieves a value from the scope chain.\n     * @param {!JsObject|!Primitive} name Name of variable.\n     * @return {!JsObject|!Primitive|null} The value\n     *     or null if an error was thrown and will be caught.\n     */\n    Interpreter.prototype.getValueFromScope = function (name) {\n        var scope = this.getScope();\n        var nameStr = name.toString();\n        while (scope) {\n            if (nameStr in scope.properties) {\n                return scope.properties[nameStr];\n            }\n            scope = scope.parentScope;\n        }\n        this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');\n        return null;\n    };\n    ;\n    /**\n     * Sets a value to the current scope.\n     * @param {!JsObject|!Primitive} name Name of variable.\n     * @param {!JsObject|!Primitive} value Value.\n     */\n    Interpreter.prototype.setValueToScope = function (name, value) {\n        var scope = this.getScope();\n        var strict = scope.strict;\n        var nameStr = name.toString();\n        while (scope) {\n            if ((nameStr in scope.properties) || (!strict && !scope.parentScope)) {\n                if (!scope.notWritable[nameStr]) {\n                    scope.properties[nameStr] = value;\n                }\n                return;\n            }\n            scope = scope.parentScope;\n        }\n        this.throwException(this.REFERENCE_ERROR, nameStr + ' is not defined');\n    };\n    ;\n    /**\n     * Create a new scope for the given node.\n     * @param {!Object} node AST node (program or function).\n     * @param {!JsObject} scope Scope dictionary to populate.\n     * @private\n     */\n    Interpreter.prototype.populateScope_ = function (node, scope) {\n        if (node.type == 'VariableDeclaration') {\n            for (var i = 0; i < node.declarations.length; i++) {\n                this.setProperty(scope, node.declarations[i].id.name, this.UNDEFINED);\n            }\n        }\n        else if (node.type == 'FunctionDeclaration') {\n            this.setProperty(scope, node.id.name, this.createFunction(node, scope));\n            return; // Do not recurse into function.\n        }\n        else if (node.type == 'FunctionExpression') {\n            return; // Do not recurse into function.\n        }\n        var parent = node.constructor;\n        for (var name_1 in node) {\n            var prop = node[name_1];\n            if (prop && typeof prop == 'object') {\n                if (prop instanceof Array) {\n                    for (var i = 0; i < prop.length; i++) {\n                        if (prop[i] && prop[i].constructor == parent) {\n                            this.populateScope_(prop[i], scope);\n                        }\n                    }\n                }\n                else {\n                    if (prop.constructor == parent) {\n                        this.populateScope_(prop, scope);\n                    }\n                }\n            }\n        }\n    };\n    ;\n    /**\n     * Gets a value from the scope chain or from an object property.\n     * @param {!JsObject|!Primitive|!Array} left\n     *     Name of variable or object/propname tuple.\n     * @return {!JsObject|!Primitive|null} Value\n     *     or null if an error was thrown and will be caught.\n     */\n    Interpreter.prototype.getValue = function (left) {\n        if (left instanceof Array) {\n            var obj = left[0], prop = left[1];\n            return this.getProperty(obj, prop);\n        }\n        else {\n            return this.getValueFromScope(left);\n        }\n    };\n    ;\n    /**\n     * Sets a value to the scope chain or to an object property.\n     * @param {!JsObject|!Primitive|!Array} left\n     *     Name of variable or object/propname tuple.\n     * @param {!JsObject|!Primitive} value Value.\n     * @return {!JsObject|undefined} Returns a setter function if one\n     *     needs to be called, otherwise undefined.\n     */\n    Interpreter.prototype.setValue = function (left, value) {\n        if (left instanceof Array) {\n            var obj = left[0], prop = left[1];\n            return this.setProperty(obj, prop, value);\n        }\n        else {\n            this.setValueToScope(left, value);\n            return undefined;\n        }\n    };\n    ;\n    /**\n     * Throw an exception in the interpreter that can be handled by a\n     * interpreter try/catch statement.  If unhandled, a real exception will\n     * be thrown.  Can be called with either an error class and a message, or\n     * with an actual object to be thrown.\n     * @param {!JsObject} errorClass Type of error (if message is\n     *   provided) or the value to throw (if no message).\n     * @param {string=} opt_message Message being thrown.\n     */\n    Interpreter.prototype.throwException = function (errorClass, opt_message) {\n        var error;\n        if (this.stateStack[0].interpreter) {\n            // This is the wrong interpreter, we are spinning on an eval.\n            try {\n                this.stateStack[0].interpreter.throwException(errorClass, opt_message);\n                return;\n            }\n            catch (e) {\n            }\n        }\n        if (opt_message === undefined) {\n            error = errorClass;\n        }\n        else {\n            error = this.createObject(errorClass);\n            this.setProperty(error, 'message', this.createPrimitive(opt_message), NONENUMERABLE_DESCRIPTOR);\n        }\n        // Search for a try statement with a catch clause.\n        var state;\n        do {\n            state = this.stateStack.shift();\n        } while (state && !(state.node.type === 'TryStatement' && state.node.handler));\n        if (state) {\n            // Error is being trapped.\n            this.stateStack.unshift({\n                node: state.node.handler,\n                throwValue: error\n            });\n        }\n        else {\n            // Throw a real error.\n            var realError = void 0;\n            if (utils.isa(error, this.ERROR)) {\n                var errorTable = {\n                    EvalError: EvalError,\n                    RangeError: RangeError,\n                    ReferenceError: ReferenceError,\n                    SyntaxError: SyntaxError,\n                    TypeError: TypeError,\n                    URIError: URIError,\n                };\n                var name_2 = this.getProperty(error, 'name').toString();\n                var message = this.getProperty(error, 'message').valueOf();\n                var type = errorTable[name_2] || Error;\n                realError = type(message);\n            }\n            else {\n                realError = error.toString();\n            }\n            throw realError;\n        }\n    };\n    ;\n    // Functions to handle each node type.\n    Interpreter.prototype.stepArrayExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        var n = state.n || 0;\n        if (!state.array) {\n            state.array = this.createObject(this.ARRAY);\n        }\n        else if (state.value) {\n            this.setProperty(state.array, n - 1, state.value);\n        }\n        if (n < node.elements.length) {\n            state.n = n + 1;\n            if (node.elements[n]) {\n                this.stateStack.unshift({ node: node.elements[n] });\n            }\n            else {\n                // [0, 1, , 3][2] -> undefined\n                // Missing elements are not defined, they aren't undefined.\n                state.value = undefined;\n            }\n        }\n        else {\n            state.array.length = state.n || 0;\n            this.stateStack.shift();\n            this.stateStack[0].value = state.array;\n        }\n    };\n    ;\n    Interpreter.prototype.stepAssignmentExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneLeft) {\n            state.doneLeft = true;\n            this.stateStack.unshift({ node: node.left, components: true });\n            return;\n        }\n        if (!state.doneRight) {\n            if (!state.leftSide) {\n                state.leftSide = state.value;\n            }\n            if (state.doneGetter_) {\n                state.leftValue = state.value;\n            }\n            if (!state.doneGetter_ && node.operator != '=') {\n                state.leftValue = this.getValue(state.leftSide);\n                if (state.leftValue.isGetter) {\n                    // Clear the getter flag and call the getter function.\n                    state.leftValue.isGetter = false;\n                    state.doneGetter_ = true;\n                    this.stateStack.unshift({\n                        node: { type: 'CallExpression' },\n                        doneCallee_: true,\n                        funcThis_: state.leftSide[0],\n                        func_: state.leftValue,\n                        doneArgs_: true,\n                        arguments: []\n                    });\n                    return;\n                }\n            }\n            state.doneRight = true;\n            this.stateStack.unshift({ node: node.right });\n            return;\n        }\n        if (state.doneSetter_) {\n            // Return if setter function.\n            // Setter method on property has completed.\n            // Ignore its return value, and use the original set value instead.\n            this.stateStack.shift();\n            this.stateStack[0].value = state.doneSetter_;\n            return;\n        }\n        var rightSide = state.value;\n        var value;\n        if (node.operator == '=') {\n            value = rightSide;\n        }\n        else {\n            var rightValue = rightSide;\n            var leftNumber = state.leftValue.toNumber();\n            var rightNumber = rightValue.toNumber();\n            if (node.operator == '+=') {\n                var left = void 0, right = void 0;\n                if (state.leftValue.type == 'string' || rightValue.type == 'string') {\n                    left = state.leftValue.toString();\n                    right = rightValue.toString();\n                }\n                else {\n                    left = leftNumber;\n                    right = rightNumber;\n                }\n                value = left + right;\n            }\n            else if (node.operator == '-=') {\n                value = leftNumber - rightNumber;\n            }\n            else if (node.operator == '*=') {\n                value = leftNumber * rightNumber;\n            }\n            else if (node.operator == '/=') {\n                value = leftNumber / rightNumber;\n            }\n            else if (node.operator == '%=') {\n                value = leftNumber % rightNumber;\n            }\n            else if (node.operator == '<<=') {\n                value = leftNumber << rightNumber;\n            }\n            else if (node.operator == '>>=') {\n                value = leftNumber >> rightNumber;\n            }\n            else if (node.operator == '>>>=') {\n                value = leftNumber >>> rightNumber;\n            }\n            else if (node.operator == '&=') {\n                value = leftNumber & rightNumber;\n            }\n            else if (node.operator == '^=') {\n                value = leftNumber ^ rightNumber;\n            }\n            else if (node.operator == '|=') {\n                value = leftNumber | rightNumber;\n            }\n            else {\n                throw SyntaxError('Unknown assignment expression: ' + node.operator);\n            }\n            value = this.createPrimitive(value);\n        }\n        var setter = this.setValue(state.leftSide, value);\n        if (setter) {\n            state.doneSetter_ = value;\n            this.stateStack.unshift({\n                node: { type: 'CallExpression' },\n                doneCallee_: true,\n                funcThis_: state.leftSide[0],\n                func_: setter,\n                doneArgs_: true,\n                arguments: [value]\n            });\n            return;\n        }\n        // Return if no setter function.\n        this.stateStack.shift();\n        this.stateStack[0].value = value;\n    };\n    ;\n    Interpreter.prototype.stepBinaryExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneLeft) {\n            state.doneLeft = true;\n            this.stateStack.unshift({ node: node.left });\n            return;\n        }\n        if (!state.doneRight) {\n            state.doneRight = true;\n            state.leftValue = state.value;\n            this.stateStack.unshift({ node: node.right });\n            return;\n        }\n        this.stateStack.shift();\n        var leftSide = state.leftValue;\n        var rightSide = state.value;\n        var value;\n        var comp = utils.comp(leftSide, rightSide);\n        if (node.operator == '==' || node.operator == '!=') {\n            if (leftSide.isPrimitive && rightSide.isPrimitive) {\n                value = leftSide.data == rightSide.data;\n            }\n            else {\n                value = comp === 0;\n            }\n            if (node.operator == '!=') {\n                value = !value;\n            }\n        }\n        else if (node.operator == '===' || node.operator == '!==') {\n            if (leftSide.isPrimitive && rightSide.isPrimitive) {\n                value = leftSide.data === rightSide.data;\n            }\n            else {\n                value = leftSide === rightSide;\n            }\n            if (node.operator == '!==') {\n                value = !value;\n            }\n        }\n        else if (node.operator == '>') {\n            value = comp == 1;\n        }\n        else if (node.operator == '>=') {\n            value = comp == 1 || comp === 0;\n        }\n        else if (node.operator == '<') {\n            value = comp == -1;\n        }\n        else if (node.operator == '<=') {\n            value = comp == -1 || comp === 0;\n        }\n        else if (node.operator == '+') {\n            var leftValue = void 0, rightValue = void 0;\n            if (leftSide.type == 'string' || rightSide.type == 'string') {\n                leftValue = leftSide.toString();\n                rightValue = rightSide.toString();\n            }\n            else {\n                leftValue = leftSide.toNumber();\n                rightValue = rightSide.toNumber();\n            }\n            value = leftValue + rightValue;\n        }\n        else if (node.operator == 'in') {\n            value = this.hasProperty(rightSide, leftSide);\n        }\n        else if (node.operator == 'instanceof') {\n            if (!utils.isa(rightSide, this.FUNCTION)) {\n                this.throwException(this.TYPE_ERROR, 'Expecting a function in instanceof check');\n            }\n            value = utils.isa(leftSide, rightSide);\n        }\n        else {\n            var leftValue = leftSide.toNumber();\n            var rightValue = rightSide.toNumber();\n            if (node.operator == '-') {\n                value = leftValue - rightValue;\n            }\n            else if (node.operator == '*') {\n                value = leftValue * rightValue;\n            }\n            else if (node.operator == '/') {\n                value = leftValue / rightValue;\n            }\n            else if (node.operator == '%') {\n                value = leftValue % rightValue;\n            }\n            else if (node.operator == '&') {\n                value = leftValue & rightValue;\n            }\n            else if (node.operator == '|') {\n                value = leftValue | rightValue;\n            }\n            else if (node.operator == '^') {\n                value = leftValue ^ rightValue;\n            }\n            else if (node.operator == '<<') {\n                value = leftValue << rightValue;\n            }\n            else if (node.operator == '>>') {\n                value = leftValue >> rightValue;\n            }\n            else if (node.operator == '>>>') {\n                value = leftValue >>> rightValue;\n            }\n            else {\n                throw SyntaxError('Unknown binary operator: ' + node.operator);\n            }\n        }\n        this.stateStack[0].value = this.createPrimitive(value);\n    };\n    ;\n    Interpreter.prototype.stepBlockStatement = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        var n = state.n_ || 0;\n        if (node.body[n]) {\n            state.done = false;\n            state.n_ = n + 1;\n            this.stateStack.unshift({ node: node.body[n] });\n        }\n        else {\n            state.done = true;\n            if (state.node.type != 'Program') {\n                // Leave the root scope on the tree in case the program is appended to.\n                this.stateStack.shift();\n            }\n        }\n    };\n    ;\n    Interpreter.prototype.stepBreakStatement = function () {\n        var state = this.stateStack.shift();\n        var node = state.node;\n        var label = null;\n        if (node.label) {\n            label = node.label.name;\n        }\n        state = this.stateStack.shift();\n        while (state &&\n            state.node.type != 'CallExpression' &&\n            state.node.type != 'NewExpression') {\n            if (label ? label == state.label : (state.isLoop || state.isSwitch)) {\n                return;\n            }\n            state = this.stateStack.shift();\n        }\n        // Syntax error, do not allow this error to be trapped.\n        throw SyntaxError('Illegal break statement');\n    };\n    ;\n    Interpreter.prototype.stepCallExpression = function () {\n        var _this = this;\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneCallee_) {\n            state.doneCallee_ = true;\n            this.stateStack.unshift({ node: node.callee, components: true });\n            return;\n        }\n        if (!state.func_) {\n            // Determine value of the function.\n            if (state.value.type == 'function') {\n                state.func_ = state.value;\n            }\n            else {\n                if (state.value.length) {\n                    state.member_ = state.value[0];\n                }\n                state.func_ = this.getValue(state.value);\n                if (!state.func_) {\n                    return; // Thrown error, but trapped.\n                }\n                else if (state.func_.type != 'function') {\n                    this.throwException(this.TYPE_ERROR, (state.value && state.value.type) + ' is not a function');\n                    return;\n                }\n            }\n            // Determine value of 'this' in function.\n            if (state.node.type == 'NewExpression') {\n                state.funcThis_ = this.createObject(state.func_);\n                state.isConstructor_ = true;\n            }\n            else if (state.func_.boundThis_) {\n                state.funcThis_ = state.func_.boundThis_;\n            }\n            else if (state.value.length) {\n                state.funcThis_ = state.value[0];\n            }\n            else {\n                state.funcThis_ =\n                    this.stateStack[this.stateStack.length - 1].thisExpression;\n            }\n            if (state.func_.boundArgs_) {\n                state.arguments = state.func_.boundArgs_.concat();\n            }\n            else {\n                state.arguments = [];\n            }\n            state.n_ = 0;\n        }\n        if (!state.doneArgs_) {\n            if (state.n_ != 0) {\n                state.arguments.push(state.value);\n            }\n            if (node.arguments[state.n_]) {\n                this.stateStack.unshift({ node: node.arguments[state.n_] });\n                state.n_++;\n                return;\n            }\n            state.doneArgs_ = true;\n        }\n        if (!state.doneExec_) {\n            state.doneExec_ = true;\n            if (state.func_.node) {\n                var scope = this.createScope(state.func_.node.body, state.func_.parentScope);\n                // Add all arguments.\n                for (var i = 0; i < state.func_.node.params.length; i++) {\n                    var paramName = this.createPrimitive(state.func_.node.params[i].name);\n                    var paramValue = state.arguments.length > i ? state.arguments[i] :\n                        this.UNDEFINED;\n                    this.setProperty(scope, paramName, paramValue);\n                }\n                // Build arguments variable.\n                var argsList = this.createObject(this.ARRAY);\n                for (var i = 0; i < state.arguments.length; i++) {\n                    this.setProperty(argsList, this.createPrimitive(i), state.arguments[i]);\n                }\n                this.setProperty(scope, 'arguments', argsList);\n                var funcState = {\n                    node: state.func_.node.body,\n                    scope: scope,\n                    thisExpression: state.funcThis_\n                };\n                this.stateStack.unshift(funcState);\n                state.value = this.UNDEFINED; // Default value if no explicit return.\n            }\n            else if (state.func_.nativeFunc) {\n                state.value = state.func_.nativeFunc.apply(state.funcThis_, state.arguments);\n            }\n            else if (state.func_.asyncFunc) {\n                state.func_.asyncFunc.apply(state.funcThis_, state.arguments)\n                    .then(function (value) {\n                    _this.paused_ = false;\n                    state.value = value || _this.UNDEFINED;\n                }, function (error) {\n                    _this.paused_ = false;\n                    _this.throwException(_this.ERROR, error.message);\n                });\n                this.paused_ = true;\n                return;\n            }\n            else if (state.func_.eval) {\n                var code = state.arguments[0];\n                if (!code) {\n                    state.value = this.UNDEFINED;\n                }\n                else if (!code.isPrimitive) {\n                    // JS does not parse String objects:\n                    // eval(new String('1 + 1')) -> '1 + 1'\n                    state.value = code;\n                }\n                else {\n                    var evalInterpreter = new Interpreter(code.toString());\n                    evalInterpreter.stateStack[0].scope = this.getScope();\n                    state = {\n                        node: { type: 'Eval_' },\n                        interpreter: evalInterpreter\n                    };\n                    this.stateStack.unshift(state);\n                }\n            }\n            else {\n                throw TypeError('function not a function (huh?)');\n            }\n        }\n        else {\n            // Execution complete.  Put the return value on the stack.\n            this.stateStack.shift();\n            if (state.isConstructor_ && state.value.type !== 'object') {\n                this.stateStack[0].value = state.funcThis_;\n            }\n            else {\n                this.stateStack[0].value = state.value;\n            }\n        }\n    };\n    ;\n    Interpreter.prototype.stepCatchClause = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneBody) {\n            state.doneBody = true;\n            var scope = void 0;\n            if (node.param) {\n                scope = this.createSpecialScope(this.getScope());\n                // Add the argument.\n                var paramName = this.createPrimitive(node.param.name);\n                this.setProperty(scope, paramName, state.throwValue);\n            }\n            this.stateStack.unshift({ node: node.body, scope: scope });\n        }\n        else {\n            this.stateStack.shift();\n        }\n    };\n    ;\n    Interpreter.prototype.stepConditionalExpression = function () {\n        var state = this.stateStack[0];\n        if (!state.done) {\n            if (!state.test) {\n                state.test = true;\n                this.stateStack.unshift({ node: state.node.test });\n            }\n            else {\n                state.done = true;\n                if (state.value.toBoolean() && state.node.consequent) {\n                    this.stateStack.unshift({ node: state.node.consequent });\n                }\n                else if (!state.value.toBoolean() && state.node.alternate) {\n                    this.stateStack.unshift({ node: state.node.alternate });\n                }\n            }\n        }\n        else {\n            this.stateStack.shift();\n            if (state.node.type == 'ConditionalExpression') {\n                this.stateStack[0].value = state.value;\n            }\n        }\n    };\n    ;\n    Interpreter.prototype.stepContinueStatement = function () {\n        var node = this.stateStack[0].node;\n        var label = null;\n        if (node.label) {\n            label = node.label.name;\n        }\n        var state = this.stateStack[0];\n        while (state &&\n            state.node.type != 'CallExpression' &&\n            state.node.type != 'NewExpression') {\n            if (state.isLoop) {\n                if (!label || (label == state.label)) {\n                    return;\n                }\n            }\n            this.stateStack.shift();\n            state = this.stateStack[0];\n        }\n        // Syntax error, do not allow this error to be trapped.\n        throw SyntaxError('Illegal continue statement');\n    };\n    ;\n    Interpreter.prototype.stepDoWhileStatement = function () {\n        var state = this.stateStack[0];\n        state.isLoop = true;\n        if (state.node.type == 'DoWhileStatement' && state.test === undefined) {\n            // First iteration of do/while executes without checking test.\n            state.value = this.TRUE;\n            state.test = true;\n        }\n        if (!state.test) {\n            state.test = true;\n            this.stateStack.unshift({ node: state.node.test });\n        }\n        else {\n            state.test = false;\n            if (!state.value.toBoolean()) {\n                this.stateStack.shift();\n            }\n            else if (state.node.body) {\n                this.stateStack.unshift({ node: state.node.body });\n            }\n        }\n    };\n    ;\n    Interpreter.prototype.stepEmptyStatement = function () {\n        this.stateStack.shift();\n    };\n    ;\n    Interpreter.prototype.stepEval_ = function () {\n        var state = this.stateStack[0];\n        if (!state.interpreter.step()) {\n            this.stateStack.shift();\n            this.stateStack[0].value = state.interpreter.value || this.UNDEFINED;\n        }\n    };\n    ;\n    Interpreter.prototype.stepExpressionStatement = function () {\n        var state = this.stateStack[0];\n        if (!state.done) {\n            state.done = true;\n            this.stateStack.unshift({ node: state.node.expression });\n        }\n        else {\n            this.stateStack.shift();\n            // Save this value to the interpreter for use as a return value if\n            // this code is inside an eval function.\n            this.value = state.value;\n        }\n    };\n    ;\n    Interpreter.prototype.stepForInStatement = function () {\n        var state = this.stateStack[0];\n        state.isLoop = true;\n        var node = state.node;\n        if (!state.doneVariable_) {\n            state.doneVariable_ = true;\n            var left = node.left;\n            if (left.type == 'VariableDeclaration') {\n                // Inline variable declaration: for (const x in y)\n                left = left.declarations[0].id;\n            }\n            this.stateStack.unshift({ node: left, components: true });\n            return;\n        }\n        if (!state.doneObject_) {\n            state.doneObject_ = true;\n            state.variable = state.value;\n            this.stateStack.unshift({ node: node.right });\n            return;\n        }\n        if (typeof state.iterator == 'undefined') {\n            // First iteration.\n            state.object = state.value;\n            state.iterator = 0;\n        }\n        var name = null;\n        done: do {\n            var i = state.iterator;\n            for (var prop in state.object.properties) {\n                if (state.object.notEnumerable[prop]) {\n                    continue;\n                }\n                if (i == 0) {\n                    name = prop;\n                    break done;\n                }\n                i--;\n            }\n            state.object = state.object.parent && state.object.parent.properties.prototype;\n            state.iterator = 0;\n        } while (state.object);\n        state.iterator++;\n        if (name === null) {\n            this.stateStack.shift();\n        }\n        else {\n            this.setValueToScope(state.variable, this.createPrimitive(name));\n            if (node.body) {\n                this.stateStack.unshift({ node: node.body });\n            }\n        }\n    };\n    ;\n    Interpreter.prototype.stepForStatement = function () {\n        var state = this.stateStack[0];\n        state.isLoop = true;\n        var node = state.node;\n        var mode = state.mode || 0;\n        if (mode == 0) {\n            state.mode = 1;\n            if (node.init) {\n                this.stateStack.unshift({ node: node.init });\n            }\n        }\n        else if (mode == 1) {\n            state.mode = 2;\n            if (node.test) {\n                this.stateStack.unshift({ node: node.test });\n            }\n        }\n        else if (mode == 2) {\n            state.mode = 3;\n            if (node.test && state.value && !state.value.toBoolean()) {\n                // Loop complete.  Bail out.\n                this.stateStack.shift();\n            }\n            else if (node.body) {\n                this.stateStack.unshift({ node: node.body });\n            }\n        }\n        else if (mode == 3) {\n            state.mode = 1;\n            if (node.update) {\n                this.stateStack.unshift({ node: node.update });\n            }\n        }\n    };\n    ;\n    Interpreter.prototype.stepFunctionDeclaration = function () {\n        this.stateStack.shift();\n    };\n    ;\n    Interpreter.prototype.stepFunctionExpression = function () {\n        var state = this.stateStack.shift();\n        this.stateStack[0].value = this.createFunction(state.node);\n    };\n    ;\n    Interpreter.prototype.stepIdentifier = function () {\n        var state = this.stateStack.shift();\n        var name = this.createPrimitive(state.node.name);\n        this.stateStack[0].value = state.components ? name : this.getValueFromScope(name);\n    };\n    ;\n    Interpreter.prototype.stepIfStatement = function () {\n        return this.stepConditionalExpression();\n    };\n    Interpreter.prototype.stepLabeledStatement = function () {\n        // No need to hit this node again on the way back up the stack.\n        var state = this.stateStack.shift();\n        this.stateStack.unshift({\n            node: state.node.body,\n            label: state.node.label.name,\n        });\n    };\n    ;\n    Interpreter.prototype.stepLiteral = function () {\n        var state = this.stateStack.shift();\n        this.stateStack[0].value = this.createPrimitive(state.node.value);\n    };\n    ;\n    Interpreter.prototype.stepLogicalExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (node.operator != '&&' && node.operator != '||') {\n            throw SyntaxError('Unknown logical operator: ' + node.operator);\n        }\n        if (!state.doneLeft_) {\n            state.doneLeft_ = true;\n            this.stateStack.unshift({ node: node.left });\n        }\n        else if (!state.doneRight_) {\n            if ((node.operator == '&&' && !state.value.toBoolean()) ||\n                (node.operator == '||' && state.value.toBoolean())) {\n                // Shortcut evaluation.\n                this.stateStack.shift();\n                this.stateStack[0].value = state.value;\n            }\n            else {\n                state.doneRight_ = true;\n                this.stateStack.unshift({ node: node.right });\n            }\n        }\n        else {\n            this.stateStack.shift();\n            this.stateStack[0].value = state.value;\n        }\n    };\n    ;\n    Interpreter.prototype.stepMemberExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneObject_) {\n            state.doneObject_ = true;\n            this.stateStack.unshift({ node: node.object });\n        }\n        else if (!state.doneProperty_) {\n            state.doneProperty_ = true;\n            state.object = state.value;\n            this.stateStack.unshift({\n                node: node.property,\n                components: !node.computed\n            });\n        }\n        else {\n            this.stateStack.shift();\n            if (state.components) {\n                this.stateStack[0].value = [state.object, state.value];\n            }\n            else {\n                var value = this.getProperty(state.object, state.value);\n                if (value.isGetter) {\n                    // Clear the getter flag and call the getter function.\n                    value.isGetter = false;\n                    this.stateStack.unshift({\n                        node: { type: 'CallExpression' },\n                        doneCallee_: true,\n                        funcThis_: state.object,\n                        func_: value,\n                        doneArgs_: true,\n                        arguments: []\n                    });\n                }\n                else {\n                    this.stateStack[0].value = value;\n                }\n            }\n        }\n    };\n    ;\n    Interpreter.prototype.stepNewExpression = function () {\n        return this.stepCallExpression();\n    };\n    Interpreter.prototype.stepObjectExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        var valueToggle = state.valueToggle;\n        var n = state.n || 0;\n        if (!state.object) {\n            state.object = this.createObject(this.OBJECT);\n            state.properties = Object.create(null);\n        }\n        else {\n            if (valueToggle) {\n                state.key = state.value;\n            }\n            else {\n                if (!state.properties[state.key]) {\n                    // Create temp object to collect value, getter, and/or setter.\n                    state.properties[state.key] = {};\n                }\n                state.properties[state.key][state.kind] = state.value;\n            }\n        }\n        if (node.properties[n]) {\n            if (valueToggle) {\n                state.n = n + 1;\n                this.stateStack.unshift({ node: node.properties[n].value });\n            }\n            else {\n                state.kind = node.properties[n].kind;\n                this.stateStack.unshift({ node: node.properties[n].key, components: true });\n            }\n            state.valueToggle = !valueToggle;\n        }\n        else {\n            for (var key in state.properties) {\n                var kinds = state.properties[key];\n                if ('get' in kinds || 'set' in kinds) {\n                    // Set a property with a getter or setter.\n                    var descriptor = {\n                        configurable: true,\n                        enumerable: true,\n                        get: kinds['get'],\n                        set: kinds['set']\n                    };\n                    this.setProperty(state.object, key, null, descriptor);\n                }\n                else {\n                    // Set a normal property with a value.\n                    this.setProperty(state.object, key, kinds['init']);\n                }\n            }\n            this.stateStack.shift();\n            this.stateStack[0].value = state.object;\n        }\n    };\n    ;\n    Interpreter.prototype.stepProgram = function () {\n        return this.stepBlockStatement();\n    };\n    Interpreter.prototype.stepReturnStatement = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (node.argument && !state.done) {\n            state.done = true;\n            this.stateStack.unshift({ node: node.argument });\n        }\n        else {\n            var value = state.value || this.UNDEFINED;\n            do {\n                this.stateStack.shift();\n                if (this.stateStack.length == 0) {\n                    // Syntax error, do not allow this error to be trapped.\n                    throw SyntaxError('Illegal return statement');\n                }\n                state = this.stateStack[0];\n            } while (state.node.type != 'CallExpression' &&\n                state.node.type != 'NewExpression');\n            state.value = value;\n        }\n    };\n    ;\n    Interpreter.prototype.stepSequenceExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        var n = state.n || 0;\n        if (node.expressions[n]) {\n            state.n = n + 1;\n            this.stateStack.unshift({ node: node.expressions[n] });\n        }\n        else {\n            this.stateStack.shift();\n            this.stateStack[0].value = state.value;\n        }\n    };\n    ;\n    Interpreter.prototype.stepSwitchStatement = function () {\n        var state = this.stateStack[0];\n        state.checked = state.checked || [];\n        state.isSwitch = true;\n        if (!state.test) {\n            state.test = true;\n            this.stateStack.unshift({ node: state.node.discriminant });\n            return;\n        }\n        if (!state.switchValue) {\n            // Preserve switch value between case tests.\n            state.switchValue = state.value;\n        }\n        var index = state.index || 0;\n        var currentCase = state.node.cases[index];\n        if (currentCase) {\n            if (!state.done && !state.checked[index] && currentCase.test) {\n                state.checked[index] = true;\n                this.stateStack.unshift({ node: currentCase.test });\n                return;\n            }\n            // Test on the default case will be null.\n            if (state.done || !currentCase.test || utils.comp(state.value, state.switchValue) == 0) {\n                state.done = true;\n                var n = state.n || 0;\n                if (currentCase.consequent[n]) {\n                    this.stateStack.unshift({ node: currentCase.consequent[n] });\n                    state.n = n + 1;\n                    return;\n                }\n            }\n            state.n = 0;\n            state.index = index + 1;\n        }\n        else {\n            this.stateStack.shift();\n        }\n    };\n    ;\n    Interpreter.prototype.stepThisExpression = function () {\n        this.stateStack.shift();\n        for (var i = 0; i < this.stateStack.length; i++) {\n            if (this.stateStack[i].thisExpression) {\n                this.stateStack[0].value = this.stateStack[i].thisExpression;\n                return;\n            }\n        }\n        throw Error('No this expression found.');\n    };\n    ;\n    Interpreter.prototype.stepThrowStatement = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.argument) {\n            state.argument = true;\n            this.stateStack.unshift({ node: node.argument });\n        }\n        else {\n            this.throwException(state.value);\n        }\n    };\n    ;\n    Interpreter.prototype.stepTryStatement = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneBlock) {\n            state.doneBlock = true;\n            this.stateStack.unshift({ node: node.block });\n        }\n        else if (!state.doneFinalizer && node.finalizer) {\n            state.doneFinalizer = true;\n            this.stateStack.unshift({ node: node.finalizer });\n        }\n        else {\n            this.stateStack.shift();\n        }\n    };\n    ;\n    Interpreter.prototype.stepUnaryExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.done) {\n            state.done = true;\n            var nextState = { node: node.argument };\n            if (node.operator == 'delete' || node.operator == 'typeof') {\n                nextState.components = true;\n            }\n            this.stateStack.unshift(nextState);\n            return;\n        }\n        this.stateStack.shift();\n        var value;\n        if (node.operator == '-') {\n            value = -state.value.toNumber();\n        }\n        else if (node.operator == '+') {\n            value = state.value.toNumber();\n        }\n        else if (node.operator == '!') {\n            value = !state.value.toBoolean();\n        }\n        else if (node.operator == '~') {\n            value = ~state.value.toNumber();\n        }\n        else if (node.operator == 'delete' || node.operator == 'typeof') {\n            var obj = void 0;\n            var name_3;\n            if (state.value.length) {\n                obj = state.value[0];\n                name_3 = state.value[1];\n            }\n            else {\n                obj = this.getScope();\n                name_3 = state.value;\n            }\n            if (node.operator == 'delete') {\n                value = this.deleteProperty(obj, name_3);\n            }\n            else {\n                value = this.getProperty(obj, name_3).type;\n            }\n        }\n        else if (node.operator == 'void') {\n            value = undefined;\n        }\n        else {\n            throw SyntaxError('Unknown unary operator: ' + node.operator);\n        }\n        this.stateStack[0].value = this.createPrimitive(value);\n    };\n    ;\n    Interpreter.prototype.stepUpdateExpression = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneLeft) {\n            state.doneLeft = true;\n            this.stateStack.unshift({ node: node.argument, components: true });\n            return;\n        }\n        if (!state.leftSide) {\n            state.leftSide = state.value;\n        }\n        if (state.doneGetter_) {\n            state.leftValue = state.value;\n        }\n        if (!state.doneGetter_) {\n            state.leftValue = this.getValue(state.leftSide);\n            if (!state.leftValue) {\n                return; // Thrown error, but trapped.\n            }\n            if (state.leftValue.isGetter) {\n                // Clear the getter flag and call the getter function.\n                state.leftValue.isGetter = false;\n                state.doneGetter_ = true;\n                this.stateStack.unshift({\n                    node: { type: 'CallExpression' },\n                    doneCallee_: true,\n                    funcThis_: state.leftSide[0],\n                    func_: state.leftValue,\n                    doneArgs_: true,\n                    arguments: []\n                });\n                return;\n            }\n        }\n        if (state.doneSetter_) {\n            // Return if setter function.\n            // Setter method on property has completed.\n            // Ignore its return value, and use the original set value instead.\n            this.stateStack.shift();\n            this.stateStack[0].value = state.doneSetter_;\n            return;\n        }\n        var leftValue = state.leftValue.toNumber();\n        var changeValue;\n        if (node.operator == '++') {\n            changeValue = this.createPrimitive(leftValue + 1);\n        }\n        else if (node.operator == '--') {\n            changeValue = this.createPrimitive(leftValue - 1);\n        }\n        else {\n            throw SyntaxError('Unknown update expression: ' + node.operator);\n        }\n        var returnValue = node.prefix ?\n            changeValue : this.createPrimitive(leftValue);\n        var setter = this.setValue(state.leftSide, changeValue);\n        if (setter) {\n            state.doneSetter_ = returnValue;\n            this.stateStack.unshift({\n                node: { type: 'CallExpression' },\n                doneCallee_: true,\n                funcThis_: state.leftSide[0],\n                func_: setter,\n                doneArgs_: true,\n                arguments: [changeValue]\n            });\n            return;\n        }\n        // Return if no setter function.\n        this.stateStack.shift();\n        this.stateStack[0].value = returnValue;\n    };\n    ;\n    Interpreter.prototype.stepVariableDeclaration = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        var n = state.n || 0;\n        if (node.declarations[n]) {\n            state.n = n + 1;\n            this.stateStack.unshift({ node: node.declarations[n] });\n        }\n        else {\n            this.stateStack.shift();\n        }\n    };\n    ;\n    Interpreter.prototype.stepVariableDeclarator = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (node.init && !state.done) {\n            state.done = true;\n            this.stateStack.unshift({ node: node.init });\n            return;\n        }\n        if (node.init) {\n            // This setValue call never needs to deal with calling a setter function.\n            this.setValue(this.createPrimitive(node.id.name), state.value);\n        }\n        this.stateStack.shift();\n    };\n    ;\n    Interpreter.prototype.stepWithStatement = function () {\n        var state = this.stateStack[0];\n        var node = state.node;\n        if (!state.doneObject) {\n            state.doneObject = true;\n            this.stateStack.unshift({ node: node.object });\n        }\n        else if (!state.doneBody) {\n            state.doneBody = true;\n            var scope = this.createSpecialScope(this.getScope(), state.value);\n            this.stateStack.unshift({ node: node.body, scope: scope });\n        }\n        else {\n            this.stateStack.shift();\n        }\n    };\n    ;\n    Interpreter.prototype.stepWhileStatement = function () {\n        return this.stepDoWhileStatement();\n    };\n    return Interpreter;\n}());\nexports.Interpreter = Interpreter;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Interpreter;\n//# sourceMappingURL=Interpreter.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-interp/lib/Interpreter.js\n ** module id = 6\n ** module chunks = 0\n **/","\"use strict\";\nvar Primitive = (function () {\n    /**\n     * Class for a number, string, boolean, null, or undefined.\n     * @param {number|string|boolean|null|undefined} data Primitive value.\n     * @param {!Interpreter} interpreter The JS Interpreter to bind to.\n     * @constructor\n     */\n    function Primitive(data, interpreter) {\n        /**\n         * @type {number|string|boolean|null|undefined}\n         */\n        this.data = undefined;\n        /**\n         * @type {string}\n         */\n        this.type = 'undefined';\n        /**\n         * @type {Function}\n         */\n        this.parent = null;\n        /**\n         * @type {boolean}\n         */\n        this.isPrimitive = true;\n        var type = typeof data;\n        this.data = data;\n        this.type = type;\n        if (type == 'number') {\n            this.parent = interpreter.NUMBER;\n        }\n        else if (type == 'string') {\n            this.parent = interpreter.STRING;\n        }\n        else if (type == 'boolean') {\n            this.parent = interpreter.BOOLEAN;\n        }\n    }\n    ;\n    /**\n     * Convert this primitive into a boolean.\n     * @return {boolean} Boolean value.\n     */\n    Primitive.prototype.toBoolean = function () {\n        return Boolean(this.data);\n    };\n    ;\n    /**\n     * Convert this primitive into a number.\n     * @return {number} Number value.\n     */\n    Primitive.prototype.toNumber = function () {\n        return Number(this.data);\n    };\n    ;\n    /**\n     * Convert this primitive into a string.\n     * @return {string} String value.\n     * @override\n     */\n    Primitive.prototype.toString = function () {\n        return String(this.data);\n    };\n    ;\n    /**\n     * Return the primitive value.\n     * @return {number|string|boolean|null|undefined} Primitive value.\n     * @override\n     */\n    Primitive.prototype.valueOf = function () {\n        return this.data;\n    };\n    ;\n    return Primitive;\n}());\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Primitive;\n//# sourceMappingURL=Primitive.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-interp/lib/Primitive.js\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\nvar Interpreter_1 = require('./Interpreter');\nexports.Interpreter = Interpreter_1.default;\nvar JsObject_1 = require('./JsObject');\nexports.JsObject = JsObject_1.default;\n//# sourceMappingURL=index.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-interp/lib/index.js\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\n/**\n * Compares two objects against each other.\n * @param {!Object} a First object.\n * @param {!Object} b Second object.\n * @return {number} -1 if a is smaller, 0 if a == b, 1 if a is bigger,\n *     NaN if they are not comparable.\n */\nfunction comp(a, b) {\n    if (a.isPrimitive && a.type == 'number' && isNaN(a.data) ||\n        b.isPrimitive && b.type == 'number' && isNaN(b.data)) {\n        // NaN is not comparable to anything, including itself.\n        return NaN;\n    }\n    if (a === b) {\n        return 0;\n    }\n    if (a.isPrimitive && b.isPrimitive) {\n        a = a.data;\n        b = b.data;\n    }\n    else {\n        // TODO: Handle other types.\n        return NaN;\n    }\n    if (a < b) {\n        return -1;\n    }\n    else if (a > b) {\n        return 1;\n    }\n    return 0;\n}\nexports.comp = comp;\n;\n/**\n * Is a value a legal integer for an array?\n * @param {*} n Value to check.\n * @return {number} Zero, or a positive integer if the value can be\n *     converted to such.  NaN otherwise.\n */\nfunction arrayIndex(n) {\n    n = Number(n);\n    if (!isFinite(n) || n != Math.floor(n) || n < 0) {\n        return NaN;\n    }\n    return n;\n}\nexports.arrayIndex = arrayIndex;\n;\n/**\n * Remove start and end values from AST.\n * Used to remove highlighting from polyfills.\n * @param {!Object} node AST node.\n * @private\n */\nfunction stripLocations(node) {\n    delete node.start;\n    delete node.end;\n    for (var name in node) {\n        if (node.hasOwnProperty(name)) {\n            var prop = node[name];\n            if (prop && typeof prop == 'object') {\n                stripLocations(prop);\n            }\n        }\n    }\n}\nexports.stripLocations = stripLocations;\n;\n/**\n * Is an object of a certain class?\n * @param {Object} child Object to check.\n * @param {Object} parent Constructor of object.\n * @return {boolean} True if object is the class or inherits from it.\n *     False otherwise.\n */\nfunction isa(child, parent) {\n    if (!child || !parent) {\n        return false;\n    }\n    while (child.parent != parent) {\n        if (!child.parent || !child.parent.properties.prototype) {\n            return false;\n        }\n        child = child.parent.properties.prototype;\n    }\n    return true;\n}\nexports.isa = isa;\n;\nfunction strictComp(a, b) {\n    // Strict === comparison.\n    if (a.isPrimitive && b.isPrimitive) {\n        return a.data === b.data;\n    }\n    return a === b;\n}\nexports.strictComp = strictComp;\n;\n//# sourceMappingURL=utils.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-interp/lib/utils.js\n ** module id = 9\n ** module chunks = 0\n **/","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.acorn = global.acorn || {})));\n}(this, function (exports) { 'use strict';\n\n  // Reserved word lists for various dialects of the language\n\n  var reservedWords = {\n    3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n    5: \"class enum extends super const export import\",\n    6: \"enum\",\n    strict: \"implements interface let package private protected public static yield\",\n    strictBind: \"eval arguments\"\n  }\n\n  // And the keywords\n\n  var ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"\n\n  var keywords = {\n    5: ecma5AndLessKeywords,\n    6: ecma5AndLessKeywords + \" const class extends export import super\"\n  }\n\n  // ## Character categories\n\n  // Big ugly regular expressions that match characters in the\n  // whitespace, identifier, and identifier-start categories. These\n  // are only applied when a character is found to actually have a\n  // code point above 128.\n  // Generated by `bin/generate-identifier-regex.js`.\n\n  var nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fd5\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ae\\ua7b0-\\ua7b7\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\"\n  var nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d4-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c03\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d01-\\u0d03\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf8\\u1cf9\\u1dc0-\\u1df5\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua900-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\"\n\n  var nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\")\n  var nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\")\n\n  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null\n\n  // These are a run-length and offset encoded representation of the\n  // >0xffff code points that are a valid part of identifiers. The\n  // offset starts at 0x10000, and each pair of numbers represents an\n  // offset to the next range, and then a size of the range. They were\n  // generated by bin/generate-identifier-regex.js\n  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]\n  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]\n\n  // This has a complexity linear to the value of the code. The\n  // assumption is that looking up astral identifier characters is\n  // rare.\n  function isInAstralSet(code, set) {\n    var pos = 0x10000\n    for (var i = 0; i < set.length; i += 2) {\n      pos += set[i]\n      if (pos > code) return false\n      pos += set[i + 1]\n      if (pos >= code) return true\n    }\n  }\n\n  // Test whether a given character code starts an identifier.\n\n  function isIdentifierStart(code, astral) {\n    if (code < 65) return code === 36\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes)\n  }\n\n  // Test whether a given character is part of an identifier.\n\n  function isIdentifierChar(code, astral) {\n    if (code < 48) return code === 36\n    if (code < 58) return true\n    if (code < 65) return false\n    if (code < 91) return true\n    if (code < 97) return code === 95\n    if (code < 123) return true\n    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))\n    if (astral === false) return false\n    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n  }\n\n  // ## Token types\n\n  // The assignment of fine-grained, information-carrying type objects\n  // allows the tokenizer to store the information it has about a\n  // token in a way that is very cheap for the parser to look up.\n\n  // All token type variables start with an underscore, to make them\n  // easy to recognize.\n\n  // The `beforeExpr` property is used to disambiguate between regular\n  // expressions and divisions. It is set on all token types that can\n  // be followed by an expression (thus, a slash after them would be a\n  // regular expression).\n  //\n  // The `startsExpr` property is used to check if the token ends a\n  // `yield` expression. It is set on all token types that either can\n  // directly start an expression (like a quotation mark) or can\n  // continue an expression (like the body of a string).\n  //\n  // `isLoop` marks a keyword as starting a loop, which is important\n  // to know when parsing a label, in order to allow or disallow\n  // continue jumps to that label.\n\n  var TokenType = function TokenType(label, conf) {\n    if ( conf === void 0 ) conf = {};\n\n    this.label = label\n    this.keyword = conf.keyword\n    this.beforeExpr = !!conf.beforeExpr\n    this.startsExpr = !!conf.startsExpr\n    this.isLoop = !!conf.isLoop\n    this.isAssign = !!conf.isAssign\n    this.prefix = !!conf.prefix\n    this.postfix = !!conf.postfix\n    this.binop = conf.binop || null\n    this.updateContext = null\n  };\n\n  function binop(name, prec) {\n    return new TokenType(name, {beforeExpr: true, binop: prec})\n  }\n  var beforeExpr = {beforeExpr: true};\n  var startsExpr = {startsExpr: true};\n  // Map keyword names to token types.\n\n  var keywordTypes = {}\n\n  // Succinct definitions of keyword token types\n  function kw(name, options) {\n    if ( options === void 0 ) options = {};\n\n    options.keyword = name\n    return keywordTypes[name] = new TokenType(name, options)\n  }\n\n  var tt = {\n    num: new TokenType(\"num\", startsExpr),\n    regexp: new TokenType(\"regexp\", startsExpr),\n    string: new TokenType(\"string\", startsExpr),\n    name: new TokenType(\"name\", startsExpr),\n    eof: new TokenType(\"eof\"),\n\n    // Punctuation token types.\n    bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n    bracketR: new TokenType(\"]\"),\n    braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n    braceR: new TokenType(\"}\"),\n    parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n    parenR: new TokenType(\")\"),\n    comma: new TokenType(\",\", beforeExpr),\n    semi: new TokenType(\";\", beforeExpr),\n    colon: new TokenType(\":\", beforeExpr),\n    dot: new TokenType(\".\"),\n    question: new TokenType(\"?\", beforeExpr),\n    arrow: new TokenType(\"=>\", beforeExpr),\n    template: new TokenType(\"template\"),\n    ellipsis: new TokenType(\"...\", beforeExpr),\n    backQuote: new TokenType(\"`\", startsExpr),\n    dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n    // Operators. These carry several kinds of properties to help the\n    // parser use them properly (the presence of these properties is\n    // what categorizes them as operators).\n    //\n    // `binop`, when present, specifies that this operator is a binary\n    // operator, and will refer to its precedence.\n    //\n    // `prefix` and `postfix` mark the operator as a prefix or postfix\n    // unary operator.\n    //\n    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n    // binary operators with a very low precedence, that should result\n    // in AssignmentExpression nodes.\n\n    eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n    assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n    incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n    prefix: new TokenType(\"prefix\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    logicalOR: binop(\"||\", 1),\n    logicalAND: binop(\"&&\", 2),\n    bitwiseOR: binop(\"|\", 3),\n    bitwiseXOR: binop(\"^\", 4),\n    bitwiseAND: binop(\"&\", 5),\n    equality: binop(\"==/!=\", 6),\n    relational: binop(\"</>\", 7),\n    bitShift: binop(\"<</>>\", 8),\n    plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n    modulo: binop(\"%\", 10),\n    star: binop(\"*\", 10),\n    slash: binop(\"/\", 10),\n    starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n    // Keyword token types.\n    _break: kw(\"break\"),\n    _case: kw(\"case\", beforeExpr),\n    _catch: kw(\"catch\"),\n    _continue: kw(\"continue\"),\n    _debugger: kw(\"debugger\"),\n    _default: kw(\"default\", beforeExpr),\n    _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n    _else: kw(\"else\", beforeExpr),\n    _finally: kw(\"finally\"),\n    _for: kw(\"for\", {isLoop: true}),\n    _function: kw(\"function\", startsExpr),\n    _if: kw(\"if\"),\n    _return: kw(\"return\", beforeExpr),\n    _switch: kw(\"switch\"),\n    _throw: kw(\"throw\", beforeExpr),\n    _try: kw(\"try\"),\n    _var: kw(\"var\"),\n    _const: kw(\"const\"),\n    _while: kw(\"while\", {isLoop: true}),\n    _with: kw(\"with\"),\n    _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n    _this: kw(\"this\", startsExpr),\n    _super: kw(\"super\", startsExpr),\n    _class: kw(\"class\"),\n    _extends: kw(\"extends\", beforeExpr),\n    _export: kw(\"export\"),\n    _import: kw(\"import\"),\n    _null: kw(\"null\", startsExpr),\n    _true: kw(\"true\", startsExpr),\n    _false: kw(\"false\", startsExpr),\n    _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n    _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n    _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n    _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n  }\n\n  // Matches a whole line break (where CRLF is considered a single\n  // line break). Used to count lines.\n\n  var lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/\n  var lineBreakG = new RegExp(lineBreak.source, \"g\")\n\n  function isNewLine(code) {\n    return code === 10 || code === 13 || code === 0x2028 || code === 0x2029\n  }\n\n  var nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/\n\n  var skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g\n\n  function isArray(obj) {\n    return Object.prototype.toString.call(obj) === \"[object Array]\"\n  }\n\n  // Checks if an object has a property.\n\n  function has(obj, propName) {\n    return Object.prototype.hasOwnProperty.call(obj, propName)\n  }\n\n  // These are used when `options.locations` is on, for the\n  // `startLoc` and `endLoc` properties.\n\n  var Position = function Position(line, col) {\n    this.line = line\n    this.column = col\n  };\n\n  Position.prototype.offset = function offset (n) {\n    return new Position(this.line, this.column + n)\n  };\n\n  var SourceLocation = function SourceLocation(p, start, end) {\n    this.start = start\n    this.end = end\n    if (p.sourceFile !== null) this.source = p.sourceFile\n  };\n\n  // The `getLineInfo` function is mostly useful when the\n  // `locations` option is off (for performance reasons) and you\n  // want to find the line/column position for a given character\n  // offset. `input` should be the code string that the offset refers\n  // into.\n\n  function getLineInfo(input, offset) {\n    for (var line = 1, cur = 0;;) {\n      lineBreakG.lastIndex = cur\n      var match = lineBreakG.exec(input)\n      if (match && match.index < offset) {\n        ++line\n        cur = match.index + match[0].length\n      } else {\n        return new Position(line, offset - cur)\n      }\n    }\n  }\n\n  // A second optional argument can be given to further configure\n  // the parser process. These options are recognized:\n\n  var defaultOptions = {\n    // `ecmaVersion` indicates the ECMAScript version to parse. Must\n    // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n    // for strict mode, the set of reserved words, and support for\n    // new syntax features. The default is 7.\n    ecmaVersion: 7,\n    // `sourceType` indicates the mode the code should be parsed in.\n    // Can be either `\"script\"` or `\"module\"`. This influences global\n    // strict mode and parsing of `import` and `export` declarations.\n    sourceType: \"script\",\n    // `onInsertedSemicolon` can be a callback that will be called\n    // when a semicolon is automatically inserted. It will be passed\n    // th position of the comma as an offset, and if `locations` is\n    // enabled, it is given the location as a `{line, column}` object\n    // as second argument.\n    onInsertedSemicolon: null,\n    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n    // trailing commas.\n    onTrailingComma: null,\n    // By default, reserved words are only enforced if ecmaVersion >= 5.\n    // Set `allowReserved` to a boolean value to explicitly turn this on\n    // an off. When this option has the value \"never\", reserved words\n    // and keywords can also not be used as property names.\n    allowReserved: null,\n    // When enabled, a return at the top level is not considered an\n    // error.\n    allowReturnOutsideFunction: false,\n    // When enabled, import/export statements are not constrained to\n    // appearing at the top of the program.\n    allowImportExportEverywhere: false,\n    // When enabled, hashbang directive in the beginning of file\n    // is allowed and treated as a line comment.\n    allowHashBang: false,\n    // When `locations` is on, `loc` properties holding objects with\n    // `start` and `end` properties in `{line, column}` form (with\n    // line being 1-based and column 0-based) will be attached to the\n    // nodes.\n    locations: false,\n    // A function can be passed as `onToken` option, which will\n    // cause Acorn to call that function with object in the same\n    // format as tokens returned from `tokenizer().getToken()`. Note\n    // that you are not allowed to call the parser from the\n    // callback—that will corrupt its internal state.\n    onToken: null,\n    // A function can be passed as `onComment` option, which will\n    // cause Acorn to call that function with `(block, text, start,\n    // end)` parameters whenever a comment is skipped. `block` is a\n    // boolean indicating whether this is a block (`/* */`) comment,\n    // `text` is the content of the comment, and `start` and `end` are\n    // character offsets that denote the start and end of the comment.\n    // When the `locations` option is on, two more parameters are\n    // passed, the full `{line, column}` locations of the start and\n    // end of the comments. Note that you are not allowed to call the\n    // parser from the callback—that will corrupt its internal state.\n    onComment: null,\n    // Nodes have their start and end characters offsets recorded in\n    // `start` and `end` properties (directly on the node, rather than\n    // the `loc` object, which holds line/column data. To also add a\n    // [semi-standardized][range] `range` property holding a `[start,\n    // end]` array with the same numbers, set the `ranges` option to\n    // `true`.\n    //\n    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n    ranges: false,\n    // It is possible to parse multiple files into a single AST by\n    // passing the tree produced by parsing the first file as\n    // `program` option in subsequent parses. This will add the\n    // toplevel forms of the parsed file to the `Program` (top) node\n    // of an existing parse tree.\n    program: null,\n    // When `locations` is on, you can pass this to record the source\n    // file in every node's `loc` object.\n    sourceFile: null,\n    // This value, if given, is stored in every node, whether\n    // `locations` is on or off.\n    directSourceFile: null,\n    // When enabled, parenthesized expressions are represented by\n    // (non-standard) ParenthesizedExpression nodes\n    preserveParens: false,\n    plugins: {}\n  }\n\n  // Interpret and default an options object\n\n  function getOptions(opts) {\n    var options = {}\n\n    for (var opt in defaultOptions)\n      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]\n\n    if (options.ecmaVersion >= 2015)\n      options.ecmaVersion -= 2009\n\n    if (options.allowReserved == null)\n      options.allowReserved = options.ecmaVersion < 5\n\n    if (isArray(options.onToken)) {\n      var tokens = options.onToken\n      options.onToken = function (token) { return tokens.push(token); }\n    }\n    if (isArray(options.onComment))\n      options.onComment = pushComment(options, options.onComment)\n\n    return options\n  }\n\n  function pushComment(options, array) {\n    return function (block, text, start, end, startLoc, endLoc) {\n      var comment = {\n        type: block ? 'Block' : 'Line',\n        value: text,\n        start: start,\n        end: end\n      }\n      if (options.locations)\n        comment.loc = new SourceLocation(this, startLoc, endLoc)\n      if (options.ranges)\n        comment.range = [start, end]\n      array.push(comment)\n    }\n  }\n\n  // Registered plugins\n  var plugins = {}\n\n  function keywordRegexp(words) {\n    return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\")\n  }\n\n  var Parser = function Parser(options, input, startPos) {\n    this.options = options = getOptions(options)\n    this.sourceFile = options.sourceFile\n    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])\n    var reserved = \"\"\n    if (!options.allowReserved) {\n      for (var v = options.ecmaVersion;; v--)\n        if (reserved = reservedWords[v]) break\n      if (options.sourceType == \"module\") reserved += \" await\"\n    }\n    this.reservedWords = keywordRegexp(reserved)\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict\n    this.reservedWordsStrict = keywordRegexp(reservedStrict)\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind)\n    this.input = String(input)\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false\n\n    // Load plugins\n    this.loadPlugins(options.plugins)\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos\n      this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1\n      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n    } else {\n      this.pos = this.lineStart = 0\n      this.curLine = 1\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = tt.eof\n    // For tokens that include more information than their type, the value\n    this.value = null\n    // Its start and end offset\n    this.start = this.end = this.pos\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition()\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null\n    this.lastTokStart = this.lastTokEnd = this.pos\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext()\n    this.exprAllowed = true\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\"\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1\n\n    // Flags to track whether we are in a function, a generator, an async function.\n    this.inFunction = this.inGenerator = this.inAsync = false\n    // Positions to delayed-check that yield/await does not exist in default parameters.\n    this.yieldPos = this.awaitPos = 0\n    // Labels in scope.\n    this.labels = []\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')\n      this.skipLineComment(2)\n  };\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\n  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\n  Parser.prototype.extend = function extend (name, f) {\n    this[name] = f(this[name])\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n      var this$1 = this;\n\n    for (var name in pluginConfigs) {\n      var plugin = plugins[name]\n      if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n      plugin(this$1, pluginConfigs[name])\n    }\n  };\n\n  Parser.prototype.parse = function parse () {\n    var node = this.options.program || this.startNode()\n    this.nextToken()\n    return this.parseTopLevel(node)\n  };\n\n  var pp = Parser.prototype\n\n  // ## Parser utilities\n\n  // Test whether a statement node is the string literal `\"use strict\"`.\n\n  pp.isUseStrict = function(stmt) {\n    return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"Literal\" &&\n      stmt.expression.raw.slice(1, -1) === \"use strict\"\n  }\n\n  // Predicate that tests whether the next token is of the given\n  // type, and if yes, consumes it as a side effect.\n\n  pp.eat = function(type) {\n    if (this.type === type) {\n      this.next()\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  pp.isContextual = function(name) {\n    return this.type === tt.name && this.value === name\n  }\n\n  // Consumes contextual keyword if possible.\n\n  pp.eatContextual = function(name) {\n    return this.value === name && this.eat(tt.name)\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  pp.expectContextual = function(name) {\n    if (!this.eatContextual(name)) this.unexpected()\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  pp.canInsertSemicolon = function() {\n    return this.type === tt.eof ||\n      this.type === tt.braceR ||\n      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n  }\n\n  pp.insertSemicolon = function() {\n    if (this.canInsertSemicolon()) {\n      if (this.options.onInsertedSemicolon)\n        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n      return true\n    }\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  pp.semicolon = function() {\n    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n  }\n\n  pp.afterTrailingComma = function(tokType, notNext) {\n    if (this.type == tokType) {\n      if (this.options.onTrailingComma)\n        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n      if (!notNext)\n        this.next()\n      return true\n    }\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error.\n\n  pp.expect = function(type) {\n    this.eat(type) || this.unexpected()\n  }\n\n  // Raise an unexpected token error.\n\n  pp.unexpected = function(pos) {\n    this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n  }\n\n  var DestructuringErrors = function DestructuringErrors() {\n    this.shorthandAssign = 0\n    this.trailingComma = 0\n  };\n\n  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {\n    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma\n    if (!andThrow) return !!trailing\n    if (trailing) this.raise(trailing, \"Comma is not permitted after the rest element\")\n  }\n\n  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign\n    if (!andThrow) return !!pos\n    if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n  }\n\n  pp.checkYieldAwaitInDefaultParams = function() {\n    if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n      this.raise(this.yieldPos, \"Yield expression cannot be a default value\")\n    if (this.awaitPos)\n      this.raise(this.awaitPos, \"Await expression cannot be a default value\")\n  }\n\n  var pp$1 = Parser.prototype\n\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  pp$1.parseTopLevel = function(node) {\n    var this$1 = this;\n\n    var first = true, exports = {}\n    if (!node.body) node.body = []\n    while (this.type !== tt.eof) {\n      var stmt = this$1.parseStatement(true, true, exports)\n      node.body.push(stmt)\n      if (first) {\n        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)\n        first = false\n      }\n    }\n    this.next()\n    if (this.options.ecmaVersion >= 6) {\n      node.sourceType = this.options.sourceType\n    }\n    return this.finishNode(node, \"Program\")\n  }\n\n  var loopLabel = {kind: \"loop\"};\n  var switchLabel = {kind: \"switch\"};\n  pp$1.isLet = function() {\n    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n    skipWhiteSpace.lastIndex = this.pos\n    var skip = skipWhiteSpace.exec(this.input)\n    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n    if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n    if (isIdentifierStart(nextCh, true)) {\n      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n      var ident = this.input.slice(next, pos)\n      if (!this.isKeyword(ident)) return true\n    }\n    return false\n  }\n\n  // check 'async [no LineTerminator here] function'\n  // - 'async /*foo*/ function' is OK.\n  // - 'async /*\\n*/ function' is invalid.\n  pp$1.isAsyncFunction = function() {\n    if (this.type !== tt.name || this.options.ecmaVersion < 8 || this.value != \"async\")\n      return false\n\n    skipWhiteSpace.lastIndex = this.pos\n    var skip = skipWhiteSpace.exec(this.input)\n    var next = this.pos + skip[0].length\n    return !lineBreak.test(this.input.slice(this.pos, next)) &&\n      this.input.slice(next, next + 8) === \"function\" &&\n      (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n\n  pp$1.parseStatement = function(declaration, topLevel, exports) {\n    var starttype = this.type, node = this.startNode(), kind\n\n    if (this.isLet()) {\n      starttype = tt._var\n      kind = \"let\"\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n    case tt._debugger: return this.parseDebuggerStatement(node)\n    case tt._do: return this.parseDoStatement(node)\n    case tt._for: return this.parseForStatement(node)\n    case tt._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n      return this.parseFunctionStatement(node, false)\n    case tt._class:\n      if (!declaration) this.unexpected()\n      return this.parseClass(node, true)\n    case tt._if: return this.parseIfStatement(node)\n    case tt._return: return this.parseReturnStatement(node)\n    case tt._switch: return this.parseSwitchStatement(node)\n    case tt._throw: return this.parseThrowStatement(node)\n    case tt._try: return this.parseTryStatement(node)\n    case tt._const: case tt._var:\n      kind = kind || this.value\n      if (!declaration && kind != \"var\") this.unexpected()\n      return this.parseVarStatement(node, kind)\n    case tt._while: return this.parseWhileStatement(node)\n    case tt._with: return this.parseWithStatement(node)\n    case tt.braceL: return this.parseBlock()\n    case tt.semi: return this.parseEmptyStatement(node)\n    case tt._export:\n    case tt._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel)\n          this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n        if (!this.inModule)\n          this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n      }\n      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n      // If the statement does not start with a statement keyword or a\n      // brace, it's an ExpressionStatement or LabeledStatement. We\n      // simply start parsing an expression, and afterwards, if the\n      // next token is a colon and the expression was a simple\n      // Identifier node, we switch to interpreting it as a label.\n    default:\n      if (this.isAsyncFunction() && declaration) {\n        this.next()\n        return this.parseFunctionStatement(node, true)\n      }\n\n      var maybeName = this.value, expr = this.parseExpression()\n      if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n        return this.parseLabeledStatement(node, maybeName, expr)\n      else return this.parseExpressionStatement(node, expr)\n    }\n  }\n\n  pp$1.parseBreakContinueStatement = function(node, keyword) {\n    var this$1 = this;\n\n    var isBreak = keyword == \"break\"\n    this.next()\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n    else if (this.type !== tt.name) this.unexpected()\n    else {\n      node.label = this.parseIdent()\n      this.semicolon()\n    }\n\n    // Verify that there is an actual destination to break or\n    // continue to.\n    for (var i = 0; i < this.labels.length; ++i) {\n      var lab = this$1.labels[i]\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n        if (node.label && isBreak) break\n      }\n    }\n    if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n  }\n\n  pp$1.parseDebuggerStatement = function(node) {\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n  }\n\n  pp$1.parseDoStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    this.expect(tt._while)\n    node.test = this.parseParenExpression()\n    if (this.options.ecmaVersion >= 6)\n      this.eat(tt.semi)\n    else\n      this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  pp$1.parseForStatement = function(node) {\n    this.next()\n    this.labels.push(loopLabel)\n    this.expect(tt.parenL)\n    if (this.type === tt.semi) return this.parseFor(node, null)\n    var isLet = this.isLet()\n    if (this.type === tt._var || this.type === tt._const || isLet) {\n      var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value\n      this.next()\n      this.parseVar(init$1, true, kind)\n      this.finishNode(init$1, \"VariableDeclaration\")\n      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n          !(kind !== \"var\" && init$1.declarations[0].init))\n        return this.parseForIn(node, init$1)\n      return this.parseFor(node, init$1)\n    }\n    var refDestructuringErrors = new DestructuringErrors\n    var init = this.parseExpression(true, refDestructuringErrors)\n    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      this.toAssignable(init)\n      this.checkLVal(init)\n      return this.parseForIn(node, init)\n    } else {\n      this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return this.parseFor(node, init)\n  }\n\n  pp$1.parseFunctionStatement = function(node, isAsync) {\n    this.next()\n    return this.parseFunction(node, true, false, isAsync)\n  }\n\n  pp$1.isFunction = function() {\n    return this.type === tt._function || this.isAsyncFunction()\n  }\n\n  pp$1.parseIfStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    // allow function declarations in branches, but only in non-strict mode\n    node.consequent = this.parseStatement(!this.strict && this.isFunction())\n    node.alternate = this.eat(tt._else) ? this.parseStatement(!this.strict && this.isFunction()) : null\n    return this.finishNode(node, \"IfStatement\")\n  }\n\n  pp$1.parseReturnStatement = function(node) {\n    if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n      this.raise(this.start, \"'return' outside of function\")\n    this.next()\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n  }\n\n  pp$1.parseSwitchStatement = function(node) {\n    var this$1 = this;\n\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.expect(tt.braceL)\n    this.labels.push(switchLabel)\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    for (var cur, sawDefault = false; this.type != tt.braceR;) {\n      if (this$1.type === tt._case || this$1.type === tt._default) {\n        var isCase = this$1.type === tt._case\n        if (cur) this$1.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this$1.startNode())\n        cur.consequent = []\n        this$1.next()\n        if (isCase) {\n          cur.test = this$1.parseExpression()\n        } else {\n          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\")\n          sawDefault = true\n          cur.test = null\n        }\n        this$1.expect(tt.colon)\n      } else {\n        if (!cur) this$1.unexpected()\n        cur.consequent.push(this$1.parseStatement(true))\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.next() // Closing brace\n    this.labels.pop()\n    return this.finishNode(node, \"SwitchStatement\")\n  }\n\n  pp$1.parseThrowStatement = function(node) {\n    this.next()\n    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n      this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n  }\n\n  // Reused empty array added for node fields that are always empty.\n\n  var empty = []\n\n  pp$1.parseTryStatement = function(node) {\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.type === tt._catch) {\n      var clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.parseBindingAtom()\n      this.checkLVal(clause.param, true)\n      this.expect(tt.parenR)\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer)\n      this.raise(node.start, \"Missing catch or finally clause\")\n    return this.finishNode(node, \"TryStatement\")\n  }\n\n  pp$1.parseVarStatement = function(node, kind) {\n    this.next()\n    this.parseVar(node, false, kind)\n    this.semicolon()\n    return this.finishNode(node, \"VariableDeclaration\")\n  }\n\n  pp$1.parseWhileStatement = function(node) {\n    this.next()\n    node.test = this.parseParenExpression()\n    this.labels.push(loopLabel)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"WhileStatement\")\n  }\n\n  pp$1.parseWithStatement = function(node) {\n    if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement(false)\n    return this.finishNode(node, \"WithStatement\")\n  }\n\n  pp$1.parseEmptyStatement = function(node) {\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n  }\n\n  pp$1.parseLabeledStatement = function(node, maybeName, expr) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.labels.length; ++i)\n      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n    var kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {\n      var label = this$1.labels[i$1]\n      if (label.statementStart == node.start) {\n        label.statementStart = this$1.start\n        label.kind = kind\n      } else break\n    }\n    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n    node.body = this.parseStatement(true)\n    this.labels.pop()\n    node.label = expr\n    return this.finishNode(node, \"LabeledStatement\")\n  }\n\n  pp$1.parseExpressionStatement = function(node, expr) {\n    node.expression = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExpressionStatement\")\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowStrict` is true (used for\n  // function bodies).\n\n  pp$1.parseBlock = function(allowStrict) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, oldStrict\n    node.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      var stmt = this$1.parseStatement(true)\n      node.body.push(stmt)\n      if (first && allowStrict && this$1.isUseStrict(stmt)) {\n        oldStrict = this$1.strict\n        this$1.setStrict(this$1.strict = true)\n      }\n      first = false\n    }\n    if (oldStrict === false) this.setStrict(false)\n    return this.finishNode(node, \"BlockStatement\")\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  pp$1.parseFor = function(node, init) {\n    node.init = init\n    this.expect(tt.semi)\n    node.test = this.type === tt.semi ? null : this.parseExpression()\n    this.expect(tt.semi)\n    node.update = this.type === tt.parenR ? null : this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, \"ForStatement\")\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  pp$1.parseForIn = function(node, init) {\n    var type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n    this.next()\n    node.left = init\n    node.right = this.parseExpression()\n    this.expect(tt.parenR)\n    node.body = this.parseStatement(false)\n    this.labels.pop()\n    return this.finishNode(node, type)\n  }\n\n  // Parse a list of variable declarations.\n\n  pp$1.parseVar = function(node, isFor, kind) {\n    var this$1 = this;\n\n    node.declarations = []\n    node.kind = kind\n    for (;;) {\n      var decl = this$1.startNode()\n      this$1.parseVarId(decl)\n      if (this$1.eat(tt.eq)) {\n        decl.init = this$1.parseMaybeAssign(isFor)\n      } else if (kind === \"const\" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n        this$1.unexpected()\n      } else if (decl.id.type != \"Identifier\" && !(isFor && (this$1.type === tt._in || this$1.isContextual(\"of\")))) {\n        this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\")\n      } else {\n        decl.init = null\n      }\n      node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"))\n      if (!this$1.eat(tt.comma)) break\n    }\n    return node\n  }\n\n  pp$1.parseVarId = function(decl) {\n    decl.id = this.parseBindingAtom()\n    this.checkLVal(decl.id, true)\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6 && !isAsync)\n      node.generator = this.eat(tt.star)\n    if (this.options.ecmaVersion >= 8)\n      node.async = !!isAsync\n\n    if (isStatement)\n      node.id = this.parseIdent()\n\n    var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos\n    this.inGenerator = node.generator\n    this.inAsync = node.async\n    this.yieldPos = 0\n    this.awaitPos = 0\n\n    if (!isStatement && this.type === tt.name)\n      node.id = this.parseIdent()\n    this.parseFunctionParams(node)\n    this.parseFunctionBody(node, allowExpressionBody)\n\n    this.inGenerator = oldInGen\n    this.inAsync = oldInAsync\n    this.yieldPos = oldYieldPos\n    this.awaitPos = oldAwaitPos\n    return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n  }\n\n  pp$1.parseFunctionParams = function(node) {\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8, true)\n    this.checkYieldAwaitInDefaultParams()\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  pp$1.parseClass = function(node, isStatement) {\n    var this$1 = this;\n\n    this.next()\n    this.parseClassId(node, isStatement)\n    this.parseClassSuper(node)\n    var classBody = this.startNode()\n    var hadConstructor = false\n    classBody.body = []\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (this$1.eat(tt.semi)) continue\n      var method = this$1.startNode()\n      var isGenerator = this$1.eat(tt.star)\n      var isAsync = false\n      var isMaybeStatic = this$1.type === tt.name && this$1.value === \"static\"\n      this$1.parsePropertyName(method)\n      method.static = isMaybeStatic && this$1.type !== tt.parenL\n      if (method.static) {\n        if (isGenerator) this$1.unexpected()\n        isGenerator = this$1.eat(tt.star)\n        this$1.parsePropertyName(method)\n      }\n      if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed &&\n          method.key.type === \"Identifier\" && method.key.name === \"async\" && this$1.type !== tt.parenL &&\n          !this$1.canInsertSemicolon()) {\n        isAsync = true\n        this$1.parsePropertyName(method)\n      }\n      method.kind = \"method\"\n      var isGetSet = false\n      if (!method.computed) {\n        var key = method.key;\n        if (!isGenerator && !isAsync && key.type === \"Identifier\" && this$1.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n          isGetSet = true\n          method.kind = key.name\n          key = this$1.parsePropertyName(method)\n        }\n        if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n            key.type === \"Literal\" && key.value === \"constructor\")) {\n          if (hadConstructor) this$1.raise(key.start, \"Duplicate constructor in the same class\")\n          if (isGetSet) this$1.raise(key.start, \"Constructor can't have get/set modifier\")\n          if (isGenerator) this$1.raise(key.start, \"Constructor can't be a generator\")\n          if (isAsync) this$1.raise(key.start, \"Constructor can't be an async method\")\n          method.kind = \"constructor\"\n          hadConstructor = true\n        }\n      }\n      this$1.parseClassMethod(classBody, method, isGenerator, isAsync)\n      if (isGetSet) {\n        var paramCount = method.kind === \"get\" ? 0 : 1\n        if (method.value.params.length !== paramCount) {\n          var start = method.value.start\n          if (method.kind === \"get\")\n            this$1.raiseRecoverable(start, \"getter should have no params\")\n          else\n            this$1.raiseRecoverable(start, \"setter should have exactly one param\")\n        } else {\n          if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n            this$1.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\")\n        }\n      }\n    }\n    node.body = this.finishNode(classBody, \"ClassBody\")\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n  }\n\n  pp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n    method.value = this.parseMethod(isGenerator, isAsync)\n    classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n\n  pp$1.parseClassId = function(node, isStatement) {\n    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n  }\n\n  pp$1.parseClassSuper = function(node) {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n  }\n\n  // Parses module export declaration.\n\n  pp$1.parseExport = function(node, exports) {\n    var this$1 = this;\n\n    this.next()\n    // export * from '...'\n    if (this.eat(tt.star)) {\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      this.semicolon()\n      return this.finishNode(node, \"ExportAllDeclaration\")\n    }\n    if (this.eat(tt._default)) { // export default ...\n      this.checkExport(exports, \"default\", this.lastTokStart)\n      var parens = this.type == tt.parenL\n      var expr = this.parseMaybeAssign()\n      var needsSemi = true\n      if (!parens && (expr.type == \"FunctionExpression\" ||\n                      expr.type == \"ClassExpression\")) {\n        needsSemi = false\n        if (expr.id) {\n          expr.type = expr.type == \"FunctionExpression\"\n            ? \"FunctionDeclaration\"\n            : \"ClassDeclaration\"\n        }\n      }\n      node.declaration = expr\n      if (needsSemi) this.semicolon()\n      return this.finishNode(node, \"ExportDefaultDeclaration\")\n    }\n    // export var|const|let|function|class ...\n    if (this.shouldParseExportStatement()) {\n      node.declaration = this.parseStatement(true)\n      if (node.declaration.type === \"VariableDeclaration\")\n        this.checkVariableExport(exports, node.declaration.declarations)\n      else\n        this.checkExport(exports, node.declaration.id.name, node.declaration.id.start)\n      node.specifiers = []\n      node.source = null\n    } else { // export { x, y as z } [from '...']\n      node.declaration = null\n      node.specifiers = this.parseExportSpecifiers(exports)\n      if (this.eatContextual(\"from\")) {\n        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n      } else {\n        // check for keywords used as local names\n        for (var i = 0; i < node.specifiers.length; i++) {\n          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {\n            this$1.unexpected(node.specifiers[i].local.start)\n          }\n        }\n\n        node.source = null\n      }\n      this.semicolon()\n    }\n    return this.finishNode(node, \"ExportNamedDeclaration\")\n  }\n\n  pp$1.checkExport = function(exports, name, pos) {\n    if (!exports) return\n    if (Object.prototype.hasOwnProperty.call(exports, name))\n      this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\")\n    exports[name] = true\n  }\n\n  pp$1.checkPatternExport = function(exports, pat) {\n    var this$1 = this;\n\n    var type = pat.type\n    if (type == \"Identifier\")\n      this.checkExport(exports, pat.name, pat.start)\n    else if (type == \"ObjectPattern\")\n      for (var i = 0; i < pat.properties.length; ++i)\n        this$1.checkPatternExport(exports, pat.properties[i].value)\n    else if (type == \"ArrayPattern\")\n      for (var i$1 = 0; i$1 < pat.elements.length; ++i$1) {\n        var elt = pat.elements[i$1]\n        if (elt) this$1.checkPatternExport(exports, elt)\n      }\n    else if (type == \"AssignmentPattern\")\n      this.checkPatternExport(exports, pat.left)\n    else if (type == \"ParenthesizedExpression\")\n      this.checkPatternExport(exports, pat.expression)\n  }\n\n  pp$1.checkVariableExport = function(exports, decls) {\n    var this$1 = this;\n\n    if (!exports) return\n    for (var i = 0; i < decls.length; i++)\n      this$1.checkPatternExport(exports, decls[i].id)\n  }\n\n  pp$1.shouldParseExportStatement = function() {\n    return this.type.keyword || this.isLet() || this.isAsyncFunction()\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  pp$1.parseExportSpecifiers = function(exports) {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node = this$1.startNode()\n      node.local = this$1.parseIdent(this$1.type === tt._default)\n      node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local\n      this$1.checkExport(exports, node.exported.name, node.exported.start)\n      nodes.push(this$1.finishNode(node, \"ExportSpecifier\"))\n    }\n    return nodes\n  }\n\n  // Parses import declaration.\n\n  pp$1.parseImport = function(node) {\n    this.next()\n    // import '...'\n    if (this.type === tt.string) {\n      node.specifiers = empty\n      node.source = this.parseExprAtom()\n    } else {\n      node.specifiers = this.parseImportSpecifiers()\n      this.expectContextual(\"from\")\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    }\n    this.semicolon()\n    return this.finishNode(node, \"ImportDeclaration\")\n  }\n\n  // Parses a comma-separated list of module imports.\n\n  pp$1.parseImportSpecifiers = function() {\n    var this$1 = this;\n\n    var nodes = [], first = true\n    if (this.type === tt.name) {\n      // import defaultObj, { x, y as z } from '...'\n      var node = this.startNode()\n      node.local = this.parseIdent()\n      this.checkLVal(node.local, true)\n      nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n      if (!this.eat(tt.comma)) return nodes\n    }\n    if (this.type === tt.star) {\n      var node$1 = this.startNode()\n      this.next()\n      this.expectContextual(\"as\")\n      node$1.local = this.parseIdent()\n      this.checkLVal(node$1.local, true)\n      nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"))\n      return nodes\n    }\n    this.expect(tt.braceL)\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var node$2 = this$1.startNode()\n      node$2.imported = this$1.parseIdent(true)\n      if (this$1.eatContextual(\"as\")) {\n        node$2.local = this$1.parseIdent()\n      } else {\n        node$2.local = node$2.imported\n        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)\n        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raiseRecoverable(node$2.local.start, \"The keyword '\" + node$2.local.name + \"' is reserved\")\n      }\n      this$1.checkLVal(node$2.local, true)\n      nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"))\n    }\n    return nodes\n  }\n\n  var pp$2 = Parser.prototype\n\n  // Convert existing expression atom to assignable pattern\n  // if possible.\n\n  pp$2.toAssignable = function(node, isBinding) {\n    var this$1 = this;\n\n    if (this.options.ecmaVersion >= 6 && node) {\n      switch (node.type) {\n        case \"Identifier\":\n        if (this.inAsync && node.name === \"await\")\n          this.raise(node.start, \"Can not use 'await' as identifier inside an async function\")\n        break\n\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\"\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i]\n          if (prop.kind !== \"init\") this$1.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n          this$1.toAssignable(prop.value, isBinding)\n        }\n        break\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\"\n        this.toAssignableList(node.elements, isBinding)\n        break\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\"\n          delete node.operator\n          this.toAssignable(node.left, isBinding)\n          // falls through to AssignmentPattern\n        } else {\n          this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n          break\n        }\n\n      case \"AssignmentPattern\":\n        break\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding)\n        break\n\n      case \"MemberExpression\":\n        if (!isBinding) break\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\")\n      }\n    }\n    return node\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  pp$2.toAssignableList = function(exprList, isBinding) {\n    var this$1 = this;\n\n    var end = exprList.length\n    if (end) {\n      var last = exprList[end - 1]\n      if (last && last.type == \"RestElement\") {\n        --end\n      } else if (last && last.type == \"SpreadElement\") {\n        last.type = \"RestElement\"\n        var arg = last.argument\n        this.toAssignable(arg, isBinding)\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n          this.unexpected(arg.start)\n        --end\n      }\n\n      if (isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n        this.unexpected(last.argument.start)\n    }\n    for (var i = 0; i < end; i++) {\n      var elt = exprList[i]\n      if (elt) this$1.toAssignable(elt, isBinding)\n    }\n    return exprList\n  }\n\n  // Parses spread element.\n\n  pp$2.parseSpread = function(refDestructuringErrors) {\n    var node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n\n  pp$2.parseRest = function(allowNonIdent) {\n    var node = this.startNode()\n    this.next()\n\n    // RestElement inside of a function parameter must be an identifier\n    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()\n    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n\n    return this.finishNode(node, \"RestElement\")\n  }\n\n  // Parses lvalue (assignable) atom.\n\n  pp$2.parseBindingAtom = function() {\n    if (this.options.ecmaVersion < 6) return this.parseIdent()\n    switch (this.type) {\n    case tt.name:\n      return this.parseIdent()\n\n    case tt.bracketL:\n      var node = this.startNode()\n      this.next()\n      node.elements = this.parseBindingList(tt.bracketR, true, true)\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case tt.braceL:\n      return this.parseObj(true)\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (first) first = false\n      else this$1.expect(tt.comma)\n      if (allowEmpty && this$1.type === tt.comma) {\n        elts.push(null)\n      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n        break\n      } else if (this$1.type === tt.ellipsis) {\n        var rest = this$1.parseRest(allowNonIdent)\n        this$1.parseBindingListItem(rest)\n        elts.push(rest)\n        if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n        this$1.expect(close)\n        break\n      } else {\n        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)\n        this$1.parseBindingListItem(elem)\n        elts.push(elem)\n      }\n    }\n    return elts\n  }\n\n  pp$2.parseBindingListItem = function(param) {\n    return param\n  }\n\n  // Parses assignment pattern around given atom if possible.\n\n  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n    left = left || this.parseBindingAtom()\n    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.right = this.parseMaybeAssign()\n    return this.finishNode(node, \"AssignmentPattern\")\n  }\n\n  // Verify that a node is an lval — something that can be assigned\n  // to.\n\n  pp$2.checkLVal = function(expr, isBinding, checkClashes) {\n    var this$1 = this;\n\n    switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n        this.raiseRecoverable(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n      if (checkClashes) {\n        if (has(checkClashes, expr.name))\n          this.raiseRecoverable(expr.start, \"Argument name clash\")\n        checkClashes[expr.name] = true\n      }\n      break\n\n    case \"MemberExpression\":\n      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n      break\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++)\n        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n      break\n\n    case \"ArrayPattern\":\n      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {\n        var elem = expr.elements[i$1]\n        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)\n      }\n      break\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes)\n      break\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes)\n      break\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes)\n      break\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n    }\n  }\n\n  var pp$3 = Parser.prototype\n\n  // Check if property name clashes with already added.\n  // Object/class getters and setters are not allowed to clash —\n  // either with each other or with an init property — and in\n  // strict mode, init properties are also not allowed to be repeated.\n\n  pp$3.checkPropClash = function(prop, propHash) {\n    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n      return\n    var key = prop.key;\n    var name\n    switch (key.type) {\n    case \"Identifier\": name = key.name; break\n    case \"Literal\": name = String(key.value); break\n    default: return\n    }\n    var kind = prop.kind;\n    if (this.options.ecmaVersion >= 6) {\n      if (name === \"__proto__\" && kind === \"init\") {\n        if (propHash.proto) this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\")\n        propHash.proto = true\n      }\n      return\n    }\n    name = \"$\" + name\n    var other = propHash[name]\n    if (other) {\n      var isGetSet = kind !== \"init\"\n      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))\n        this.raiseRecoverable(key.start, \"Redefinition of property\")\n    } else {\n      other = propHash[name] = {\n        init: false,\n        get: false,\n        set: false\n      }\n    }\n    other[kind] = true\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function(s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression. The optional arguments are used to\n  // forbid the `in` operator (in for loops initalization expressions)\n  // and provide reference for storing '=' operator inside shorthand\n  // property assignment in contexts where both object expression\n  // and object pattern might appear (so it's possible to raise\n  // delayed syntax error at correct position).\n\n  pp$3.parseExpression = function(noIn, refDestructuringErrors) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)\n    if (this.type === tt.comma) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.expressions = [expr]\n      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))\n      return this.finishNode(node, \"SequenceExpression\")\n    }\n    return expr\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n\n  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n    if (this.inGenerator && this.isContextual(\"yield\")) return this.parseYield()\n\n    var ownDestructuringErrors = false\n    if (!refDestructuringErrors) {\n      refDestructuringErrors = new DestructuringErrors\n      ownDestructuringErrors = true\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    if (this.type == tt.parenL || this.type == tt.name)\n      this.potentialArrowAt = this.start\n    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)\n    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)\n    if (this.type.isAssign) {\n      this.checkPatternErrors(refDestructuringErrors, true)\n      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)\n      var node = this.startNodeAt(startPos, startLoc)\n      node.operator = this.value\n      node.left = this.type === tt.eq ? this.toAssignable(left) : left\n      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly\n      this.checkLVal(left)\n      this.next()\n      node.right = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"AssignmentExpression\")\n    } else {\n      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)\n    }\n    return left\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n\n  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprOps(noIn, refDestructuringErrors)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    if (this.eat(tt.question)) {\n      var node = this.startNodeAt(startPos, startLoc)\n      node.test = expr\n      node.consequent = this.parseMaybeAssign()\n      this.expect(tt.colon)\n      node.alternate = this.parseMaybeAssign(noIn)\n      return this.finishNode(node, \"ConditionalExpression\")\n    }\n    return expr\n  }\n\n  // Start the precedence parser.\n\n  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseMaybeUnary(refDestructuringErrors, false)\n    if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    var prec = this.type.binop\n    if (prec != null && (!noIn || this.type !== tt._in)) {\n      if (prec > minPrec) {\n        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND\n        var op = this.value\n        this.next()\n        var startPos = this.start, startLoc = this.startLoc\n        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)\n        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n      }\n    }\n    return left\n  }\n\n  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n    var node = this.startNodeAt(startPos, startLoc)\n    node.left = left\n    node.operator = op\n    node.right = right\n    return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n  }\n\n  // Parse unary operators, both prefix and postfix.\n\n  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, expr\n    if (this.inAsync && this.isContextual(\"await\")) {\n      expr = this.parseAwait(refDestructuringErrors)\n      sawUnary = true\n    } else if (this.type.prefix) {\n      var node = this.startNode(), update = this.type === tt.incDec\n      node.operator = this.value\n      node.prefix = true\n      this.next()\n      node.argument = this.parseMaybeUnary(null, true)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n      if (update) this.checkLVal(node.argument)\n      else if (this.strict && node.operator === \"delete\" &&\n               node.argument.type === \"Identifier\")\n        this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\")\n      else sawUnary = true\n      expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n    } else {\n      expr = this.parseExprSubscripts(refDestructuringErrors)\n      if (this.checkExpressionErrors(refDestructuringErrors)) return expr\n      while (this.type.postfix && !this.canInsertSemicolon()) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.operator = this$1.value\n        node$1.prefix = false\n        node$1.argument = expr\n        this$1.checkLVal(expr)\n        this$1.next()\n        expr = this$1.finishNode(node$1, \"UpdateExpression\")\n      }\n    }\n\n    if (!sawUnary && this.eat(tt.starstar))\n      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false)\n    else\n      return expr\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n\n  pp$3.parseExprSubscripts = function(refDestructuringErrors) {\n    var startPos = this.start, startLoc = this.startLoc\n    var expr = this.parseExprAtom(refDestructuringErrors)\n    var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\"\n    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr\n    return this.parseSubscripts(expr, startPos, startLoc)\n  }\n\n  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n    var this$1 = this;\n\n    for (;;) {\n      var maybeAsyncArrow = this$1.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" && !this$1.canInsertSemicolon()\n      if (this$1.eat(tt.dot)) {\n        var node = this$1.startNodeAt(startPos, startLoc)\n        node.object = base\n        node.property = this$1.parseIdent(true)\n        node.computed = false\n        base = this$1.finishNode(node, \"MemberExpression\")\n      } else if (this$1.eat(tt.bracketL)) {\n        var node$1 = this$1.startNodeAt(startPos, startLoc)\n        node$1.object = base\n        node$1.property = this$1.parseExpression()\n        node$1.computed = true\n        this$1.expect(tt.bracketR)\n        base = this$1.finishNode(node$1, \"MemberExpression\")\n      } else if (!noCalls && this$1.eat(tt.parenL)) {\n        var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos\n        this$1.yieldPos = 0\n        this$1.awaitPos = 0\n        var exprList = this$1.parseExprList(tt.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors)\n        if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(tt.arrow)) {\n          this$1.checkPatternErrors(refDestructuringErrors, true)\n          this$1.checkYieldAwaitInDefaultParams()\n          this$1.yieldPos = oldYieldPos\n          this$1.awaitPos = oldAwaitPos\n          return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n        }\n        this$1.checkExpressionErrors(refDestructuringErrors, true)\n        this$1.yieldPos = oldYieldPos || this$1.yieldPos\n        this$1.awaitPos = oldAwaitPos || this$1.awaitPos\n        var node$2 = this$1.startNodeAt(startPos, startLoc)\n        node$2.callee = base\n        node$2.arguments = exprList\n        base = this$1.finishNode(node$2, \"CallExpression\")\n      } else if (this$1.type === tt.backQuote) {\n        var node$3 = this$1.startNodeAt(startPos, startLoc)\n        node$3.tag = base\n        node$3.quasi = this$1.parseTemplate()\n        base = this$1.finishNode(node$3, \"TaggedTemplateExpression\")\n      } else {\n        return base\n      }\n    }\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  pp$3.parseExprAtom = function(refDestructuringErrors) {\n    var node, canBeArrow = this.potentialArrowAt == this.start\n    switch (this.type) {\n    case tt._super:\n      if (!this.inFunction)\n        this.raise(this.start, \"'super' outside of function or class\")\n\n    case tt._this:\n      var type = this.type === tt._this ? \"ThisExpression\" : \"Super\"\n      node = this.startNode()\n      this.next()\n      return this.finishNode(node, type)\n\n    case tt.name:\n      var startPos = this.start, startLoc = this.startLoc\n      var id = this.parseIdent(this.type !== tt.name)\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(tt._function))\n        return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true)\n      if (canBeArrow && !this.canInsertSemicolon()) {\n        if (this.eat(tt.arrow))\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false)\n        if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === tt.name) {\n          id = this.parseIdent()\n          if (this.canInsertSemicolon() || !this.eat(tt.arrow))\n            this.unexpected()\n          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n        }\n      }\n      return id\n\n    case tt.regexp:\n      var value = this.value\n      node = this.parseLiteral(value.value)\n      node.regex = {pattern: value.pattern, flags: value.flags}\n      return node\n\n    case tt.num: case tt.string:\n      return this.parseLiteral(this.value)\n\n    case tt._null: case tt._true: case tt._false:\n      node = this.startNode()\n      node.value = this.type === tt._null ? null : this.type === tt._true\n      node.raw = this.type.keyword\n      this.next()\n      return this.finishNode(node, \"Literal\")\n\n    case tt.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow)\n\n    case tt.bracketL:\n      node = this.startNode()\n      this.next()\n      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)\n      return this.finishNode(node, \"ArrayExpression\")\n\n    case tt.braceL:\n      return this.parseObj(false, refDestructuringErrors)\n\n    case tt._function:\n      node = this.startNode()\n      this.next()\n      return this.parseFunction(node, false)\n\n    case tt._class:\n      return this.parseClass(this.startNode(), false)\n\n    case tt._new:\n      return this.parseNew()\n\n    case tt.backQuote:\n      return this.parseTemplate()\n\n    default:\n      this.unexpected()\n    }\n  }\n\n  pp$3.parseLiteral = function(value) {\n    var node = this.startNode()\n    node.value = value\n    node.raw = this.input.slice(this.start, this.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n  }\n\n  pp$3.parseParenExpression = function() {\n    this.expect(tt.parenL)\n    var val = this.parseExpression()\n    this.expect(tt.parenR)\n    return val\n  }\n\n  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n    var this$1 = this;\n\n    var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8\n    if (this.options.ecmaVersion >= 6) {\n      this.next()\n\n      var innerStartPos = this.start, innerStartLoc = this.startLoc\n      var exprList = [], first = true, lastIsComma = false\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart, innerParenStart\n      this.yieldPos = 0\n      this.awaitPos = 0\n      while (this.type !== tt.parenR) {\n        first ? first = false : this$1.expect(tt.comma)\n        if (allowTrailingComma && this$1.afterTrailingComma(tt.parenR, true)) {\n          lastIsComma = true\n          break\n        } else if (this$1.type === tt.ellipsis) {\n          spreadStart = this$1.start\n          exprList.push(this$1.parseParenItem(this$1.parseRest()))\n          if (this$1.type === tt.comma) this$1.raise(this$1.start, \"Comma is not permitted after the rest element\")\n          break\n        } else {\n          if (this$1.type === tt.parenL && !innerParenStart) {\n            innerParenStart = this$1.start\n          }\n          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))\n        }\n      }\n      var innerEndPos = this.start, innerEndLoc = this.startLoc\n      this.expect(tt.parenR)\n\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {\n        this.checkPatternErrors(refDestructuringErrors, true)\n        this.checkYieldAwaitInDefaultParams()\n        if (innerParenStart) this.unexpected(innerParenStart)\n        this.yieldPos = oldYieldPos\n        this.awaitPos = oldAwaitPos\n        return this.parseParenArrowList(startPos, startLoc, exprList)\n      }\n\n      if (!exprList.length || lastIsComma) this.unexpected(this.lastTokStart)\n      if (spreadStart) this.unexpected(spreadStart)\n      this.checkExpressionErrors(refDestructuringErrors, true)\n      this.yieldPos = oldYieldPos || this.yieldPos\n      this.awaitPos = oldAwaitPos || this.awaitPos\n\n      if (exprList.length > 1) {\n        val = this.startNodeAt(innerStartPos, innerStartLoc)\n        val.expressions = exprList\n        this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc)\n      } else {\n        val = exprList[0]\n      }\n    } else {\n      val = this.parseParenExpression()\n    }\n\n    if (this.options.preserveParens) {\n      var par = this.startNodeAt(startPos, startLoc)\n      par.expression = val\n      return this.finishNode(par, \"ParenthesizedExpression\")\n    } else {\n      return val\n    }\n  }\n\n  pp$3.parseParenItem = function(item) {\n    return item\n  }\n\n  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n\n  var empty$1 = []\n\n  pp$3.parseNew = function() {\n    var node = this.startNode()\n    var meta = this.parseIdent(true)\n    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n      node.meta = meta\n      node.property = this.parseIdent(true)\n      if (node.property.name !== \"target\")\n        this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\")\n      if (!this.inFunction)\n        this.raiseRecoverable(node.start, \"new.target can only be used in functions\")\n      return this.finishNode(node, \"MetaProperty\")\n    }\n    var startPos = this.start, startLoc = this.startLoc\n    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)\n    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, this.options.ecmaVersion >= 8, false)\n    else node.arguments = empty$1\n    return this.finishNode(node, \"NewExpression\")\n  }\n\n  // Parse template expression.\n\n  pp$3.parseTemplateElement = function() {\n    var elem = this.startNode()\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n      cooked: this.value\n    }\n    this.next()\n    elem.tail = this.type === tt.backQuote\n    return this.finishNode(elem, \"TemplateElement\")\n  }\n\n  pp$3.parseTemplate = function() {\n    var this$1 = this;\n\n    var node = this.startNode()\n    this.next()\n    node.expressions = []\n    var curElt = this.parseTemplateElement()\n    node.quasis = [curElt]\n    while (!curElt.tail) {\n      this$1.expect(tt.dollarBraceL)\n      node.expressions.push(this$1.parseExpression())\n      this$1.expect(tt.braceR)\n      node.quasis.push(curElt = this$1.parseTemplateElement())\n    }\n    this.next()\n    return this.finishNode(node, \"TemplateLiteral\")\n  }\n\n  // Parse an object literal or binding pattern.\n\n  pp$3.parseObj = function(isPattern, refDestructuringErrors) {\n    var this$1 = this;\n\n    var node = this.startNode(), first = true, propHash = {}\n    node.properties = []\n    this.next()\n    while (!this.eat(tt.braceR)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (this$1.afterTrailingComma(tt.braceR)) break\n      } else first = false\n\n      var prop = this$1.startNode(), isGenerator, isAsync, startPos, startLoc\n      if (this$1.options.ecmaVersion >= 6) {\n        prop.method = false\n        prop.shorthand = false\n        if (isPattern || refDestructuringErrors) {\n          startPos = this$1.start\n          startLoc = this$1.startLoc\n        }\n        if (!isPattern)\n          isGenerator = this$1.eat(tt.star)\n      }\n      this$1.parsePropertyName(prop)\n      if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && !prop.computed &&\n          prop.key.type === \"Identifier\" && prop.key.name === \"async\" && this$1.type !== tt.parenL &&\n          this$1.type !== tt.colon && !this$1.canInsertSemicolon()) {\n        isAsync = true\n        this$1.parsePropertyName(prop, refDestructuringErrors)\n      } else {\n        isAsync = false\n      }\n      this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors)\n      this$1.checkPropClash(prop, propHash)\n      node.properties.push(this$1.finishNode(prop, \"Property\"))\n    }\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n  }\n\n  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {\n    if ((isGenerator || isAsync) && this.type === tt.colon)\n      this.unexpected()\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)\n      prop.kind = \"init\"\n    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {\n      if (isPattern) this.unexpected()\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator, isAsync)\n    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n               (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.type != tt.comma && this.type != tt.braceR)) {\n      if (isGenerator || isAsync || isPattern) this.unexpected()\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n      var paramCount = prop.kind === \"get\" ? 0 : 1\n      if (prop.value.params.length !== paramCount) {\n        var start = prop.value.start\n        if (prop.kind === \"get\")\n          this.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this.raiseRecoverable(start, \"setter should have exactly one param\")\n      } else {\n        if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n          this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\")\n      }\n    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n      if (this.keywords.test(prop.key.name) ||\n          (this.strict ? this.reservedWordsStrict : this.reservedWords).test(prop.key.name) ||\n          (this.inGenerator && prop.key.name == \"yield\") ||\n          (this.inAsync && prop.key.name == \"await\"))\n        this.raiseRecoverable(prop.key.start, \"'\" + prop.key.name + \"' can not be used as shorthand property\")\n      prop.kind = \"init\"\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else if (this.type === tt.eq && refDestructuringErrors) {\n        if (!refDestructuringErrors.shorthandAssign)\n          refDestructuringErrors.shorthandAssign = this.start\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)\n      } else {\n        prop.value = prop.key\n      }\n      prop.shorthand = true\n    } else this.unexpected()\n  }\n\n  pp$3.parsePropertyName = function(prop) {\n    if (this.options.ecmaVersion >= 6) {\n      if (this.eat(tt.bracketL)) {\n        prop.computed = true\n        prop.key = this.parseMaybeAssign()\n        this.expect(tt.bracketR)\n        return prop.key\n      } else {\n        prop.computed = false\n      }\n    }\n    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)\n  }\n\n  // Initialize empty function node.\n\n  pp$3.initFunction = function(node) {\n    node.id = null\n    if (this.options.ecmaVersion >= 6) {\n      node.generator = false\n      node.expression = false\n    }\n    if (this.options.ecmaVersion >= 8)\n      node.async = false\n  }\n\n  // Parse object or class method.\n\n  pp$3.parseMethod = function(isGenerator, isAsync) {\n    var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos\n\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 6)\n      node.generator = isGenerator\n    if (this.options.ecmaVersion >= 8)\n      node.async = !!isAsync\n\n    this.inGenerator = node.generator\n    this.inAsync = node.async\n    this.yieldPos = 0\n    this.awaitPos = 0\n\n    this.expect(tt.parenL)\n    node.params = this.parseBindingList(tt.parenR, false, this.options.ecmaVersion >= 8)\n    this.checkYieldAwaitInDefaultParams()\n    this.parseFunctionBody(node, false)\n\n    this.inGenerator = oldInGen\n    this.inAsync = oldInAsync\n    this.yieldPos = oldYieldPos\n    this.awaitPos = oldAwaitPos\n    return this.finishNode(node, \"FunctionExpression\")\n  }\n\n  // Parse arrow function expression with given parameters.\n\n  pp$3.parseArrowExpression = function(node, params, isAsync) {\n    var oldInGen = this.inGenerator, oldInAsync = this.inAsync, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos\n\n    this.initFunction(node)\n    if (this.options.ecmaVersion >= 8)\n      node.async = !!isAsync\n\n    this.inGenerator = false\n    this.inAsync = node.async\n    this.yieldPos = 0\n    this.awaitPos = 0\n\n    node.params = this.toAssignableList(params, true)\n    this.parseFunctionBody(node, true)\n\n    this.inGenerator = oldInGen\n    this.inAsync = oldInAsync\n    this.yieldPos = oldYieldPos\n    this.awaitPos = oldAwaitPos\n    return this.finishNode(node, \"ArrowFunctionExpression\")\n  }\n\n  // Parse function body and check parameters.\n\n  pp$3.parseFunctionBody = function(node, isArrowFunction) {\n    var isExpression = isArrowFunction && this.type !== tt.braceL\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign()\n      node.expression = true\n    } else {\n      // Start a new scope with regard to labels and the `inFunction`\n      // flag (restore them to their old value afterwards).\n      var oldInFunc = this.inFunction, oldLabels = this.labels\n      this.inFunction = true; this.labels = []\n      node.body = this.parseBlock(true)\n      node.expression = false\n      this.inFunction = oldInFunc; this.labels = oldLabels\n    }\n\n    // If this is a strict mode function, verify that argument names\n    // are not repeated, and it does not try to bind the words `eval`\n    // or `arguments`.\n    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null\n    if (useStrict && this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params))\n      this.raiseRecoverable(useStrict.start, \"Illegal 'use strict' directive in function with non-simple parameter list\")\n\n    if (this.strict || useStrict) {\n      var oldStrict = this.strict\n      this.strict = true\n      if (node.id)\n        this.checkLVal(node.id, true)\n      this.checkParams(node)\n      this.strict = oldStrict\n    } else if (isArrowFunction || !this.isSimpleParamList(node.params)) {\n      this.checkParams(node)\n    }\n  }\n\n  pp$3.isSimpleParamList = function(params) {\n    for (var i = 0; i < params.length; i++)\n      if (params[i].type !== \"Identifier\") return false\n    return true\n  }\n\n  // Checks function params for various disallowed patterns such as using \"eval\"\n  // or \"arguments\" and duplicate parameters.\n\n  pp$3.checkParams = function(node) {\n    var this$1 = this;\n\n    var nameHash = {}\n    for (var i = 0; i < node.params.length; i++) this$1.checkLVal(node.params[i], true, nameHash)\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n    var this$1 = this;\n\n    var elts = [], first = true\n    while (!this.eat(close)) {\n      if (!first) {\n        this$1.expect(tt.comma)\n        if (allowTrailingComma && this$1.afterTrailingComma(close)) break\n      } else first = false\n\n      var elt\n      if (allowEmpty && this$1.type === tt.comma)\n        elt = null\n      else if (this$1.type === tt.ellipsis) {\n        elt = this$1.parseSpread(refDestructuringErrors)\n        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n          refDestructuringErrors.trailingComma = this$1.start\n        }\n      } else\n        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)\n      elts.push(elt)\n    }\n    return elts\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n\n  pp$3.parseIdent = function(liberal) {\n    var node = this.startNode()\n    if (liberal && this.options.allowReserved == \"never\") liberal = false\n    if (this.type === tt.name) {\n      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&\n          (this.options.ecmaVersion >= 6 ||\n           this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1))\n        this.raiseRecoverable(this.start, \"The keyword '\" + this.value + \"' is reserved\")\n      if (this.inGenerator && this.value === \"yield\")\n        this.raiseRecoverable(this.start, \"Can not use 'yield' as identifier inside a generator\")\n      if (this.inAsync && this.value === \"await\")\n        this.raiseRecoverable(this.start, \"Can not use 'await' as identifier inside an async function\")\n      node.name = this.value\n    } else if (liberal && this.type.keyword) {\n      node.name = this.type.keyword\n    } else {\n      this.unexpected()\n    }\n    this.next()\n    return this.finishNode(node, \"Identifier\")\n  }\n\n  // Parses yield expression inside generator.\n\n  pp$3.parseYield = function() {\n    if (!this.yieldPos) this.yieldPos = this.start\n\n    var node = this.startNode()\n    this.next()\n    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n  }\n\n  pp$3.parseAwait = function() {\n    if (!this.awaitPos) this.awaitPos = this.start\n\n    var node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeUnary(null, true)\n    return this.finishNode(node, \"AwaitExpression\")\n  }\n\n  var pp$4 = Parser.prototype\n\n  // This function is used to raise exceptions on parse errors. It\n  // takes an offset integer (into the current `input`) to indicate\n  // the location of the error, attaches the position to the end\n  // of the error message, and then raises a `SyntaxError` with that\n  // message.\n\n  pp$4.raise = function(pos, message) {\n    var loc = getLineInfo(this.input, pos)\n    message += \" (\" + loc.line + \":\" + loc.column + \")\"\n    var err = new SyntaxError(message)\n    err.pos = pos; err.loc = loc; err.raisedAt = this.pos\n    throw err\n  }\n\n  pp$4.raiseRecoverable = pp$4.raise\n\n  pp$4.curPosition = function() {\n    if (this.options.locations) {\n      return new Position(this.curLine, this.pos - this.lineStart)\n    }\n  }\n\n  var Node = function Node(parser, pos, loc) {\n    this.type = \"\"\n    this.start = pos\n    this.end = 0\n    if (parser.options.locations)\n      this.loc = new SourceLocation(parser, loc)\n    if (parser.options.directSourceFile)\n      this.sourceFile = parser.options.directSourceFile\n    if (parser.options.ranges)\n      this.range = [pos, 0]\n  };\n\n  // Start an AST node, attaching a start offset.\n\n  var pp$5 = Parser.prototype\n\n  pp$5.startNode = function() {\n    return new Node(this, this.start, this.startLoc)\n  }\n\n  pp$5.startNodeAt = function(pos, loc) {\n    return new Node(this, pos, loc)\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  function finishNodeAt(node, type, pos, loc) {\n    node.type = type\n    node.end = pos\n    if (this.options.locations)\n      node.loc.end = loc\n    if (this.options.ranges)\n      node.range[1] = pos\n    return node\n  }\n\n  pp$5.finishNode = function(node, type) {\n    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n  }\n\n  // Finish node at given position\n\n  pp$5.finishNodeAt = function(node, type, pos, loc) {\n    return finishNodeAt.call(this, node, type, pos, loc)\n  }\n\n  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n    this.token = token\n    this.isExpr = !!isExpr\n    this.preserveSpace = !!preserveSpace\n    this.override = override\n  };\n\n  var types = {\n    b_stat: new TokContext(\"{\", false),\n    b_expr: new TokContext(\"{\", true),\n    b_tmpl: new TokContext(\"${\", true),\n    p_stat: new TokContext(\"(\", false),\n    p_expr: new TokContext(\"(\", true),\n    q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.readTmplToken(); }),\n    f_expr: new TokContext(\"function\", true)\n  }\n\n  var pp$6 = Parser.prototype\n\n  pp$6.initialContext = function() {\n    return [types.b_stat]\n  }\n\n  pp$6.braceIsBlock = function(prevType) {\n    if (prevType === tt.colon) {\n      var parent = this.curContext()\n      if (parent === types.b_stat || parent === types.b_expr)\n        return !parent.isExpr\n    }\n    if (prevType === tt._return)\n      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)\n      return true\n    if (prevType == tt.braceL)\n      return this.curContext() === types.b_stat\n    return !this.exprAllowed\n  }\n\n  pp$6.updateContext = function(prevType) {\n    var update, type = this.type\n    if (type.keyword && prevType == tt.dot)\n      this.exprAllowed = false\n    else if (update = type.updateContext)\n      update.call(this, prevType)\n    else\n      this.exprAllowed = type.beforeExpr\n  }\n\n  // Token-specific context update code\n\n  tt.parenR.updateContext = tt.braceR.updateContext = function() {\n    if (this.context.length == 1) {\n      this.exprAllowed = true\n      return\n    }\n    var out = this.context.pop()\n    if (out === types.b_stat && this.curContext() === types.f_expr) {\n      this.context.pop()\n      this.exprAllowed = false\n    } else if (out === types.b_tmpl) {\n      this.exprAllowed = true\n    } else {\n      this.exprAllowed = !out.isExpr\n    }\n  }\n\n  tt.braceL.updateContext = function(prevType) {\n    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)\n    this.exprAllowed = true\n  }\n\n  tt.dollarBraceL.updateContext = function() {\n    this.context.push(types.b_tmpl)\n    this.exprAllowed = true\n  }\n\n  tt.parenL.updateContext = function(prevType) {\n    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while\n    this.context.push(statementParens ? types.p_stat : types.p_expr)\n    this.exprAllowed = true\n  }\n\n  tt.incDec.updateContext = function() {\n    // tokExprAllowed stays unchanged\n  }\n\n  tt._function.updateContext = function(prevType) {\n    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&\n        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))\n      this.context.push(types.f_expr)\n    this.exprAllowed = false\n  }\n\n  tt.backQuote.updateContext = function() {\n    if (this.curContext() === types.q_tmpl)\n      this.context.pop()\n    else\n      this.context.push(types.q_tmpl)\n    this.exprAllowed = false\n  }\n\n  // Object type used to represent tokens. Note that normally, tokens\n  // simply exist as properties on the parser object. This is only\n  // used for the onToken callback and the external tokenizer.\n\n  var Token = function Token(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  };\n\n  // ## Tokenizer\n\n  var pp$7 = Parser.prototype\n\n  // Are we running under Rhino?\n  var isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n  // Move to the next token\n\n  pp$7.next = function() {\n    if (this.options.onToken)\n      this.options.onToken(new Token(this))\n\n    this.lastTokEnd = this.end\n    this.lastTokStart = this.start\n    this.lastTokEndLoc = this.endLoc\n    this.lastTokStartLoc = this.startLoc\n    this.nextToken()\n  }\n\n  pp$7.getToken = function() {\n    this.next()\n    return new Token(this)\n  }\n\n  // If we're in an ES6 environment, make parsers iterable\n  if (typeof Symbol !== \"undefined\")\n    pp$7[Symbol.iterator] = function () {\n      var self = this\n      return {next: function () {\n        var token = self.getToken()\n        return {\n          done: token.type === tt.eof,\n          value: token\n        }\n      }}\n    }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  pp$7.setStrict = function(strict) {\n    var this$1 = this;\n\n    this.strict = strict\n    if (this.type !== tt.num && this.type !== tt.string) return\n    this.pos = this.start\n    if (this.options.locations) {\n      while (this.pos < this.lineStart) {\n        this$1.lineStart = this$1.input.lastIndexOf(\"\\n\", this$1.lineStart - 2) + 1\n        --this$1.curLine\n      }\n    }\n    this.nextToken()\n  }\n\n  pp$7.curContext = function() {\n    return this.context[this.context.length - 1]\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  pp$7.nextToken = function() {\n    var curContext = this.curContext()\n    if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n    this.start = this.pos\n    if (this.options.locations) this.startLoc = this.curPosition()\n    if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n    if (curContext.override) return curContext.override(this)\n    else this.readToken(this.fullCharCodeAtPos())\n  }\n\n  pp$7.readToken = function(code) {\n    // Identifier or keyword. '\\uXXXX' sequences are allowed in\n    // identifiers, so '\\' also dispatches to that.\n    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n      return this.readWord()\n\n    return this.getTokenFromCode(code)\n  }\n\n  pp$7.fullCharCodeAtPos = function() {\n    var code = this.input.charCodeAt(this.pos)\n    if (code <= 0xd7ff || code >= 0xe000) return code\n    var next = this.input.charCodeAt(this.pos + 1)\n    return (code << 10) + next - 0x35fdc00\n  }\n\n  pp$7.skipBlockComment = function() {\n    var this$1 = this;\n\n    var startLoc = this.options.onComment && this.curPosition()\n    var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n    if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n    this.pos = end + 2\n    if (this.options.locations) {\n      lineBreakG.lastIndex = start\n      var match\n      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n        ++this$1.curLine\n        this$1.lineStart = match.index + match[0].length\n      }\n    }\n    if (this.options.onComment)\n      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  pp$7.skipLineComment = function(startSkip) {\n    var this$1 = this;\n\n    var start = this.pos\n    var startLoc = this.options.onComment && this.curPosition()\n    var ch = this.input.charCodeAt(this.pos+=startSkip)\n    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n      ++this$1.pos\n      ch = this$1.input.charCodeAt(this$1.pos)\n    }\n    if (this.options.onComment)\n      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                             startLoc, this.curPosition())\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  pp$7.skipSpace = function() {\n    var this$1 = this;\n\n    loop: while (this.pos < this.input.length) {\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      switch (ch) {\n        case 32: case 160: // ' '\n          ++this$1.pos\n          break\n        case 13:\n          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n            ++this$1.pos\n          }\n        case 10: case 8232: case 8233:\n          ++this$1.pos\n          if (this$1.options.locations) {\n            ++this$1.curLine\n            this$1.lineStart = this$1.pos\n          }\n          break\n        case 47: // '/'\n          switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n            case 42: // '*'\n              this$1.skipBlockComment()\n              break\n            case 47:\n              this$1.skipLineComment(2)\n              break\n            default:\n              break loop\n          }\n          break\n        default:\n          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n            ++this$1.pos\n          } else {\n            break loop\n          }\n      }\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `exprAllowed`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  pp$7.finishToken = function(type, val) {\n    this.end = this.pos\n    if (this.options.locations) this.endLoc = this.curPosition()\n    var prevType = this.type\n    this.type = type\n    this.value = val\n\n    this.updateContext(prevType)\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n  //\n  pp$7.readToken_dot = function() {\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next >= 48 && next <= 57) return this.readNumber(true)\n    var next2 = this.input.charCodeAt(this.pos + 2)\n    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n      this.pos += 3\n      return this.finishToken(tt.ellipsis)\n    } else {\n      ++this.pos\n      return this.finishToken(tt.dot)\n    }\n  }\n\n  pp$7.readToken_slash = function() { // '/'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (this.exprAllowed) {++this.pos; return this.readRegexp()}\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.slash, 1)\n  }\n\n  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    var tokentype = code === 42 ? tt.star : tt.modulo\n\n    // exponentiation operator ** and **=\n    if (this.options.ecmaVersion >= 7 && next === 42) {\n      ++size\n      tokentype = tt.starstar\n      next = this.input.charCodeAt(this.pos + 2)\n    }\n\n    if (next === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tokentype, size)\n  }\n\n  pp$7.readToken_pipe_amp = function(code) { // '|&'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n  }\n\n  pp$7.readToken_caret = function() { // '^'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.bitwiseXOR, 1)\n  }\n\n  pp$7.readToken_plus_min = function(code) { // '+-'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === code) {\n      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n        // A `-->` line comment\n        this.skipLineComment(3)\n        this.skipSpace()\n        return this.nextToken()\n      }\n      return this.finishOp(tt.incDec, 2)\n    }\n    if (next === 61) return this.finishOp(tt.assign, 2)\n    return this.finishOp(tt.plusMin, 1)\n  }\n\n  pp$7.readToken_lt_gt = function(code) { // '<>'\n    var next = this.input.charCodeAt(this.pos + 1)\n    var size = 1\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n      return this.finishOp(tt.bitShift, size)\n    }\n    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n        this.input.charCodeAt(this.pos + 3) == 45) {\n      if (this.inModule) this.unexpected()\n      // `<!--`, an XML-style comment that should be interpreted as a line comment\n      this.skipLineComment(4)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    if (next === 61) size = 2\n    return this.finishOp(tt.relational, size)\n  }\n\n  pp$7.readToken_eq_excl = function(code) { // '=!'\n    var next = this.input.charCodeAt(this.pos + 1)\n    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n      this.pos += 2\n      return this.finishToken(tt.arrow)\n    }\n    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n  }\n\n  pp$7.getTokenFromCode = function(code) {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n    case 46: // '.'\n      return this.readToken_dot()\n\n      // Punctuation tokens.\n    case 40: ++this.pos; return this.finishToken(tt.parenL)\n    case 41: ++this.pos; return this.finishToken(tt.parenR)\n    case 59: ++this.pos; return this.finishToken(tt.semi)\n    case 44: ++this.pos; return this.finishToken(tt.comma)\n    case 91: ++this.pos; return this.finishToken(tt.bracketL)\n    case 93: ++this.pos; return this.finishToken(tt.bracketR)\n    case 123: ++this.pos; return this.finishToken(tt.braceL)\n    case 125: ++this.pos; return this.finishToken(tt.braceR)\n    case 58: ++this.pos; return this.finishToken(tt.colon)\n    case 63: ++this.pos; return this.finishToken(tt.question)\n\n    case 96: // '`'\n      if (this.options.ecmaVersion < 6) break\n      ++this.pos\n      return this.finishToken(tt.backQuote)\n\n    case 48: // '0'\n      var next = this.input.charCodeAt(this.pos + 1)\n      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float.\n    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n      return this.readNumber(false)\n\n      // Quotes produce strings.\n    case 34: case 39: // '\"', \"'\"\n      return this.readString(code)\n\n      // Operators are parsed inline in tiny state machines. '=' (61) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n    case 47: // '/'\n      return this.readToken_slash()\n\n    case 37: case 42: // '%*'\n      return this.readToken_mult_modulo_exp(code)\n\n    case 124: case 38: // '|&'\n      return this.readToken_pipe_amp(code)\n\n    case 94: // '^'\n      return this.readToken_caret()\n\n    case 43: case 45: // '+-'\n      return this.readToken_plus_min(code)\n\n    case 60: case 62: // '<>'\n      return this.readToken_lt_gt(code)\n\n    case 61: case 33: // '=!'\n      return this.readToken_eq_excl(code)\n\n    case 126: // '~'\n      return this.finishOp(tt.prefix, 1)\n    }\n\n    this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n  }\n\n  pp$7.finishOp = function(type, size) {\n    var str = this.input.slice(this.pos, this.pos + size)\n    this.pos += size\n    return this.finishToken(type, str)\n  }\n\n  // Parse a regular expression. Some context-awareness is necessary,\n  // since a '/' inside a '[]' set does not end the expression.\n\n  function tryCreateRegexp(src, flags, throwErrorAt, parser) {\n    try {\n      return new RegExp(src, flags)\n    } catch (e) {\n      if (throwErrorAt !== undefined) {\n        if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n        throw e\n      }\n    }\n  }\n\n  var regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\n  pp$7.readRegexp = function() {\n    var this$1 = this;\n\n    var escaped, inClass, start = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(start, \"Unterminated regular expression\")\n      var ch = this$1.input.charAt(this$1.pos)\n      if (lineBreak.test(ch)) this$1.raise(start, \"Unterminated regular expression\")\n      if (!escaped) {\n        if (ch === \"[\") inClass = true\n        else if (ch === \"]\" && inClass) inClass = false\n        else if (ch === \"/\" && !inClass) break\n        escaped = ch === \"\\\\\"\n      } else escaped = false\n      ++this$1.pos\n    }\n    var content = this.input.slice(start, this.pos)\n    ++this.pos\n    // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n    // here (don't ask).\n    var mods = this.readWord1()\n    var tmp = content, tmpFlags = \"\"\n    if (mods) {\n      var validFlags = /^[gim]*$/\n      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n      if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n      if (mods.indexOf(\"u\") >= 0) {\n        if (regexpUnicodeSupport) {\n          tmpFlags = \"u\"\n        } else {\n          // Replace each astral symbol and every Unicode escape sequence that\n          // possibly represents an astral symbol or a paired surrogate with a\n          // single ASCII symbol to avoid throwing on regular expressions that\n          // are only valid in combination with the `/u` flag.\n          // Note: replacing with the ASCII symbol `x` might cause false\n          // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n          // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n          // be replaced by `[x-b]` which throws an error.\n          tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n            code = Number(\"0x\" + code)\n            if (code > 0x10FFFF) this$1.raise(start + offset + 3, \"Code point out of bounds\")\n            return \"x\"\n          })\n          tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n          tmpFlags = tmpFlags.replace(\"u\", \"\")\n        }\n      }\n    }\n    // Detect invalid regular expressions.\n    var value = null\n    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n    // so don't do detection if we are running under Rhino\n    if (!isRhino) {\n      tryCreateRegexp(tmp, tmpFlags, start, this)\n      // Get a regular expression object for this pattern-flag pair, or `null` in\n      // case the current environment doesn't support the flags it uses.\n      value = tryCreateRegexp(content, mods)\n    }\n    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n\n  pp$7.readInt = function(radix, len) {\n    var this$1 = this;\n\n    var start = this.pos, total = 0\n    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      var code = this$1.input.charCodeAt(this$1.pos), val\n      if (code >= 97) val = code - 97 + 10 // a\n      else if (code >= 65) val = code - 65 + 10 // A\n      else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n      else val = Infinity\n      if (val >= radix) break\n      ++this$1.pos\n      total = total * radix + val\n    }\n    if (this.pos === start || len != null && this.pos - start !== len) return null\n\n    return total\n  }\n\n  pp$7.readRadixNumber = function(radix) {\n    this.pos += 2 // 0x\n    var val = this.readInt(radix)\n    if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  pp$7.readNumber = function(startsWithDot) {\n    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n    if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    if (octal && this.pos == start + 1) octal = false\n    var next = this.input.charCodeAt(this.pos)\n    if (next === 46 && !octal) { // '.'\n      ++this.pos\n      this.readInt(10)\n      isFloat = true\n      next = this.input.charCodeAt(this.pos)\n    }\n    if ((next === 69 || next === 101) && !octal) { // 'eE'\n      next = this.input.charCodeAt(++this.pos)\n      if (next === 43 || next === 45) ++this.pos // '+-'\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n      isFloat = true\n    }\n    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n    var str = this.input.slice(start, this.pos), val\n    if (isFloat) val = parseFloat(str)\n    else if (!octal || str.length === 1) val = parseInt(str, 10)\n    else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n    else val = parseInt(str, 8)\n    return this.finishToken(tt.num, val)\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  pp$7.readCodePoint = function() {\n    var ch = this.input.charCodeAt(this.pos), code\n\n    if (ch === 123) {\n      if (this.options.ecmaVersion < 6) this.unexpected()\n      var codePos = ++this.pos\n      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n      ++this.pos\n      if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n    } else {\n      code = this.readHexChar(4)\n    }\n    return code\n  }\n\n  function codePointToString(code) {\n    // UTF-16 Decoding\n    if (code <= 0xFFFF) return String.fromCharCode(code)\n    code -= 0x10000\n    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n  }\n\n  pp$7.readString = function(quote) {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = ++this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated string constant\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === quote) break\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(false)\n        chunkStart = this$1.pos\n      } else {\n        if (isNewLine(ch)) this$1.raise(this$1.start, \"Unterminated string constant\")\n        ++this$1.pos\n      }\n    }\n    out += this.input.slice(chunkStart, this.pos++)\n    return this.finishToken(tt.string, out)\n  }\n\n  // Reads template string tokens.\n\n  pp$7.readTmplToken = function() {\n    var this$1 = this;\n\n    var out = \"\", chunkStart = this.pos\n    for (;;) {\n      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, \"Unterminated template\")\n      var ch = this$1.input.charCodeAt(this$1.pos)\n      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n        if (this$1.pos === this$1.start && this$1.type === tt.template) {\n          if (ch === 36) {\n            this$1.pos += 2\n            return this$1.finishToken(tt.dollarBraceL)\n          } else {\n            ++this$1.pos\n            return this$1.finishToken(tt.backQuote)\n          }\n        }\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        return this$1.finishToken(tt.template, out)\n      }\n      if (ch === 92) { // '\\'\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        out += this$1.readEscapedChar(true)\n        chunkStart = this$1.pos\n      } else if (isNewLine(ch)) {\n        out += this$1.input.slice(chunkStart, this$1.pos)\n        ++this$1.pos\n        switch (ch) {\n          case 13:\n            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos\n          case 10:\n            out += \"\\n\"\n            break\n          default:\n            out += String.fromCharCode(ch)\n            break\n        }\n        if (this$1.options.locations) {\n          ++this$1.curLine\n          this$1.lineStart = this$1.pos\n        }\n        chunkStart = this$1.pos\n      } else {\n        ++this$1.pos\n      }\n    }\n  }\n\n  // Used to read escaped characters\n\n  pp$7.readEscapedChar = function(inTemplate) {\n    var ch = this.input.charCodeAt(++this.pos)\n    ++this.pos\n    switch (ch) {\n    case 110: return \"\\n\" // 'n' -> '\\n'\n    case 114: return \"\\r\" // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n    case 117: return codePointToString(this.readCodePoint()) // 'u'\n    case 116: return \"\\t\" // 't' -> '\\t'\n    case 98: return \"\\b\" // 'b' -> '\\b'\n    case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n    case 102: return \"\\f\" // 'f' -> '\\f'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n      return \"\"\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n        var octal = parseInt(octalStr, 8)\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1)\n          octal = parseInt(octalStr, 8)\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\")\n        }\n        this.pos += octalStr.length - 1\n        return String.fromCharCode(octal)\n      }\n      return String.fromCharCode(ch)\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u', '\\U').\n\n  pp$7.readHexChar = function(len) {\n    var codePos = this.pos\n    var n = this.readInt(16, len)\n    if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n    return n\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n\n  pp$7.readWord1 = function() {\n    var this$1 = this;\n\n    this.containsEsc = false\n    var word = \"\", first = true, chunkStart = this.pos\n    var astral = this.options.ecmaVersion >= 6\n    while (this.pos < this.input.length) {\n      var ch = this$1.fullCharCodeAtPos()\n      if (isIdentifierChar(ch, astral)) {\n        this$1.pos += ch <= 0xffff ? 1 : 2\n      } else if (ch === 92) { // \"\\\"\n        this$1.containsEsc = true\n        word += this$1.input.slice(chunkStart, this$1.pos)\n        var escStart = this$1.pos\n        if (this$1.input.charCodeAt(++this$1.pos) != 117) // \"u\"\n          this$1.raise(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n        ++this$1.pos\n        var esc = this$1.readCodePoint()\n        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n          this$1.raise(escStart, \"Invalid Unicode escape\")\n        word += codePointToString(esc)\n        chunkStart = this$1.pos\n      } else {\n        break\n      }\n      first = false\n    }\n    return word + this.input.slice(chunkStart, this.pos)\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  pp$7.readWord = function() {\n    var word = this.readWord1()\n    var type = tt.name\n    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))\n      type = keywordTypes[word]\n    return this.finishToken(type, word)\n  }\n\n  var version = \"4.0.3\"\n\n  // The main exported interface (under `self.acorn` when in the\n  // browser) is a `parse` function that takes a code string and\n  // returns an abstract syntax tree as specified by [Mozilla parser\n  // API][api].\n  //\n  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\n  function parse(input, options) {\n    return new Parser(options, input).parse()\n  }\n\n  // This function tries to parse a single expression at a given\n  // offset in a string. Useful for parsing mixed-language formats\n  // that embed JavaScript expressions.\n\n  function parseExpressionAt(input, pos, options) {\n    var p = new Parser(options, input, pos)\n    p.nextToken()\n    return p.parseExpression()\n  }\n\n  // Acorn is organized as a tokenizer and a recursive-descent parser.\n  // The `tokenizer` export provides an interface to the tokenizer.\n\n  function tokenizer(input, options) {\n    return new Parser(options, input)\n  }\n\n  // This is a terrible kludge to support the existing, pre-ES6\n  // interface where the loose parser module retroactively adds exports\n  // to this module.\n  function addLooseExports(parse, Parser, plugins) {\n    exports.parse_dammit = parse\n    exports.LooseParser = Parser\n    exports.pluginsLoose = plugins\n  }\n\n  exports.version = version;\n  exports.parse = parse;\n  exports.parseExpressionAt = parseExpressionAt;\n  exports.tokenizer = tokenizer;\n  exports.addLooseExports = addLooseExports;\n  exports.Parser = Parser;\n  exports.plugins = plugins;\n  exports.defaultOptions = defaultOptions;\n  exports.Position = Position;\n  exports.SourceLocation = SourceLocation;\n  exports.getLineInfo = getLineInfo;\n  exports.Node = Node;\n  exports.TokenType = TokenType;\n  exports.tokTypes = tt;\n  exports.TokContext = TokContext;\n  exports.tokContexts = types;\n  exports.isIdentifierChar = isIdentifierChar;\n  exports.isIdentifierStart = isIdentifierStart;\n  exports.Token = Token;\n  exports.isNewLine = isNewLine;\n  exports.lineBreak = lineBreak;\n  exports.lineBreakG = lineBreakG;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-interp/~/acorn/dist/acorn.js\n ** module id = 10\n ** module chunks = 0\n **/"],"sourceRoot":""}